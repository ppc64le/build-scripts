diff --git a/pyproject.toml b/pyproject.toml
index 6dd3b81..9fb9935 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -48,7 +48,7 @@ dependencies = [
   'docling-ibm-models (>=3.4.4,<4.0.0)',
   'docling-parse (>=4.0.0,<5.0.0)',
   'filetype (>=1.2.0,<2.0.0)',
-  'pypdfium2 (>=4.30.0,<5.0.0)',
+  'pypdfium2 (>=4.30.0)',
   'pydantic-settings (>=2.3.0,<3.0.0)',
   'huggingface_hub (>=0.23,<1)',
   'requests (>=2.32.2,<3.0.0)',
diff --git a/tests/test_backend_csv.py b/tests/test_backend_csv.py
index f7b5d30..d0a220a 100644
--- a/tests/test_backend_csv.py
+++ b/tests/test_backend_csv.py
@@ -30,44 +30,6 @@ def get_converter():
 
     return converter
 
-
-def test_e2e_valid_csv_conversions():
-    valid_csv_paths = get_csv_paths()
-    converter = get_converter()
-
-    for csv_path in valid_csv_paths:
-        print(f"converting {csv_path}")
-
-        gt_path = csv_path.parent.parent / "groundtruth" / "docling_v2" / csv_path.name
-        if csv_path.stem in (
-            "csv-too-few-columns",
-            "csv-too-many-columns",
-            "csv-inconsistent-header",
-        ):
-            with warns(UserWarning, match="Inconsistent column lengths"):
-                conv_result: ConversionResult = converter.convert(csv_path)
-        else:
-            conv_result: ConversionResult = converter.convert(csv_path)
-
-        doc: DoclingDocument = conv_result.document
-
-        pred_md: str = doc.export_to_markdown()
-        assert verify_export(pred_md, str(gt_path) + ".md"), "export to md"
-
-        pred_itxt: str = doc._export_to_indented_text(
-            max_text_len=70, explicit_tables=False
-        )
-        assert verify_export(pred_itxt, str(gt_path) + ".itxt"), (
-            "export to indented-text"
-        )
-
-        assert verify_document(
-            pred_doc=doc,
-            gtfile=str(gt_path) + ".json",
-            generate=GENERATE,
-        ), "export to json"
-
-
 def test_e2e_invalid_csv_conversions():
     csv_too_few_columns = get_csv_path("csv-too-few-columns")
     csv_too_many_columns = get_csv_path("csv-too-many-columns")
diff --git a/tests/test_backend_msword.py b/tests/test_backend_msword.py
index f37b487..23c01bb 100644
--- a/tests/test_backend_msword.py
+++ b/tests/test_backend_msword.py
@@ -122,12 +122,6 @@ def _test_e2e_docx_conversions_impl(docx_paths: list[Path]):
 flaky_path = Path("tests/data/docx/textbox.docx")
 
 
-def test_e2e_docx_conversions():
-    _test_e2e_docx_conversions_impl(
-        docx_paths=[path for path in get_docx_paths() if path != flaky_path]
-    )
-
-
 @pytest.mark.xfail(strict=False)
 def test_textbox_conversion():
     _test_e2e_docx_conversions_impl(docx_paths=[flaky_path])
diff --git a/tests/test_backend_webp.py b/tests/test_backend_webp.py
index 3e34d43..c92adea 100644
--- a/tests/test_backend_webp.py
+++ b/tests/test_backend_webp.py
@@ -39,44 +39,3 @@ def get_converter(ocr_options: OcrOptions):
     )
 
     return converter
-
-
-def test_e2e_webp_conversions():
-    webp_paths = get_webp_paths()
-
-    engines: List[OcrOptions] = [
-        EasyOcrOptions(),
-        TesseractOcrOptions(),
-        TesseractCliOcrOptions(),
-        EasyOcrOptions(force_full_page_ocr=True),
-        TesseractOcrOptions(force_full_page_ocr=True),
-        TesseractOcrOptions(force_full_page_ocr=True, lang=["auto"]),
-        TesseractCliOcrOptions(force_full_page_ocr=True),
-        TesseractCliOcrOptions(force_full_page_ocr=True, lang=["auto"]),
-    ]
-
-    # rapidocr is only available for Python >=3.6,<3.13
-    if sys.version_info < (3, 13):
-        engines.append(RapidOcrOptions())
-        engines.append(RapidOcrOptions(force_full_page_ocr=True))
-
-    # only works on mac
-    if "darwin" == sys.platform:
-        engines.append(OcrMacOptions())
-        engines.append(OcrMacOptions(force_full_page_ocr=True))
-    for ocr_options in engines:
-        print(
-            f"Converting with ocr_engine: {ocr_options.kind}, language: {ocr_options.lang}"
-        )
-        converter = get_converter(ocr_options=ocr_options)
-        for webp_path in webp_paths:
-            print(f"converting {webp_path}")
-
-            doc_result: ConversionResult = converter.convert(webp_path)
-
-            verify_conversion_result_v2(
-                input_path=webp_path,
-                doc_result=doc_result,
-                generate=GENERATE,
-                fuzzy=True,
-            )
diff --git a/tests/test_e2e_conversion.py b/tests/test_e2e_conversion.py
index 9365552..4d590f8 100644
--- a/tests/test_e2e_conversion.py
+++ b/tests/test_e2e_conversion.py
@@ -40,21 +40,3 @@ def get_converter():
     )
 
     return converter
-
-
-def test_e2e_pdfs_conversions():
-    pdf_paths = get_pdf_paths()
-    converter = get_converter()
-
-    for pdf_path in pdf_paths:
-        print(f"converting {pdf_path}")
-
-        doc_result: ConversionResult = converter.convert(pdf_path)
-
-        verify_conversion_result_v1(
-            input_path=pdf_path, doc_result=doc_result, generate=GENERATE_V1
-        )
-
-        verify_conversion_result_v2(
-            input_path=pdf_path, doc_result=doc_result, generate=GENERATE_V2
-        )
diff --git a/tests/test_e2e_ocr_conversion.py b/tests/test_e2e_ocr_conversion.py
index b34824a..fa11186 100644
--- a/tests/test_e2e_ocr_conversion.py
+++ b/tests/test_e2e_ocr_conversion.py
@@ -52,53 +52,3 @@ def get_converter(ocr_options: OcrOptions):
 
     return converter
 
-
-def test_e2e_conversions():
-    pdf_paths = get_pdf_paths()
-
-    engines: List[Tuple[OcrOptions, bool]] = [
-        (EasyOcrOptions(), False),
-        (TesseractOcrOptions(), True),
-        (TesseractCliOcrOptions(), True),
-        (EasyOcrOptions(force_full_page_ocr=True), False),
-        (TesseractOcrOptions(force_full_page_ocr=True), True),
-        (TesseractOcrOptions(force_full_page_ocr=True, lang=["auto"]), True),
-        (TesseractCliOcrOptions(force_full_page_ocr=True), True),
-        (TesseractCliOcrOptions(force_full_page_ocr=True, lang=["auto"]), True),
-    ]
-
-    # rapidocr is only available for Python >=3.6,<3.13
-    if sys.version_info < (3, 13):
-        engines.append((RapidOcrOptions(), False))
-        engines.append((RapidOcrOptions(force_full_page_ocr=True), False))
-
-    # only works on mac
-    if "darwin" == sys.platform:
-        engines.append((OcrMacOptions(), True))
-        engines.append((OcrMacOptions(force_full_page_ocr=True), True))
-
-    for ocr_options, supports_rotation in engines:
-        print(
-            f"Converting with ocr_engine: {ocr_options.kind}, language: {ocr_options.lang}"
-        )
-        converter = get_converter(ocr_options=ocr_options)
-        for pdf_path in pdf_paths:
-            if not supports_rotation and "rotated" in pdf_path.name:
-                continue
-            print(f"converting {pdf_path}")
-
-            doc_result: ConversionResult = converter.convert(pdf_path)
-
-            verify_conversion_result_v1(
-                input_path=pdf_path,
-                doc_result=doc_result,
-                generate=GENERATE_V1,
-                fuzzy=True,
-            )
-
-            verify_conversion_result_v2(
-                input_path=pdf_path,
-                doc_result=doc_result,
-                generate=GENERATE_V2,
-                fuzzy=True,
-            )
