diff --git a/protobuf/Dockerfile b/protobuf/Dockerfile
index 736b5d3..fd3bbc8 100644
--- a/protobuf/Dockerfile
+++ b/protobuf/Dockerfile
@@ -1,4 +1,4 @@
-ARG ALPINE_VERSION=3.14
+ARG UBI_VERSION=8.5
 ARG GO_VERSION=1.17.1
 # gRPC core version that applies to C++, C#, Objective-C, PhP, Python, Ruby
 ARG GRPC_VERSION=1.41.0
@@ -16,8 +16,15 @@ ARG PROTOC_GEN_PARQUET_VERSION=0.4.2
 ARG UPX_VERSION=3.96
 
 
-FROM alpine:${ALPINE_VERSION} as protoc_builder
-RUN apk add --no-cache build-base curl automake autoconf libtool git zlib-dev linux-headers cmake ninja
+FROM registry.access.redhat.com/ubi8:${UBI_VERSION} as protoc_builder
+
+RUN echo "Installing required repos..." \  
+    && dnf install -qy http://mirror.centos.org/centos/8-stream/BaseOS/ppc64le/os/Packages/centos-gpg-keys-8-6.el8.noarch.rpm \ 
+    && dnf install -qy http://mirror.centos.org/centos/8-stream/BaseOS/ppc64le/os/Packages/centos-stream-repos-8-6.el8.noarch.rpm \ 
+    && dnf install -qy epel-release \ 
+    && dnf config-manager --enable powertools
+
+RUN dnf install -qy gcc-c++ curl automake autoconf libtool git zlib-devel kernel-headers cmake ninja-build
 
 RUN mkdir -p /out
 
@@ -27,13 +34,13 @@ RUN git clone --recursive --depth=1 -b v${GRPC_VERSION} https://github.com/grpc/
     mkdir -p /grpc/cmake/build && \
     cd /grpc/cmake/build && \
     cmake \
-        -GNinja \
-        -DBUILD_SHARED_LIBS=ON \
-        -DCMAKE_INSTALL_PREFIX=/usr \
-        -DCMAKE_BUILD_TYPE=Release \
-        -DgRPC_INSTALL=ON \
-        -DgRPC_BUILD_TESTS=OFF \
-        ../.. && \
+    -GNinja \
+    -DBUILD_SHARED_LIBS=ON \
+    -DCMAKE_INSTALL_PREFIX=/usr \
+    -DCMAKE_BUILD_TYPE=Release \
+    -DgRPC_INSTALL=ON \
+    -DgRPC_BUILD_TESTS=OFF \
+    ../.. && \
     cmake --build . --target plugins && \
     cmake --build . --target install && \
     DESTDIR=/out cmake --build . --target install 
@@ -53,11 +60,11 @@ RUN mkdir -p /grpc-java && \
     curl -sSL https://api.github.com/repos/grpc/grpc-java/tarball/v${GRPC_JAVA_VERSION} | tar xz --strip 1 -C /grpc-java && \
     cd /grpc-java && \
     g++ \
-        -I. -I/usr/include \
-        compiler/src/java_plugin/cpp/*.cpp \
-        -L/usr/lib64 \
-        -lprotoc -lprotobuf -lpthread --std=c++0x -s \
-        -o protoc-gen-grpc-java && \
+    -I. -I/usr/include \
+    compiler/src/java_plugin/cpp/*.cpp \
+    -L/usr/lib64 \
+    -lprotoc -lprotobuf -lpthread --std=c++0x -s \
+    -o protoc-gen-grpc-java && \
     install -Ds protoc-gen-grpc-java /out/usr/bin/protoc-gen-grpc-java && \
     rm -Rf /grpc-java && \
     rm -Rf /grpc
@@ -69,8 +76,18 @@ RUN mkdir -p /grpc-web && \
     make install-plugin && \
     install -Ds /usr/local/bin/protoc-gen-grpc-web /out/usr/bin/protoc-gen-grpc-web
 
-FROM golang:${GO_VERSION}-alpine${ALPINE_VERSION} as go_builder
-RUN apk add --no-cache build-base curl git
+FROM registry.access.redhat.com/ubi8:${UBI_VERSION} as go_builder 
+RUN dnf install -qy wget                                                                                                                                                                                       bc && \
+    export GO_VERSION=1.17.1 && \
+    echo "installing go ${GO_VERSION}"                                                                                                                                                                             && \    
+    rm -rf /usr/local/go                                                                                                                                                                                      && \ 
+    cd /tmp && \ 
+    wget  go.dev/dl/go"$GO_VERSION".linux-ppc64le.tar.gz                                                                                                                                                 && \
+    tar -xf ./go"$GO_VERSION".linux-ppc64le.tar.gz --directory=/usr/local && \ 
+    rm -f go"$GO_VERSION".linux-ppc64le.tar.gz && \ 
+    dnf install -qy gcc-c++  curl git unzip 
+
+ENV PATH="$PATH:/usr/local/go/bin"
 
 ARG PROTOC_GEN_GO_GRPC_VERSION
 RUN mkdir -p ${GOPATH}/src/github.com/grpc/grpc-go && \
@@ -103,12 +120,12 @@ RUN mkdir -p ${GOPATH}/src/github.com/gogo/protobuf && \
     install -D ./gogoproto/gogo.proto /out/usr/include/github.com/gogo/protobuf/gogoproto/gogo.proto
 
 ARG PROTOC_GEN_LINT_VERSION
-RUN cd / && \
-    curl -sSLO https://github.com/ckaznocha/protoc-gen-lint/releases/download/v${PROTOC_GEN_LINT_VERSION}/protoc-gen-lint_linux_amd64.zip && \
-    mkdir -p /protoc-gen-lint-out && \
-    cd /protoc-gen-lint-out && \
-    unzip -q /protoc-gen-lint_linux_amd64.zip && \
-    install -Ds /protoc-gen-lint-out/protoc-gen-lint /out/usr/bin/protoc-gen-lint
+RUN    go install github.com/ckaznocha/protoc-gen-lint@v${PROTOC_GEN_LINT_VERSION} && \
+    export GOPATH=$(go env | grep gopath -i | cut -f2 -d "=" | sed 's/"//g') && \
+    cp $GOPATH/bin/protoc-gen-lint /usr/bin/ && \
+    chmod 755 /usr/bin/protoc-gen-lint
+
+
 
 ARG GRPC_GATEWAY_VERSION
 RUN mkdir -p ${GOPATH}/src/github.com/grpc-ecosystem/grpc-gateway && \
@@ -130,11 +147,11 @@ RUN mkdir -p ${GOPATH}/src/github.com/atoulme/protoc-gen-parquet && \
     mkdir -p /out/usr/include/protoc-gen-parquet/options && \
     install -D $(find ./parquet_options -name '*.proto') -t /out/usr/include/protoc-gen-parquet/options
 
-FROM alpine:${ALPINE_VERSION} as packer
-RUN apk add --no-cache curl
+FROM registry.access.redhat.com/ubi8:${UBI_VERSION} as packer
+RUN dnf install -qy curl xz 
 
 ARG UPX_VERSION
-RUN mkdir -p /upx && curl -sSL https://github.com/upx/upx/releases/download/v${UPX_VERSION}/upx-${UPX_VERSION}-amd64_linux.tar.xz | tar xJ --strip 1 -C /upx && \
+RUN mkdir -p /upx && curl -sSL https://github.com/upx/upx/releases/download/v${UPX_VERSION}/upx-${UPX_VERSION}-powerpc64le_linux.tar.xz | tar xJ --strip 1 -C /upx && \
     install -D /upx/upx /usr/local/bin/upx
 
 # Use all output including headers and protoc from protoc_builder
@@ -143,22 +160,22 @@ COPY --from=protoc_builder /out/ /out/
 # Integrate all output from go_builder
 COPY --from=go_builder /out/ /out/
 
-RUN upx --lzma $(find /out/usr/bin/ \
-        -type f -name 'grpc_*' \
-        -not -name 'grpc_csharp_plugin' \
-        -not -name 'grpc_node_plugin' \
-        -not -name 'grpc_php_plugin' \
-        -not -name 'grpc_ruby_plugin' \
-        -not -name 'grpc_python_plugin' \
-        -or -name 'protoc-gen-*' \
-    )
+#RUN upx --lzma $(find /out/usr/bin/ \
+#    -type f -name 'grpc_*' \
+#    -not -name 'grpc_csharp_plugin' \
+#    -not -name 'grpc_node_plugin' \
+#    -not -name 'grpc_php_plugin' \
+#    -not -name 'grpc_ruby_plugin' \
+#    -not -name 'grpc_python_plugin' \
+#    -or -name 'protoc-gen-*' \
+#    )
 RUN find /out -name "*.a" -delete -or -name "*.la" -delete
 
 
-FROM alpine:${ALPINE_VERSION}
+FROM registry.access.redhat.com/ubi8:${UBI_VERSION}
 LABEL maintainer="The OpenTelemetry Authors"
 COPY --from=packer /out/ /
-RUN apk add --no-cache bash libstdc++ && \
+RUN dnf install -qy bash libstdc++ && \
     ln -s /usr/bin/grpc_cpp_plugin /usr/bin/protoc-gen-grpc-cpp && \
     ln -s /usr/bin/grpc_csharp_plugin /usr/bin/protoc-gen-grpc-csharp && \
     ln -s /usr/bin/grpc_objective_c_plugin /usr/bin/protoc-gen-grpc-objc && \
