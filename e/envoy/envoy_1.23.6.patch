diff --git a/WORKSPACE b/WORKSPACE
index 0f789feb23..a96cba5013 100644
--- a/WORKSPACE
+++ b/WORKSPACE
@@ -16,10 +16,6 @@ load("//bazel:repositories_extra.bzl", "envoy_dependencies_extra")

 envoy_dependencies_extra()

-load("//bazel:python_dependencies.bzl", "envoy_python_dependencies")
-
-envoy_python_dependencies()
-
 load("//bazel:dependency_imports.bzl", "envoy_dependency_imports")

 envoy_dependency_imports()
diff --git a/bazel/foreign_cc/BUILD b/bazel/foreign_cc/BUILD
index 2fdf1264fe..7364baa5e7 100644
--- a/bazel/foreign_cc/BUILD
+++ b/bazel/foreign_cc/BUILD
@@ -108,6 +108,7 @@ configure_make(
     lib_source = "@com_github_moonjit_moonjit//:all",
     out_include_dir = "include/moonjit-2.2",
     out_static_libs = ["libluajit-5.1.a"],
+    targets = [],
     tags = ["skip_on_windows"],
 )

diff --git a/bazel/foreign_cc/moonjit.patch b/bazel/foreign_cc/moonjit.patch
index 5d34b8be5f..67043e772b 100644
--- a/bazel/foreign_cc/moonjit.patch
+++ b/bazel/foreign_cc/moonjit.patch
@@ -1,3 +1,37 @@
+diff --git a/src/host/buildvm_asm.c b/src/host/buildvm_asm.c
+index 7033e654..6bf27a33 100644
+--- a/src/host/buildvm_asm.c
++++ b/src/host/buildvm_asm.c
+@@ -387,7 +387,7 @@ void emit_asm(BuildCtx *ctx)
+ #if !(LJ_TARGET_PS3 || LJ_TARGET_PSVITA)
+     fprintf(ctx->fp, "\t.section .note.GNU-stack,\"\"," ELFASM_PX "progbits\n");
+ #endif
+-#if LJ_TARGET_PPC && !LJ_TARGET_PS3 && !LJ_ABI_SOFTFP
++#if LJ_TARGET_PPC && !LJ_TARGET_PS3 && !LJ_ABI_SOFTFP && !__clang__
+     /* Hard-float ABI. */
+     fprintf(ctx->fp, "\t.gnu_attribute 4, 1\n");
+ #endif
+diff --git a/src/lj_arch.h b/src/lj_arch.h
+index 2a61af9a..fb88ac18 100644
+--- a/src/lj_arch.h
++++ b/src/lj_arch.h
+@@ -445,6 +445,16 @@
+ #error "Need at least GCC 4.8 or newer"
+ #endif
+ #endif
++#elif LUAJIT_ARCH_PPC
++#if __clang__
++#if ((__clang_major__ < 3) || ((__clang_major__ == 3) && __clang_minor__ < 5)) && !defined(__NX_TOOLCHAIN_MAJOR__)
++#error "Need at least Clang 3.5 or newer"
++#endif
++#else
++#if (__GNUC__ < 4) || ((__GNUC__ == 4) && __GNUC_MINOR__ < 8)
++#error "Need at least GCC 4.8 or newer"
++#endif
++#endif
+ #elif !LJ_TARGET_PS3
+ #if (__GNUC__ < 4) || ((__GNUC__ == 4) && __GNUC_MINOR__ < 3)
+ #error "Need at least GCC 4.3 or newer"
 diff --git a/build.py b/build.py
 new file mode 100644
 index 00000000..dab3606c
diff --git a/bazel/repositories_extra.bzl b/bazel/repositories_extra.bzl
index 885b41dec6..6c99f90753 100644
--- a/bazel/repositories_extra.bzl
+++ b/bazel/repositories_extra.bzl
@@ -1,22 +1,34 @@
 load("@emsdk//:deps.bzl", emsdk_deps = "deps")
-load("@rules_python//python:repositories.bzl", "python_register_toolchains")
+load("@rules_python//python:pip.bzl", "pip_install", "pip_parse")
 load("@proxy_wasm_cpp_host//bazel/cargo/wasmtime:crates.bzl", "wasmtime_fetch_remote_crates")
 load("//bazel/external/cargo:crates.bzl", "raze_fetch_remote_crates")
 load("@aspect_bazel_lib//lib:repositories.bzl", "aspect_bazel_lib_dependencies")

-# Python version for `rules_python`
-PYTHON_VERSION = "3.10.2"
+# Python dependencies.
+def _python_deps():
+    pip_parse(
+        name = "base_pip3",
+        requirements_lock = "@envoy//tools/base:requirements.txt",
+        extra_pip_args = ["--require-hashes"],
+    )
+
+    # These need to use `pip_install`
+    pip_install(
+        # Note: dev requirements do *not* check hashes
+        name = "dev_pip3",
+        requirements = "@envoy//tools/dev:requirements.txt",
+    )
+    pip_install(
+        name = "fuzzing_pip3",
+        requirements = "@rules_fuzzing//fuzzing:requirements.txt",
+        extra_pip_args = ["--require-hashes"],
+    )

 # Envoy deps that rely on a first stage of dependency loading in envoy_dependencies().
-def envoy_dependencies_extra(python_version = PYTHON_VERSION):
+def envoy_dependencies_extra():
+    _python_deps()
     emsdk_deps()
     raze_fetch_remote_crates()
     wasmtime_fetch_remote_crates()

-    # Registers underscored Python minor version - eg `python3_10`
-    python_register_toolchains(
-        name = "python%s" % ("_".join(python_version.split(".")[:-1])),
-        python_version = python_version,
-    )
-
     aspect_bazel_lib_dependencies()
