diff --git a/bazel/boringssl_ppc64le.patch b/bazel/boringssl_ppc64le.patch
new file mode 100755
index 0000000000..27ddcf82e3
--- /dev/null
+++ b/bazel/boringssl_ppc64le.patch
@@ -0,0 +1,14 @@
+diff --git a/src/include/openssl/target.h b/src/include/openssl/target.h
+index 190e250ff..8538316ef 100644
+--- a/src/include/openssl/target.h
++++ b/src/include/openssl/target.h
+@@ -116,6 +116,9 @@ extern "C" {
+ #define OPENSSL_32_BIT
+ #elif defined(__myriad2__)
+ #define OPENSSL_32_BIT
++#elif defined(_ARCH_PPC64)
++#define OPENSSL_64_BIT
++#define OPENSSL_PPC64
+ #else
+ // Note BoringSSL only supports standard 32-bit and 64-bit two's-complement,
+ // little-endian architectures. Functions will not produce the correct answer
diff --git a/bazel/envoy_library.bzl b/bazel/envoy_library.bzl
index 8a9e154a39..729d95fe4c 100644
--- a/bazel/envoy_library.bzl
+++ b/bazel/envoy_library.bzl
@@ -57,6 +57,7 @@ def envoy_cc_extension(
         name,
         tags = [],
         extra_visibility = [],
+        target_compatible_with = [],
         visibility = EXTENSION_CONFIG_VISIBILITY,
         alwayslink = 1,
         **kwargs):
@@ -67,6 +68,7 @@ def envoy_cc_extension(
     envoy_cc_library(
         name = name,
         tags = tags,
+        target_compatible_with = target_compatible_with,
         visibility = visibility,
         alwayslink = alwayslink,
         **kwargs
@@ -78,6 +80,7 @@ def envoy_cc_extension(
             ":is_enabled": [":" + name],
             "//conditions:default": [],
         }),
+        target_compatible_with = target_compatible_with,
         visibility = visibility,
     )
 
@@ -85,10 +88,11 @@ def envoy_cc_contrib_extension(
         name,
         tags = [],
         extra_visibility = [],
+        target_compatible_with = [],
         visibility = CONTRIB_EXTENSION_PACKAGE_VISIBILITY,
         alwayslink = 1,
         **kwargs):
-    envoy_cc_extension(name, tags, extra_visibility, visibility, **kwargs)
+    envoy_cc_extension(name, tags, extra_visibility, target_compatible_with, visibility, **kwargs)
 
 # Envoy C++ library targets should be specified with this function.
 def envoy_cc_library(
@@ -102,6 +106,7 @@ def envoy_cc_library(
         repository = "",
         tags = [],
         deps = [],
+        target_compatible_with = [],
         strip_include_prefix = None,
         include_prefix = None,
         textual_hdrs = None,
@@ -130,6 +135,7 @@ def envoy_cc_library(
         textual_hdrs = textual_hdrs,
         deps = deps + [envoy_external_dep_path(dep) for dep in external_deps] +
                envoy_pch_deps(repository, "//source/common/common:common_pch"),
+        target_compatible_with = target_compatible_with,
         alwayslink = alwayslink,
         linkstatic = envoy_linkstatic(),
         strip_include_prefix = strip_include_prefix,
@@ -146,6 +152,7 @@ def envoy_cc_library(
         visibility = visibility,
         tags = ["nocompdb"] + tags,
         deps = [":" + name],
+        target_compatible_with = target_compatible_with,
         strip_include_prefix = strip_include_prefix,
         include_prefix = include_prefix,
     )
diff --git a/bazel/envoy_test.bzl b/bazel/envoy_test.bzl
index ad05121a99..f14c485ae3 100644
--- a/bazel/envoy_test.bzl
+++ b/bazel/envoy_test.bzl
@@ -150,6 +150,7 @@ def envoy_cc_test(
         # List of pairs (Bazel shell script target, shell script args)
         repository = "",
         external_deps = [],
+        target_compatible_with = [],
         deps = [],
         tags = [],
         args = [],
@@ -179,6 +180,7 @@ def envoy_cc_test(
         ] + envoy_pch_deps(repository, "//test:test_pch"),
         # from https://github.com/google/googletest/blob/6e1970e2376c14bf658eb88f655a054030353f9f/googlemock/src/gmock.cc#L51
         # 2 - by default, mocks act as StrictMocks.
+        target_compatible_with = target_compatible_with,
         args = args + ["--gmock_default_mock_behavior=2"],
         tags = coverage_tags,
         local = local,
diff --git a/bazel/repositories.bzl b/bazel/repositories.bzl
index aa93c9c838..3c6a37fced 100644
--- a/bazel/repositories.bzl
+++ b/bazel/repositories.bzl
@@ -4,7 +4,7 @@ load("@envoy_api//bazel:external_deps.bzl", "load_repository_locations")
 load(":dev_binding.bzl", "envoy_dev_binding")
 load(":repository_locations.bzl", "PROTOC_VERSIONS", "REPOSITORY_LOCATIONS_SPEC")
 
-PPC_SKIP_TARGETS = ["envoy.filters.http.lua"]
+PPC_SKIP_TARGETS = ["envoy.filters.http.lua", "envoy.router.cluster_specifier_plugin.lua"]
 
 WINDOWS_SKIP_TARGETS = [
     "envoy.extensions.http.cache.file_system_http_cache",
@@ -403,6 +403,7 @@ def _boringssl():
         patch_args = ["-p1"],
         patches = [
             "@envoy//bazel:boringssl_static.patch",
+            "@envoy//bazel:boringssl_ppc64le.patch",
         ],
     )
 
diff --git a/bazel/rules_go.patch b/bazel/rules_go.patch
index b0b707b88e..6e5cea047d 100644
--- a/bazel/rules_go.patch
+++ b/bazel/rules_go.patch
@@ -12,6 +12,18 @@
 # - https://github.com/bazelbuild/rules_go/pull/2542
 # - https://github.com/envoyproxy/envoy/issues/11657
 #
+diff --git a/go/private/platforms.bzl b/go/private/platforms.bzl
+index a16e2993..21a62e90 100644
+--- a/go/private/platforms.bzl
++++ b/go/private/platforms.bzl
+@@ -30,7 +30,6 @@ BAZEL_GOARCH_CONSTRAINTS = {
+     "amd64": "@platforms//cpu:x86_64",
+     "arm": "@platforms//cpu:arm",
+     "arm64": "@platforms//cpu:aarch64",
+-    "ppc64": "@platforms//cpu:ppc",
+     "ppc64le": "@platforms//cpu:ppc",
+     "s390x": "@platforms//cpu:s390x",
+ }
 diff --git a/go/private/rules/binary.bzl b/go/private/rules/binary.bzl
 index 91748eda..c1aeb91e 100644
 --- a/go/private/rules/binary.bzl
diff --git a/envoy/common/optref.h b/envoy/common/optref.h
index 2983bde1b1..e421b0d67f 100644
--- a/envoy/common/optref.h
+++ b/envoy/common/optref.h
@@ -101,7 +101,7 @@ template <class T> struct OptRef {
    *
    * @return a reference_wrapper around the value.
    */
-  std::reference_wrapper<const T> value() const { return std::reference_wrapper<T>(*ptr_); }
+  std::reference_wrapper<const T> value() const { return std::reference_wrapper<const T>(*ptr_); }
   std::reference_wrapper<T> value() { return std::reference_wrapper<T>(*ptr_); }
 
   /**
diff --git a/source/extensions/filters/common/lua/BUILD b/source/extensions/filters/common/lua/BUILD
index 12d7d0554a..b87564739b 100644
--- a/source/extensions/filters/common/lua/BUILD
+++ b/source/extensions/filters/common/lua/BUILD
@@ -15,6 +15,10 @@ envoy_cc_library(
     external_deps = [
         "luajit",
     ],
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         "//envoy/thread_local:thread_local_interface",
         "//source/common/common:assert_lib",
@@ -29,6 +33,10 @@ envoy_cc_library(
     name = "wrappers_lib",
     srcs = ["wrappers.cc"],
     hdrs = ["wrappers.h"],
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         ":lua_lib",
         "//envoy/buffer:buffer_interface",
diff --git a/source/extensions/filters/http/lua/BUILD b/source/extensions/filters/http/lua/BUILD
index 64d6dc47d3..cb29369cad 100644
--- a/source/extensions/filters/http/lua/BUILD
+++ b/source/extensions/filters/http/lua/BUILD
@@ -16,6 +16,10 @@ envoy_cc_library(
     name = "lua_filter_lib",
     srcs = ["lua_filter.cc"],
     hdrs = ["lua_filter.h"],
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         ":wrappers_lib",
         "//envoy/http:codes_interface",
@@ -37,6 +41,10 @@ envoy_cc_library(
     name = "wrappers_lib",
     srcs = ["wrappers.cc"],
     hdrs = ["wrappers.h"],
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         "//envoy/http:header_map_interface",
         "//envoy/stream_info:stream_info_interface",
@@ -53,6 +61,10 @@ envoy_cc_extension(
     name = "config",
     srcs = ["config.cc"],
     hdrs = ["config.h"],
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         "//envoy/registry",
         "//source/extensions/filters/http/common:factory_base_lib",
diff --git a/source/extensions/router/cluster_specifiers/lua/BUILD b/source/extensions/router/cluster_specifiers/lua/BUILD
index 92927266d1..4f1f7e86b0 100644
--- a/source/extensions/router/cluster_specifiers/lua/BUILD
+++ b/source/extensions/router/cluster_specifiers/lua/BUILD
@@ -19,6 +19,10 @@ envoy_cc_library(
     hdrs = [
         "lua_cluster_specifier.h",
     ],
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         "//envoy/router:cluster_specifier_plugin_interface",
         "//source/common/common:utility_lib",
@@ -34,6 +38,10 @@ envoy_cc_extension(
     name = "config",
     srcs = ["config.cc"],
     hdrs = ["config.h"],
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         ":lua_cluster_specifier_lib",
         "//envoy/registry",
diff --git a/test/extensions/filters/common/lua/BUILD b/test/extensions/filters/common/lua/BUILD
index 339e181ff7..1f97d349f9 100644
--- a/test/extensions/filters/common/lua/BUILD
+++ b/test/extensions/filters/common/lua/BUILD
@@ -12,6 +12,10 @@ envoy_package()
 envoy_cc_test(
     name = "lua_test",
     srcs = ["lua_test.cc"],
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         "//source/common/thread_local:thread_local_lib",
         "//source/extensions/filters/common/lua:lua_lib",
@@ -24,6 +28,10 @@ envoy_cc_test(
 envoy_cc_test(
     name = "wrappers_test",
     srcs = ["wrappers_test.cc"],
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         ":lua_wrappers_lib",
         "//source/common/buffer:buffer_lib",
@@ -38,6 +46,10 @@ envoy_cc_test(
 envoy_cc_test_library(
     name = "lua_wrappers_lib",
     hdrs = ["lua_wrappers.h"],
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         "//source/extensions/filters/common/lua:lua_lib",
         "//test/mocks/thread_local:thread_local_mocks",
diff --git a/test/extensions/filters/http/lua/BUILD b/test/extensions/filters/http/lua/BUILD
index fc9925019f..ce3a19658c 100644
--- a/test/extensions/filters/http/lua/BUILD
+++ b/test/extensions/filters/http/lua/BUILD
@@ -15,6 +15,10 @@ envoy_extension_cc_test(
     name = "lua_filter_test",
     srcs = ["lua_filter_test.cc"],
     extension_names = ["envoy.filters.http.lua"],
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         "//source/common/stream_info:stream_info_lib",
         "//source/extensions/filters/http/lua:lua_filter_lib",
@@ -35,6 +39,10 @@ envoy_extension_cc_test(
     name = "wrappers_test",
     srcs = ["wrappers_test.cc"],
     extension_names = ["envoy.filters.http.lua"],
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         "//source/common/network:address_lib",
         "//source/common/stream_info:stream_info_lib",
@@ -51,6 +59,10 @@ envoy_extension_cc_test(
     size = "large",
     srcs = ["lua_integration_test.cc"],
     extension_names = ["envoy.filters.http.lua"],
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         "//source/extensions/filters/http/lua:config",
         "//test/config:v2_link_hacks",
@@ -65,6 +77,10 @@ envoy_extension_cc_test(
     name = "config_test",
     srcs = ["config_test.cc"],
     extension_names = ["envoy.filters.http.lua"],
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         "//source/extensions/filters/http/lua:config",
         "//test/mocks/server:factory_context_mocks",
diff --git a/test/extensions/router/cluster_specifiers/lua/BUILD b/test/extensions/router/cluster_specifiers/lua/BUILD
index f086f868f5..7ad61d2cec 100644
--- a/test/extensions/router/cluster_specifiers/lua/BUILD
+++ b/test/extensions/router/cluster_specifiers/lua/BUILD
@@ -15,6 +15,10 @@ envoy_extension_cc_test(
     name = "lua_cluster_specifier_test",
     srcs = ["lua_cluster_specifier_test.cc"],
     extension_names = ["envoy.router.cluster_specifier_plugin.lua"],
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         "//source/extensions/router/cluster_specifiers/lua:lua_cluster_specifier_lib",
         "//test/mocks/router:router_mocks",
@@ -27,6 +31,10 @@ envoy_extension_cc_test(
     name = "config_test",
     srcs = ["config_test.cc"],
     extension_names = ["envoy.router.cluster_specifier_plugin.lua"],
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         "//source/extensions/router/cluster_specifiers/lua:config",
         "//test/mocks/server:factory_context_mocks",
