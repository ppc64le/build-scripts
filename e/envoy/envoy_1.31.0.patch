diff --git a/bazel/boringssl_ppc64le.patch b/bazel/boringssl_ppc64le.patch
new file mode 100755
index 0000000000..66d0d92d90
--- /dev/null
+++ b/bazel/boringssl_ppc64le.patch
@@ -0,0 +1,14 @@
+diff --git a/include/openssl/target.h b/include/openssl/target.h
+index 2760f52ce..4290dcd58 100644
+--- a/include/openssl/target.h
++++ b/include/openssl/target.h
+@@ -54,6 +54,9 @@
+ #define OPENSSL_32_BIT
+ #elif defined(__myriad2__)
+ #define OPENSSL_32_BIT
++#elif defined(_ARCH_PPC64)
++#define OPENSSL_64_BIT
++#define OPENSSL_PPC64
+ #else
+ // The list above enumerates the platforms that BoringSSL supports. For these
+ // platforms we keep a reasonable bar of not breaking them: automated test
diff --git a/bazel/envoy_library.bzl b/bazel/envoy_library.bzl
index c1266770d7..e55e2d1528 100644
--- a/bazel/envoy_library.bzl
+++ b/bazel/envoy_library.bzl
@@ -58,6 +58,7 @@ def envoy_cc_extension(
         name,
         tags = [],
         extra_visibility = [],
+        target_compatible_with = [],
         visibility = EXTENSION_CONFIG_VISIBILITY,
         alwayslink = 1,
         **kwargs):
@@ -68,6 +69,7 @@ def envoy_cc_extension(
     envoy_cc_library(
         name = name,
         tags = tags,
+        target_compatible_with = target_compatible_with,
         visibility = visibility,
         alwayslink = alwayslink,
         **kwargs
@@ -79,6 +81,7 @@ def envoy_cc_extension(
             ":is_enabled": [":" + name],
             "//conditions:default": [],
         }),
+        target_compatible_with = target_compatible_with,
         visibility = visibility,
     )
 
@@ -86,10 +89,11 @@ def envoy_cc_contrib_extension(
         name,
         tags = [],
         extra_visibility = [],
+        target_compatible_with = [],
         visibility = CONTRIB_EXTENSION_PACKAGE_VISIBILITY,
         alwayslink = 1,
         **kwargs):
-    envoy_cc_extension(name, tags, extra_visibility, visibility, **kwargs)
+    envoy_cc_extension(name, tags, extra_visibility, target_compatible_with, visibility, **kwargs)
 
 # Envoy C++ library targets should be specified with this function.
 def envoy_cc_library(
@@ -103,6 +107,7 @@ def envoy_cc_library(
         repository = "",
         tags = [],
         deps = [],
+        target_compatible_with = [],
         strip_include_prefix = None,
         include_prefix = None,
         textual_hdrs = None,
@@ -132,6 +137,7 @@ def envoy_cc_library(
         textual_hdrs = textual_hdrs,
         deps = deps + [envoy_external_dep_path(dep) for dep in external_deps] +
                envoy_pch_deps(repository, "//source/common/common:common_pch"),
+        target_compatible_with = target_compatible_with,
         alwayslink = alwayslink,
         linkstatic = envoy_linkstatic(),
         strip_include_prefix = strip_include_prefix,
@@ -149,6 +155,7 @@ def envoy_cc_library(
         visibility = visibility,
         tags = ["nocompdb"] + tags,
         deps = [":" + name],
+        target_compatible_with = target_compatible_with,
         strip_include_prefix = strip_include_prefix,
         include_prefix = include_prefix,
     )
diff --git a/bazel/envoy_test.bzl b/bazel/envoy_test.bzl
index 0bdfc36c51..0f408c1f1c 100644
--- a/bazel/envoy_test.bzl
+++ b/bazel/envoy_test.bzl
@@ -151,6 +151,7 @@ def envoy_cc_test(
         # List of pairs (Bazel shell script target, shell script args)
         repository = "",
         external_deps = [],
+        target_compatible_with = [],
         deps = [],
         tags = [],
         args = [],
@@ -181,6 +182,7 @@ def envoy_cc_test(
         ] + envoy_pch_deps(repository, "//test:test_pch"),
         # from https://github.com/google/googletest/blob/6e1970e2376c14bf658eb88f655a054030353f9f/googlemock/src/gmock.cc#L51
         # 2 - by default, mocks act as StrictMocks.
+        target_compatible_with = target_compatible_with,
         args = args + ["--gmock_default_mock_behavior=2"],
         tags = coverage_tags,
         local = local,
diff --git a/bazel/repositories.bzl b/bazel/repositories.bzl
index 02f7abd725..3a21605e98 100644
--- a/bazel/repositories.bzl
+++ b/bazel/repositories.bzl
@@ -4,7 +4,7 @@ load("@envoy_api//bazel:external_deps.bzl", "load_repository_locations")
 load(":dev_binding.bzl", "envoy_dev_binding")
 load(":repository_locations.bzl", "PROTOC_VERSIONS", "REPOSITORY_LOCATIONS_SPEC")
 
-PPC_SKIP_TARGETS = ["envoy.filters.http.lua"]
+PPC_SKIP_TARGETS = ["envoy.filters.http.lua", "envoy.router.cluster_specifier_plugin.lua"]
 
 WINDOWS_SKIP_TARGETS = [
     "envoy.extensions.http.cache.file_system_http_cache",
@@ -408,6 +408,7 @@ def _boringssl():
         patch_args = ["-p1"],
         patches = [
             "@envoy//bazel:boringssl_static.patch",
+            "@envoy//bazel:boringssl_ppc64le.patch",
         ],
     )
 
@@ -1460,13 +1461,7 @@ def _rules_ruby():
     external_http_archive("rules_ruby")
 
 def _foreign_cc_dependencies():
-    external_http_archive(
-        name = "rules_foreign_cc",
-        # This patch is needed to fix build on macos with xcode 15.3.
-        # remove this when https://github.com/bazelbuild/rules_foreign_cc/issues/1186 fixed.
-        patch_args = ["-p1"],
-        patches = ["@envoy//bazel:rules_foreign_cc.patch"],
-    )
+    external_http_archive("rules_foreign_cc")
 
 def _com_github_maxmind_libmaxminddb():
     external_http_archive(
diff --git a/bazel/repositories_extra.bzl b/bazel/repositories_extra.bzl
index 7fd1dc4095..ff6a848832 100644
--- a/bazel/repositories_extra.bzl
+++ b/bazel/repositories_extra.bzl
@@ -15,7 +15,7 @@ PYTHON_MINOR_VERSION = _python_minor_version(PYTHON_VERSION)
 # Envoy deps that rely on a first stage of dependency loading in envoy_dependencies().
 def envoy_dependencies_extra(
         python_version = PYTHON_VERSION,
-        ignore_root_user_error = False):
+        ignore_root_user_error = True):
     emsdk_deps()
     raze_fetch_remote_crates()
     wasmtime_fetch_remote_crates()
diff --git a/bazel/repository_locations.bzl b/bazel/repository_locations.bzl
index 7744b2da72..d9ce9d07f9 100644
--- a/bazel/repository_locations.bzl
+++ b/bazel/repository_locations.bzl
@@ -494,7 +494,7 @@ REPOSITORY_LOCATIONS_SPEC = dict(
         extensions = [
             "envoy.filters.http.lua",
             "envoy.router.cluster_specifier_plugin.lua",
-            "envoy.string_matcher.lua",
+        #    "envoy.string_matcher.lua",
         ],
         cpe = "cpe:2.3:a:luajit:luajit:*",
         license = "MIT",
@@ -1024,11 +1024,11 @@ REPOSITORY_LOCATIONS_SPEC = dict(
         project_name = "Rules for using foreign build systems in Bazel",
         project_desc = "Rules for using foreign build systems in Bazel",
         project_url = "https://github.com/bazelbuild/rules_foreign_cc",
-        version = "0.10.1",
-        sha256 = "476303bd0f1b04cc311fc258f1708a5f6ef82d3091e53fd1977fa20383425a6a",
+        version = "0.9.0",
+        sha256 = "2a4d07cd64b0719b39a7c12218a3e507672b82a97b98c6a89d38565894cf7c51",
         strip_prefix = "rules_foreign_cc-{version}",
         urls = ["https://github.com/bazelbuild/rules_foreign_cc/archive/{version}.tar.gz"],
-        release_date = "2023-10-25",
+        release_date = "2022-08-02",
         use_category = ["build", "dataplane_core", "controlplane"],
         license = "Apache-2.0",
         license_url = "https://github.com/bazelbuild/rules_foreign_cc/blob/{version}/LICENSE",
diff --git a/bazel/rules_go.patch b/bazel/rules_go.patch
index b0b707b88e..78232e112f 100644
--- a/bazel/rules_go.patch
+++ b/bazel/rules_go.patch
@@ -1,22 +1,28 @@
-#
-# Bazel RBE on Windows GCP workers currently will not invoke cmd.exe batch files correctly
-#
-# Symptom is program not found 'bazel-out', because of the way that the CreateProcess command
-# is constructed by bazel with actions.run with forward slashes, e.g. the command
-#   cmd.exe /c "bazel-out/host/bin/external/go_sdk/builder.exe.bat"
-# where cmd.exe on GCP is treating 'bazel-out' as the target, and /host as a command line switch.
-# This problem was not observed on Azure CI pipelines or locally by the developers. The eventual
-# fix is not specific to rules_go; this patch simply addresses immediate breakage and can be removed
-# once the underlying issue within Bazel/RBE is fixed.
-# See:
-# - https://github.com/bazelbuild/rules_go/pull/2542
-# - https://github.com/envoyproxy/envoy/issues/11657
-#
+diff --git a/go/private/platforms.bzl b/go/private/platforms.bzl
+index 664f7aed..e7938e00 100644
+--- a/go/private/platforms.bzl
++++ b/go/private/platforms.bzl
+@@ -30,7 +30,6 @@ BAZEL_GOARCH_CONSTRAINTS = {
+     "amd64": "@platforms//cpu:x86_64",
+     "arm": "@platforms//cpu:armv7",
+     "arm64": "@platforms//cpu:aarch64",
+-    "ppc64": "@platforms//cpu:ppc",
+     "ppc64le": "@platforms//cpu:ppc",
+     "s390x": "@platforms//cpu:s390x",
+ }
+@@ -62,7 +61,6 @@ GOOS_GOARCH = (
+     ("linux", "mips64"),
+     ("linux", "mips64le"),
+     ("linux", "mipsle"),
+-    ("linux", "ppc64"),
+     ("linux", "ppc64le"),
+     ("linux", "riscv64"),
+     ("linux", "s390x"),
 diff --git a/go/private/rules/binary.bzl b/go/private/rules/binary.bzl
-index 91748eda..c1aeb91e 100644
+index 96db3ce1..f826a042 100644
 --- a/go/private/rules/binary.bzl
 +++ b/go/private/rules/binary.bzl
-@@ -443,8 +443,9 @@ def _go_tool_binary_impl(ctx):
+@@ -452,8 +452,9 @@ def _go_tool_binary_impl(ctx):
              content = cmd,
          )
          ctx.actions.run(
diff --git a/envoy/common/optref.h b/envoy/common/optref.h
index 63ff2bff15..cf2a6c4ed8 100644
--- a/envoy/common/optref.h
+++ b/envoy/common/optref.h
@@ -112,7 +112,7 @@ template <class T> struct OptRef {
    *
    * @return a reference_wrapper around the value.
    */
-  std::reference_wrapper<const T> value() const { return std::reference_wrapper<T>(*ptr_); }
+  std::reference_wrapper<const T> value() const { return std::reference_wrapper<const T>(*ptr_); }
   std::reference_wrapper<T> value() { return std::reference_wrapper<T>(*ptr_); }
 
   /**
diff --git a/source/extensions/extensions_build_config.bzl b/source/extensions/extensions_build_config.bzl
index cbaaab72ee..c83396a1b2 100644
--- a/source/extensions/extensions_build_config.bzl
+++ b/source/extensions/extensions_build_config.bzl
@@ -118,7 +118,7 @@ EXTENSIONS = {
     #
     # StringMatchers
     #
-    "envoy.string_matcher.lua":                         "//source/extensions/string_matcher/lua:config",
+    #"envoy.string_matcher.lua":                         "//source/extensions/string_matcher/lua:config",
 
     #
     # HTTP filters
diff --git a/source/extensions/filters/common/lua/BUILD b/source/extensions/filters/common/lua/BUILD
index 12d7d0554a..b87564739b 100644
--- a/source/extensions/filters/common/lua/BUILD
+++ b/source/extensions/filters/common/lua/BUILD
@@ -15,6 +15,10 @@ envoy_cc_library(
     external_deps = [
         "luajit",
     ],
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         "//envoy/thread_local:thread_local_interface",
         "//source/common/common:assert_lib",
@@ -29,6 +33,10 @@ envoy_cc_library(
     name = "wrappers_lib",
     srcs = ["wrappers.cc"],
     hdrs = ["wrappers.h"],
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         ":lua_lib",
         "//envoy/buffer:buffer_interface",
diff --git a/source/extensions/filters/http/lua/BUILD b/source/extensions/filters/http/lua/BUILD
index 37918273e5..4ae6278509 100644
--- a/source/extensions/filters/http/lua/BUILD
+++ b/source/extensions/filters/http/lua/BUILD
@@ -16,6 +16,10 @@ envoy_cc_library(
     name = "lua_filter_lib",
     srcs = ["lua_filter.cc"],
     hdrs = ["lua_filter.h"],
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         ":wrappers_lib",
         "//envoy/http:codes_interface",
@@ -38,6 +42,10 @@ envoy_cc_library(
     name = "wrappers_lib",
     srcs = ["wrappers.cc"],
     hdrs = ["wrappers.h"],
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         "//envoy/http:header_map_interface",
         "//envoy/stream_info:stream_info_interface",
@@ -54,6 +62,10 @@ envoy_cc_extension(
     name = "config",
     srcs = ["config.cc"],
     hdrs = ["config.h"],
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         "//envoy/registry",
         "//source/extensions/filters/http/common:factory_base_lib",
diff --git a/source/extensions/router/cluster_specifiers/lua/BUILD b/source/extensions/router/cluster_specifiers/lua/BUILD
index 1f7801325c..e717072082 100644
--- a/source/extensions/router/cluster_specifiers/lua/BUILD
+++ b/source/extensions/router/cluster_specifiers/lua/BUILD
@@ -19,6 +19,10 @@ envoy_cc_library(
     hdrs = [
         "lua_cluster_specifier.h",
     ],
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         "//envoy/router:cluster_specifier_plugin_interface",
         "//source/common/common:utility_lib",
@@ -35,6 +39,10 @@ envoy_cc_extension(
     name = "config",
     srcs = ["config.cc"],
     hdrs = ["config.h"],
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         ":lua_cluster_specifier_lib",
         "//envoy/registry",
diff --git a/source/extensions/string_matcher/lua/BUILD b/source/extensions/string_matcher/lua/BUILD
index 550c67b8b1..3235f91704 100644
--- a/source/extensions/string_matcher/lua/BUILD
+++ b/source/extensions/string_matcher/lua/BUILD
@@ -12,10 +12,14 @@ envoy_cc_extension(
     name = "config",
     srcs = ["match.cc"],
     hdrs = ["match.h"],
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         "//source/common/common:matchers_lib",
         "//source/common/config:datasource_lib",
-        "//source/extensions/filters/common/lua:lua_lib",
+#        "//source/extensions/filters/common/lua:lua_lib",
         "@envoy_api//envoy/extensions/string_matcher/lua/v3:pkg_cc_proto",
     ],
 )
diff --git a/test/extensions/filters/common/lua/BUILD b/test/extensions/filters/common/lua/BUILD
index 339e181ff7..1f97d349f9 100644
--- a/test/extensions/filters/common/lua/BUILD
+++ b/test/extensions/filters/common/lua/BUILD
@@ -12,6 +12,10 @@ envoy_package()
 envoy_cc_test(
     name = "lua_test",
     srcs = ["lua_test.cc"],
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         "//source/common/thread_local:thread_local_lib",
         "//source/extensions/filters/common/lua:lua_lib",
@@ -24,6 +28,10 @@ envoy_cc_test(
 envoy_cc_test(
     name = "wrappers_test",
     srcs = ["wrappers_test.cc"],
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         ":lua_wrappers_lib",
         "//source/common/buffer:buffer_lib",
@@ -38,6 +46,10 @@ envoy_cc_test(
 envoy_cc_test_library(
     name = "lua_wrappers_lib",
     hdrs = ["lua_wrappers.h"],
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         "//source/extensions/filters/common/lua:lua_lib",
         "//test/mocks/thread_local:thread_local_mocks",
diff --git a/test/extensions/filters/http/lua/BUILD b/test/extensions/filters/http/lua/BUILD
index a00710c01f..8df1ac58cb 100644
--- a/test/extensions/filters/http/lua/BUILD
+++ b/test/extensions/filters/http/lua/BUILD
@@ -15,6 +15,10 @@ envoy_extension_cc_test(
     name = "lua_filter_test",
     srcs = ["lua_filter_test.cc"],
     extension_names = ["envoy.filters.http.lua"],
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         "//source/common/stream_info:stream_info_lib",
         "//source/extensions/filters/http/lua:lua_filter_lib",
@@ -36,6 +40,10 @@ envoy_extension_cc_test(
     name = "wrappers_test",
     srcs = ["wrappers_test.cc"],
     extension_names = ["envoy.filters.http.lua"],
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         "//source/common/network:address_lib",
         "//source/common/stream_info:stream_info_lib",
@@ -52,6 +60,10 @@ envoy_extension_cc_test(
     size = "large",
     srcs = ["lua_integration_test.cc"],
     extension_names = ["envoy.filters.http.lua"],
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         "//source/extensions/filters/http/lua:config",
         "//test/config:v2_link_hacks",
@@ -66,6 +78,10 @@ envoy_extension_cc_test(
     name = "config_test",
     srcs = ["config_test.cc"],
     extension_names = ["envoy.filters.http.lua"],
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         "//source/extensions/filters/http/lua:config",
         "//test/mocks/server:factory_context_mocks",
diff --git a/test/extensions/router/cluster_specifiers/lua/BUILD b/test/extensions/router/cluster_specifiers/lua/BUILD
index f2e3d0a15d..92ebf09214 100644
--- a/test/extensions/router/cluster_specifiers/lua/BUILD
+++ b/test/extensions/router/cluster_specifiers/lua/BUILD
@@ -15,6 +15,10 @@ envoy_extension_cc_test(
     name = "lua_cluster_specifier_test",
     srcs = ["lua_cluster_specifier_test.cc"],
     extension_names = ["envoy.router.cluster_specifier_plugin.lua"],
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         "//source/extensions/router/cluster_specifiers/lua:lua_cluster_specifier_lib",
         "//test/mocks/router:router_mocks",
@@ -28,6 +32,10 @@ envoy_extension_cc_test(
     name = "config_test",
     srcs = ["config_test.cc"],
     extension_names = ["envoy.router.cluster_specifier_plugin.lua"],
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         "//source/extensions/router/cluster_specifiers/lua:config",
         "//test/mocks/server:factory_context_mocks",
