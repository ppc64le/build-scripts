diff --git a/api/bazel/repository_locations.bzl b/api/bazel/repository_locations.bzl
index a7738a68bc..38b34cc721 100644
--- a/api/bazel/repository_locations.bzl
+++ b/api/bazel/repository_locations.bzl
@@ -179,8 +179,8 @@ REPOSITORY_LOCATIONS_SPEC = dict(
         project_name = "envoy_toolshed",
         project_desc = "Tooling, libraries, runners and checkers for Envoy proxy's CI",
         project_url = "https://github.com/envoyproxy/toolshed",
-        version = "0.1.12",
-        sha256 = "cbd919462d3301ffcd83bcbc3763914201e08ac97d9237cd75219725760321d0",
+        version = "0.1.3",
+        sha256 = "ee6d0b08ae3d9659f5fc34d752578af195147b153f8ca68eb4f8530aceb764d9",
         strip_prefix = "toolshed-bazel-v{version}/bazel",
         urls = ["https://github.com/envoyproxy/toolshed/archive/bazel-v{version}.tar.gz"],
         use_category = ["build"],
diff --git a/bazel/boringssl_ppc64le.patch b/bazel/boringssl_ppc64le.patch
new file mode 100755
index 0000000000..66d0d92d90
--- /dev/null
+++ b/bazel/boringssl_ppc64le.patch
@@ -0,0 +1,14 @@
+diff --git a/include/openssl/target.h b/include/openssl/target.h
+index 2760f52ce..4290dcd58 100644
+--- a/include/openssl/target.h
++++ b/include/openssl/target.h
+@@ -54,6 +54,9 @@
+ #define OPENSSL_32_BIT
+ #elif defined(__myriad2__)
+ #define OPENSSL_32_BIT
++#elif defined(_ARCH_PPC64)
++#define OPENSSL_64_BIT
++#define OPENSSL_PPC64
+ #else
+ // The list above enumerates the platforms that BoringSSL supports. For these
+ // platforms we keep a reasonable bar of not breaking them: automated test
diff --git a/bazel/dependency_imports.bzl b/bazel/dependency_imports.bzl
index c68eb4bf3e..02a1909c1c 100644
--- a/bazel/dependency_imports.bzl
+++ b/bazel/dependency_imports.bzl
@@ -37,6 +37,11 @@ def envoy_dependency_imports(go_version = GO_VERSION, jq_version = JQ_VERSION, y
     pip_dev_dependencies()
     pip_fuzzing_dependencies()
     rules_pkg_dependencies()
+    rust_repository_set(
+        name = "rust_linux_powerpc64le",
+        exec_triple = "powerpc64le-unknown-linux-gnu",
+        versions = [rust_common.default_version],
+    )
     rust_repository_set(
         name = "rust_linux_s390x",
         exec_triple = "s390x-unknown-linux-gnu",
diff --git a/bazel/envoy_library.bzl b/bazel/envoy_library.bzl
index fdd4c6f1c6..d052ccc813 100644
--- a/bazel/envoy_library.bzl
+++ b/bazel/envoy_library.bzl
@@ -58,6 +58,7 @@ def envoy_cc_extension(
         name,
         tags = [],
         extra_visibility = [],
+        target_compatible_with = [],
         visibility = EXTENSION_CONFIG_VISIBILITY,
         alwayslink = 1,
         **kwargs):
@@ -68,6 +69,7 @@ def envoy_cc_extension(
     envoy_cc_library(
         name = name,
         tags = tags,
+        target_compatible_with = target_compatible_with,
         visibility = visibility,
         alwayslink = alwayslink,
         **kwargs
@@ -79,6 +81,7 @@ def envoy_cc_extension(
             ":is_enabled": [":" + name],
             "//conditions:default": [],
         }),
+        target_compatible_with = target_compatible_with,
         visibility = visibility,
     )
 
@@ -86,6 +89,7 @@ def envoy_cc_contrib_extension(
         name,
         tags = [],
         extra_visibility = [],
+        target_compatible_with = [],
         visibility = CONTRIB_EXTENSION_PACKAGE_VISIBILITY,
         alwayslink = 1,
         **kwargs):
@@ -97,6 +101,7 @@ def envoy_cc_library(
         srcs = [],
         hdrs = [],
         copts = [],
+        target_compatible_with = [],
         visibility = None,
         rbe_pool = None,
         exec_properties = {},
@@ -139,6 +144,7 @@ def envoy_cc_library(
         deps = deps + [envoy_external_dep_path(dep) for dep in external_deps] +
                envoy_pch_deps(repository, "//source/common/common:common_pch"),
         exec_properties = exec_properties,
+        target_compatible_with = target_compatible_with,
         alwayslink = alwayslink,
         linkstatic = envoy_linkstatic(),
         strip_include_prefix = strip_include_prefix,
@@ -156,6 +162,7 @@ def envoy_cc_library(
         visibility = visibility,
         tags = ["nocompdb"] + tags,
         deps = [":" + name],
+        target_compatible_with = target_compatible_with,
         strip_include_prefix = strip_include_prefix,
         include_prefix = include_prefix,
     )
diff --git a/bazel/envoy_test.bzl b/bazel/envoy_test.bzl
index ec68fec9cc..509e28bbbe 100644
--- a/bazel/envoy_test.bzl
+++ b/bazel/envoy_test.bzl
@@ -159,6 +159,7 @@ def envoy_cc_test(
         # List of pairs (Bazel shell script target, shell script args)
         repository = "",
         external_deps = [],
+        target_compatible_with = [],
         deps = [],
         tags = [],
         args = [],
@@ -194,6 +195,7 @@ def envoy_cc_test(
         ] + envoy_pch_deps(repository, "//test:test_pch"),
         # from https://github.com/google/googletest/blob/6e1970e2376c14bf658eb88f655a054030353f9f/googlemock/src/gmock.cc#L51
         # 2 - by default, mocks act as StrictMocks.
+        target_compatible_with = target_compatible_with,
         args = args + ["--gmock_default_mock_behavior=2"],
         tags = coverage_tags,
         local = local,
diff --git a/bazel/python_dependencies.bzl b/bazel/python_dependencies.bzl
index 9f2b336b1a..b015e851c0 100644
--- a/bazel/python_dependencies.bzl
+++ b/bazel/python_dependencies.bzl
@@ -1,6 +1,6 @@
 load("@com_google_protobuf//bazel:system_python.bzl", "system_python")
 load("@envoy_toolshed//:packages.bzl", "load_packages")
-load("@python3_12//:defs.bzl", "interpreter")
+load("@python3_11//:defs.bzl", "interpreter")
 load("@rules_python//python:pip.bzl", "pip_parse")
 
 def envoy_python_dependencies():
diff --git a/bazel/repositories.bzl b/bazel/repositories.bzl
index 5cb573770f..852a0d1828 100644
--- a/bazel/repositories.bzl
+++ b/bazel/repositories.bzl
@@ -4,7 +4,11 @@ load("@envoy_api//bazel:external_deps.bzl", "load_repository_locations")
 load(":dev_binding.bzl", "envoy_dev_binding")
 load(":repository_locations.bzl", "PROTOC_VERSIONS", "REPOSITORY_LOCATIONS_SPEC")
 
-PPC_SKIP_TARGETS = ["envoy.string_matcher.lua", "envoy.filters.http.lua", "envoy.router.cluster_specifier_plugin.lua"]
+PPC_SKIP_TARGETS = [
+    "envoy.string_matcher.lua", 
+    "envoy.filters.http.lua", 
+    "envoy.router.cluster_specifier_plugin.lua", 
+]
 
 WINDOWS_SKIP_TARGETS = [
     "envoy.extensions.http.cache.file_system_http_cache",
@@ -107,7 +111,12 @@ def _go_deps(skip_targets):
     # Keep the skip_targets check around until Istio Proxy has stopped using
     # it to exclude the Go rules.
     if "io_bazel_rules_go" not in skip_targets:
-        external_http_archive(name = "io_bazel_rules_go")
+        external_http_archive(
+            name = "io_bazel_rules_go",
+            # TODO(wrowe, sunjayBhatia): remove when Windows RBE supports batch file invocation
+            patch_args = ["-p1"],
+            patches = ["@envoy//bazel:rules_go.patch"],
+        )
         external_http_archive("bazel_gazelle")
 
 def _rust_deps():
@@ -264,6 +273,7 @@ def _boringssl():
         patch_args = ["-p1"],
         patches = [
             "@envoy//bazel:boringssl_static.patch",
+            "@envoy//bazel:boringssl_ppc64le.patch",
         ],
     )
 
diff --git a/bazel/repositories_extra.bzl b/bazel/repositories_extra.bzl
index b92dd461ba..d7bf2f1c33 100644
--- a/bazel/repositories_extra.bzl
+++ b/bazel/repositories_extra.bzl
@@ -9,13 +9,13 @@ def _python_minor_version(python_version):
     return "_".join(python_version.split(".")[:-1])
 
 # Python version for `rules_python`
-PYTHON_VERSION = "3.12.3"
+PYTHON_VERSION = "3.11.9"
 PYTHON_MINOR_VERSION = _python_minor_version(PYTHON_VERSION)
 
 # Envoy deps that rely on a first stage of dependency loading in envoy_dependencies().
 def envoy_dependencies_extra(
         python_version = PYTHON_VERSION,
-        ignore_root_user_error = False):
+        ignore_root_user_error = True):
     bazel_features_deps()
     emsdk_deps()
     raze_fetch_remote_crates()
diff --git a/bazel/repository_locations.bzl b/bazel/repository_locations.bzl
index 85a125d44e..0adcd5ad4e 100644
--- a/bazel/repository_locations.bzl
+++ b/bazel/repository_locations.bzl
@@ -531,7 +531,7 @@ REPOSITORY_LOCATIONS_SPEC = dict(
         extensions = [
             "envoy.filters.http.lua",
             "envoy.router.cluster_specifier_plugin.lua",
-            "envoy.string_matcher.lua",
+            #"envoy.string_matcher.lua",
         ],
         cpe = "cpe:2.3:a:luajit:luajit:*",
         license = "MIT",
@@ -1040,11 +1040,11 @@ REPOSITORY_LOCATIONS_SPEC = dict(
         project_name = "Go rules for Bazel",
         project_desc = "Bazel rules for the Go language",
         project_url = "https://github.com/bazelbuild/rules_go",
-        version = "0.49.0",
-        sha256 = "d93ef02f1e72c82d8bb3d5169519b36167b33cf68c252525e3b9d3d5dd143de7",
+        version = "0.46.0",
+        sha256 = "80a98277ad1311dacd837f9b16db62887702e9f1d1c4c9f796d0121a46c8e184",
         urls = ["https://github.com/bazelbuild/rules_go/releases/download/v{version}/rules_go-v{version}.zip"],
         use_category = ["build", "api"],
-        release_date = "2024-07-13",
+        release_date = "2024-02-10",
         implied_untracked_deps = [
             "com_github_golang_protobuf",
             "io_bazel_rules_nogo",
@@ -1058,12 +1058,11 @@ REPOSITORY_LOCATIONS_SPEC = dict(
         project_name = "Rules for using foreign build systems in Bazel",
         project_desc = "Rules for using foreign build systems in Bazel",
         project_url = "https://github.com/bazelbuild/rules_foreign_cc",
-        version = "0.12.0",
-        sha256 = "a2e6fb56e649c1ee79703e99aa0c9d13c6cc53c8d7a0cbb8797ab2888bbc99a3",
+        version = "0.9.0",
+        sha256 = "2a4d07cd64b0719b39a7c12218a3e507672b82a97b98c6a89d38565894cf7c51",
         strip_prefix = "rules_foreign_cc-{version}",
         urls = ["https://github.com/bazelbuild/rules_foreign_cc/archive/{version}.tar.gz"],
-        release_date = "2024-08-14",
-        use_category = ["build", "dataplane_core", "controlplane"],
+        release_date = "2022-08-02",        use_category = ["build", "dataplane_core", "controlplane"],
         license = "Apache-2.0",
         license_url = "https://github.com/bazelbuild/rules_foreign_cc/blob/{version}/LICENSE",
     ),
diff --git a/bazel/rules_go.patch b/bazel/rules_go.patch
new file mode 100644
index 0000000000..78232e112f
--- /dev/null
+++ b/bazel/rules_go.patch
@@ -0,0 +1,36 @@
+diff --git a/go/private/platforms.bzl b/go/private/platforms.bzl
+index 664f7aed..e7938e00 100644
+--- a/go/private/platforms.bzl
++++ b/go/private/platforms.bzl
+@@ -30,7 +30,6 @@ BAZEL_GOARCH_CONSTRAINTS = {
+     "amd64": "@platforms//cpu:x86_64",
+     "arm": "@platforms//cpu:armv7",
+     "arm64": "@platforms//cpu:aarch64",
+-    "ppc64": "@platforms//cpu:ppc",
+     "ppc64le": "@platforms//cpu:ppc",
+     "s390x": "@platforms//cpu:s390x",
+ }
+@@ -62,7 +61,6 @@ GOOS_GOARCH = (
+     ("linux", "mips64"),
+     ("linux", "mips64le"),
+     ("linux", "mipsle"),
+-    ("linux", "ppc64"),
+     ("linux", "ppc64le"),
+     ("linux", "riscv64"),
+     ("linux", "s390x"),
+diff --git a/go/private/rules/binary.bzl b/go/private/rules/binary.bzl
+index 96db3ce1..f826a042 100644
+--- a/go/private/rules/binary.bzl
++++ b/go/private/rules/binary.bzl
+@@ -452,8 +452,9 @@ def _go_tool_binary_impl(ctx):
+             content = cmd,
+         )
+         ctx.actions.run(
+-            executable = bat,
+-            inputs = sdk.headers + sdk.tools + sdk.srcs + ctx.files.srcs + [sdk.go],
++            executable = "cmd.exe",
++            arguments = ["/S", "/C", bat.path.replace("/", "\\")],
++            inputs = sdk.headers + sdk.tools + sdk.srcs + ctx.files.srcs + [sdk.go, bat],
+             outputs = [out, gopath, gocache],
+             mnemonic = "GoToolchainBinaryBuild",
+         )
diff --git a/bazel/rules_rust.patch b/bazel/rules_rust.patch
index 04fc47181b..4fb4cf157e 100644
--- a/bazel/rules_rust.patch
+++ b/bazel/rules_rust.patch
@@ -1,17 +1,84 @@
---- rust/private/rustc.bzl
-+++ rust/private/rustc.bzl
-@@ -1451,7 +1451,7 @@ def rustc_compile_action(
-         })
-         crate_info = rust_common.create_crate_info(**crate_info_dict)
+diff --git cargo/private/cargo_build_script.bzl cargo/private/cargo_build_script.bzl
+index f1e16546..c657fd31 100644
+--- cargo/private/cargo_build_script.bzl
++++ cargo/private/cargo_build_script.bzl
+@@ -297,7 +297,7 @@ def _cargo_build_script_impl(ctx):
+         "NUM_JOBS": "1",
+         "OPT_LEVEL": compilation_mode_opt_level,
+         "RUSTC": toolchain.rustc.path,
+-        "TARGET": toolchain.target_flag_value,
++        "TARGET": toolchain.target_flag_value.replace("ppc64le", "powerpc64le"),
+         # OUT_DIR is set by the runner itself, rather than on the action.
+     })
  
--    if crate_info.type in ["staticlib", "cdylib"]:
-+    if crate_info.type in ["staticlib", "cdylib"] and not out_binary:
-         # These rules are not supposed to be depended on by other rust targets, and
-         # as such they shouldn't provide a CrateInfo. However, one may still want to
-         # write a rust_test for them, so we provide the CrateInfo wrapped in a provider
-
+diff --git rust/platform/triple.bzl rust/platform/triple.bzl
+index 673240e8..5479c32e 100644
+--- rust/platform/triple.bzl
++++ rust/platform/triple.bzl
+@@ -114,7 +114,7 @@ def get_host_triple(repository_ctx, abi = None):
+     # Detect the host's cpu architecture
+ 
+     supported_architectures = {
+-        "linux": ["aarch64", "x86_64", "s390x"],
++        "linux": ["aarch64", "x86_64", "s390x", "ppc64le"],
+         "macos": ["aarch64", "x86_64"],
+         "windows": ["aarch64", "x86_64"],
+     }
+diff --git rust/platform/triple_mappings.bzl rust/platform/triple_mappings.bzl
+index 3ab6f6dd..36143938 100644
+--- rust/platform/triple_mappings.bzl
++++ rust/platform/triple_mappings.bzl
+@@ -71,8 +71,9 @@ _CPU_ARCH_TO_BUILTIN_PLAT_SUFFIX = {
+     "mips": None,
+     "mipsel": None,
+     "powerpc": "ppc",
++    "ppc64le": "ppc",
+     "powerpc64": None,
+-    "powerpc64le": None,
++    "powerpc64le": "ppc",
+     "riscv32": "riscv32",
+     "riscv32imc": "riscv32",
+     "riscv64": "riscv64",
+diff --git rust/private/repository_utils.bzl rust/private/repository_utils.bzl
+index 79cf2e93..09ed992b 100644
+--- rust/private/repository_utils.bzl
++++ rust/private/repository_utils.bzl
+@@ -803,12 +803,16 @@ def load_arbitrary_tool(
+     for subdirectory in tool_subdirectories:
+         # As long as the sha256 value is consistent accross calls here the
+         # cost of downloading an artifact is negated as by Bazel's caching.
+-        result = ctx.download_and_extract(
+-            urls,
+-            sha256 = sha256,
+-            auth = _make_auth_dict(ctx, urls),
+-            stripPrefix = "{}/{}".format(tool_path, subdirectory),
+-        )
++        tool_path = tool_path.replace("ppc64le", "powerpc64le")
++        subdirectory = subdirectory.replace("ppc64le", "powerpc64le")
++        for url in urls:
++            url = url.replace("ppc64le", "powerpc64le")
++            result = ctx.download_and_extract(
++                url,
++                sha256 = sha256,
++                auth = _make_auth_dict(ctx, urls),
++                stripPrefix = "{}/{}".format(tool_path, subdirectory),
++            )
+ 
+         # In the event no sha256 was provided, set it to the value of the first
+         # downloaded item so subsequent downloads use a cached artifact.
+diff --git rust/private/rustc.bzl rust/private/rustc.bzl
+index c82c236b..1ea682d3 100644
 --- rust/private/rustc.bzl
 +++ rust/private/rustc.bzl
+@@ -985,7 +985,7 @@ def construct_arguments(
+     if error_format != "json":
+         # Color is not compatible with json output.
+         rustc_flags.add("--color=always")
+-    rustc_flags.add(toolchain.target_flag_value, format = "--target=%s")
++    rustc_flags.add(toolchain.target_flag_value.replace("ppc64le", "powerpc64le"), format = "--target=%s")
+     if hasattr(attr, "crate_features"):
+         rustc_flags.add_all(getattr(attr, "crate_features"), before_each = "--cfg", format_each = 'feature="%s"')
+     if linker_script:
 @@ -1043,7 +1043,7 @@ def construct_arguments(
  
      if toolchain.llvm_cov and ctx.configuration.coverage_enabled:
@@ -21,3 +88,25 @@
  
      if toolchain._experimental_link_std_dylib:
          rustc_flags.add("--codegen=prefer-dynamic")
+@@ -1516,7 +1516,7 @@ def rustc_compile_action(
+         })
+         crate_info = rust_common.create_crate_info(**crate_info_dict)
+ 
+-    if crate_info.type in ["staticlib", "cdylib"]:
++    if crate_info.type in ["staticlib", "cdylib"] and not out_binary:
+         # These rules are not supposed to be depended on by other rust targets, and
+         # as such they shouldn't provide a CrateInfo. However, one may still want to
+         # write a rust_test for them, so we provide the CrateInfo wrapped in a provider
+diff --git rust/repositories.bzl rust/repositories.bzl
+index 44a82938..28274f93 100644
+--- rust/repositories.bzl
++++ rust/repositories.bzl
+@@ -44,6 +44,8 @@ DEFAULT_TOOLCHAIN_TRIPLES = {
+     "x86_64-pc-windows-msvc": "rust_windows_x86_64",
+     "x86_64-unknown-freebsd": "rust_freebsd_x86_64",
+     "x86_64-unknown-linux-gnu": "rust_linux_x86_64",
++    "ppc64le-unknown-linux-gnu": "rust_linux_ppc64le",
++    "powerpc64le-unknown-linux-gnu": "rust_linux_powerpc64le",
+ }
+ 
+ def rules_rust_dependencies():
diff --git a/envoy/common/optref.h b/envoy/common/optref.h
index 63ff2bff15..cf2a6c4ed8 100644
--- a/envoy/common/optref.h
+++ b/envoy/common/optref.h
@@ -112,7 +112,7 @@ template <class T> struct OptRef {
    *
    * @return a reference_wrapper around the value.
    */
-  std::reference_wrapper<const T> value() const { return std::reference_wrapper<T>(*ptr_); }
+  std::reference_wrapper<const T> value() const { return std::reference_wrapper<const T>(*ptr_); }
   std::reference_wrapper<T> value() { return std::reference_wrapper<T>(*ptr_); }
 
   /**
diff --git a/source/extensions/common/async_files/async_file_context_thread_pool.cc b/source/extensions/common/async_files/async_file_context_thread_pool.cc
index 5391559ff9..c4fa476486 100644
--- a/source/extensions/common/async_files/async_file_context_thread_pool.cc
+++ b/source/extensions/common/async_files/async_file_context_thread_pool.cc
@@ -27,6 +27,8 @@ public:
 
 protected:
   int& fileDescriptor() { return context()->fileDescriptor(); }
+  bool isAnonymus() { return context()->isAnonymus(); }
+  std::string& anonymusFile() { return context()->anonymusFile(); }
   AsyncFileContextThreadPool* context() const {
     return static_cast<AsyncFileContextThreadPool*>(handle_.get());
   }
@@ -92,13 +94,19 @@ public:
   explicit ActionCloseFile(AsyncFileHandle handle,
                            absl::AnyInvocable<void(absl::Status)> on_complete)
       : AsyncFileActionThreadPool<absl::Status>(handle, std::move(on_complete)),
-        file_descriptor_(fileDescriptor()) {}
+        file_descriptor_(fileDescriptor()), is_anonymus_(isAnonymus()), anonymus_file_(anonymusFile()) {}
 
   absl::Status executeImpl() override {
     auto result = posix().close(file_descriptor_);
     if (result.return_value_ == -1) {
       return statusAfterFileError(result);
     }
+    if(is_anonymus_) {
+      result = posix().unlink(anonymus_file_.c_str());
+      if (result.return_value_ == -1) {
+        return statusAfterFileError(result);
+      }
+    }
     return absl::OkStatus();
   }
 
@@ -106,6 +114,9 @@ public:
 
 private:
   const int file_descriptor_;
+  const bool is_anonymus_;
+  const std::string anonymus_file_;
+
 };
 
 class ActionReadFile : public AsyncFileActionThreadPool<absl::StatusOr<Buffer::InstancePtr>> {
@@ -185,7 +196,7 @@ public:
     if (newfd.return_value_ == -1) {
       return statusAfterFileError(newfd);
     }
-    return std::make_shared<AsyncFileContextThreadPool>(context()->manager(), newfd.return_value_);
+    return std::make_shared<AsyncFileContextThreadPool>(context()->manager(), newfd.return_value_, false, "");
   }
 
   void onCancelledBeforeCallback() override {
@@ -253,11 +264,10 @@ AsyncFileContextThreadPool::checkFileAndEnqueue(Event::Dispatcher* dispatcher,
   return enqueue(dispatcher, std::move(action));
 }
 
-AsyncFileContextThreadPool::AsyncFileContextThreadPool(AsyncFileManager& manager, int fd)
-    : AsyncFileContextBase(manager), file_descriptor_(fd) {}
+AsyncFileContextThreadPool::AsyncFileContextThreadPool(AsyncFileManager& manager, int fd, bool is_anonymus, const char *anonymus_file = "")
+    : AsyncFileContextBase(manager), file_descriptor_(fd), is_anonymus_(is_anonymus), anonymus_file_(anonymus_file) {}
 
 AsyncFileContextThreadPool::~AsyncFileContextThreadPool() { ASSERT(file_descriptor_ == -1); }
-
 } // namespace AsyncFiles
 } // namespace Common
 } // namespace Extensions
diff --git a/source/extensions/common/async_files/async_file_context_thread_pool.h b/source/extensions/common/async_files/async_file_context_thread_pool.h
index 6f344375fc..04cc2f634e 100644
--- a/source/extensions/common/async_files/async_file_context_thread_pool.h
+++ b/source/extensions/common/async_files/async_file_context_thread_pool.h
@@ -19,7 +19,7 @@ class AsyncFileManager;
 // old-school synchronous posix file operations.
 class AsyncFileContextThreadPool final : public AsyncFileContextBase {
 public:
-  explicit AsyncFileContextThreadPool(AsyncFileManager& manager, int fd);
+  explicit AsyncFileContextThreadPool(AsyncFileManager& manager, int fd, bool is_anonymus, const char *anonymus_file);
 
   // CancelFunction should not be called during or after the callback.
   // CancelFunction should only be called from the same thread that created
@@ -44,6 +44,8 @@ public:
             absl::AnyInvocable<void(absl::StatusOr<AsyncFileHandle>)> on_complete) override;
 
   int& fileDescriptor() { return file_descriptor_; }
+  bool isAnonymus() { return is_anonymus_; }
+  std::string& anonymusFile() { return anonymus_file_; }
 
   ~AsyncFileContextThreadPool() override;
 
@@ -52,6 +54,8 @@ protected:
                                                      std::unique_ptr<AsyncFileAction> action);
 
   int file_descriptor_;
+  bool is_anonymus_;
+  std::string anonymus_file_;
 };
 
 } // namespace AsyncFiles
diff --git a/source/extensions/common/async_files/async_file_manager_thread_pool.cc b/source/extensions/common/async_files/async_file_manager_thread_pool.cc
index dd6c0a3a86..b8db725604 100644
--- a/source/extensions/common/async_files/async_file_manager_thread_pool.cc
+++ b/source/extensions/common/async_files/async_file_manager_thread_pool.cc
@@ -208,14 +208,14 @@ public:
       if (was_successful_first_call) {
         // This was the thread doing the very first open(O_TMPFILE), and it worked, so no need to do
         // anything else.
-        return std::make_shared<AsyncFileContextThreadPool>(manager_, open_result.return_value_);
+        return std::make_shared<AsyncFileContextThreadPool>(manager_, open_result.return_value_, false, "");
       }
       // This was any other thread, but O_TMPFILE proved it worked, so we can do it again.
       open_result = posix().open(path_.c_str(), O_TMPFILE | O_RDWR, S_IRUSR | S_IWUSR);
       if (open_result.return_value_ == -1) {
         return statusAfterFileError(open_result);
       }
-      return std::make_shared<AsyncFileContextThreadPool>(manager_, open_result.return_value_);
+      return std::make_shared<AsyncFileContextThreadPool>(manager_, open_result.return_value_, false, "");
     }
 #endif // O_TMPFILE
     // If O_TMPFILE didn't work, fall back to creating a named file and unlinking it.
@@ -234,6 +234,7 @@ public:
     if (open_result.return_value_ == -1) {
       return statusAfterFileError(open_result);
     }
+/*
     if (posix().unlink(filename).return_value_ != 0) {
       // Most likely the problem here is we can't unlink a file while it's open - since that's a
       // prerequisite of the desired behavior of this function, and we don't want to accidentally
@@ -245,7 +246,8 @@ public:
           "AsyncFileManagerThreadPool::createAnonymousFile: not supported for "
           "target filesystem (failed to unlink an open file)");
     }
-    return std::make_shared<AsyncFileContextThreadPool>(manager_, open_result.return_value_);
+*/
+    return std::make_shared<AsyncFileContextThreadPool>(manager_, open_result.return_value_, true, filename);
   }
 
 private:
@@ -264,7 +266,7 @@ public:
     if (open_result.return_value_ == -1) {
       return statusAfterFileError(open_result);
     }
-    return std::make_shared<AsyncFileContextThreadPool>(manager_, open_result.return_value_);
+    return std::make_shared<AsyncFileContextThreadPool>(manager_, open_result.return_value_, false, "");
   }
 
 private:
diff --git a/source/extensions/extensions_build_config.bzl b/source/extensions/extensions_build_config.bzl
index 7d3cdbad71..db076041fd 100644
--- a/source/extensions/extensions_build_config.bzl
+++ b/source/extensions/extensions_build_config.bzl
@@ -124,7 +124,7 @@ EXTENSIONS = {
     #
     # StringMatchers
     #
-    "envoy.string_matcher.lua":                         "//source/extensions/string_matcher/lua:config",
+    #"envoy.string_matcher.lua":                         "//source/extensions/string_matcher/lua:config",
 
     #
     # HTTP filters
diff --git a/source/extensions/filters/common/lua/BUILD b/source/extensions/filters/common/lua/BUILD
index 207abbac99..e44687ae45 100644
--- a/source/extensions/filters/common/lua/BUILD
+++ b/source/extensions/filters/common/lua/BUILD
@@ -12,6 +12,10 @@ envoy_cc_library(
     name = "lua_lib",
     srcs = ["lua.cc"],
     hdrs = ["lua.h"],
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         "//bazel/foreign_cc:luajit",
         "//envoy/thread_local:thread_local_interface",
@@ -27,6 +31,10 @@ envoy_cc_library(
     name = "wrappers_lib",
     srcs = ["wrappers.cc"],
     hdrs = ["wrappers.h"],
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         ":lua_lib",
         "//envoy/buffer:buffer_interface",
diff --git a/source/extensions/filters/http/lua/BUILD b/source/extensions/filters/http/lua/BUILD
index 37918273e5..4ae6278509 100644
--- a/source/extensions/filters/http/lua/BUILD
+++ b/source/extensions/filters/http/lua/BUILD
@@ -16,6 +16,10 @@ envoy_cc_library(
     name = "lua_filter_lib",
     srcs = ["lua_filter.cc"],
     hdrs = ["lua_filter.h"],
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         ":wrappers_lib",
         "//envoy/http:codes_interface",
@@ -38,6 +42,10 @@ envoy_cc_library(
     name = "wrappers_lib",
     srcs = ["wrappers.cc"],
     hdrs = ["wrappers.h"],
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         "//envoy/http:header_map_interface",
         "//envoy/stream_info:stream_info_interface",
@@ -54,6 +62,10 @@ envoy_cc_extension(
     name = "config",
     srcs = ["config.cc"],
     hdrs = ["config.h"],
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         "//envoy/registry",
         "//source/extensions/filters/http/common:factory_base_lib",
diff --git a/source/extensions/router/cluster_specifiers/lua/BUILD b/source/extensions/router/cluster_specifiers/lua/BUILD
index 1f7801325c..e717072082 100644
--- a/source/extensions/router/cluster_specifiers/lua/BUILD
+++ b/source/extensions/router/cluster_specifiers/lua/BUILD
@@ -19,6 +19,10 @@ envoy_cc_library(
     hdrs = [
         "lua_cluster_specifier.h",
     ],
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         "//envoy/router:cluster_specifier_plugin_interface",
         "//source/common/common:utility_lib",
@@ -35,6 +39,10 @@ envoy_cc_extension(
     name = "config",
     srcs = ["config.cc"],
     hdrs = ["config.h"],
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         ":lua_cluster_specifier_lib",
         "//envoy/registry",
diff --git a/source/extensions/string_matcher/lua/BUILD b/source/extensions/string_matcher/lua/BUILD
index 550c67b8b1..3235f91704 100644
--- a/source/extensions/string_matcher/lua/BUILD
+++ b/source/extensions/string_matcher/lua/BUILD
@@ -12,10 +12,14 @@ envoy_cc_extension(
     name = "config",
     srcs = ["match.cc"],
     hdrs = ["match.h"],
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         "//source/common/common:matchers_lib",
         "//source/common/config:datasource_lib",
-        "//source/extensions/filters/common/lua:lua_lib",
+#        "//source/extensions/filters/common/lua:lua_lib",
         "@envoy_api//envoy/extensions/string_matcher/lua/v3:pkg_cc_proto",
     ],
 )
diff --git a/test/extensions/filters/common/lua/BUILD b/test/extensions/filters/common/lua/BUILD
index 40f2d6baea..1a57ab5374 100644
--- a/test/extensions/filters/common/lua/BUILD
+++ b/test/extensions/filters/common/lua/BUILD
@@ -13,6 +13,10 @@ envoy_cc_test(
     name = "lua_test",
     srcs = ["lua_test.cc"],
     rbe_pool = "2core",
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         "//source/common/thread_local:thread_local_lib",
         "//source/extensions/filters/common/lua:lua_lib",
@@ -26,6 +30,10 @@ envoy_cc_test(
     name = "wrappers_test",
     srcs = ["wrappers_test.cc"],
     rbe_pool = "2core",
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         ":lua_wrappers_lib",
         "//source/common/buffer:buffer_lib",
@@ -40,6 +48,10 @@ envoy_cc_test(
 envoy_cc_test_library(
     name = "lua_wrappers_lib",
     hdrs = ["lua_wrappers.h"],
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         "//source/extensions/filters/common/lua:lua_lib",
         "//test/mocks/thread_local:thread_local_mocks",
diff --git a/test/extensions/filters/http/lua/BUILD b/test/extensions/filters/http/lua/BUILD
index c29134bdaf..12c6849074 100644
--- a/test/extensions/filters/http/lua/BUILD
+++ b/test/extensions/filters/http/lua/BUILD
@@ -16,6 +16,10 @@ envoy_extension_cc_test(
     srcs = ["lua_filter_test.cc"],
     extension_names = ["envoy.filters.http.lua"],
     rbe_pool = "2core",
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         "//source/common/stream_info:stream_info_lib",
         "//source/extensions/filters/http/lua:lua_filter_lib",
@@ -38,6 +42,10 @@ envoy_extension_cc_test(
     srcs = ["wrappers_test.cc"],
     extension_names = ["envoy.filters.http.lua"],
     rbe_pool = "2core",
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         "//source/common/network:address_lib",
         "//source/common/stream_info:stream_info_lib",
@@ -55,6 +63,10 @@ envoy_extension_cc_test(
     srcs = ["lua_integration_test.cc"],
     extension_names = ["envoy.filters.http.lua"],
     rbe_pool = "2core",
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         "//source/extensions/filters/http/lua:config",
         "//test/config:v2_link_hacks",
@@ -70,6 +82,10 @@ envoy_extension_cc_test(
     srcs = ["config_test.cc"],
     extension_names = ["envoy.filters.http.lua"],
     rbe_pool = "2core",
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         "//source/extensions/filters/http/lua:config",
         "//test/mocks/server:factory_context_mocks",
diff --git a/test/extensions/router/cluster_specifiers/lua/BUILD b/test/extensions/router/cluster_specifiers/lua/BUILD
index 7b5c4aa392..5a3d493779 100644
--- a/test/extensions/router/cluster_specifiers/lua/BUILD
+++ b/test/extensions/router/cluster_specifiers/lua/BUILD
@@ -16,6 +16,10 @@ envoy_extension_cc_test(
     srcs = ["lua_cluster_specifier_test.cc"],
     extension_names = ["envoy.router.cluster_specifier_plugin.lua"],
     rbe_pool = "2core",
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         "//source/extensions/router/cluster_specifiers/lua:lua_cluster_specifier_lib",
         "//test/mocks/router:router_mocks",
@@ -30,6 +34,10 @@ envoy_extension_cc_test(
     srcs = ["config_test.cc"],
     extension_names = ["envoy.router.cluster_specifier_plugin.lua"],
     rbe_pool = "2core",
+    target_compatible_with = select({
+        "@platforms//cpu:ppc": ["@platforms//:incompatible"],
+        "//conditions:default": [],
+    }),
     deps = [
         "//source/extensions/router/cluster_specifiers/lua:config",
         "//test/mocks/server:factory_context_mocks",
