diff --git a/build-tools-internal/src/integTest/resources/org/elasticsearch/gradle/internal/fake_git/remote/settings.gradle b/build-tools-internal/src/integTest/resources/org/elasticsearch/gradle/internal/fake_git/remote/settings.gradle
index 12a802078e8..e26c54de773 100644
--- a/build-tools-internal/src/integTest/resources/org/elasticsearch/gradle/internal/fake_git/remote/settings.gradle
+++ b/build-tools-internal/src/integTest/resources/org/elasticsearch/gradle/internal/fake_git/remote/settings.gradle
@@ -17,4 +17,5 @@ include ":distribution:archives:oss-darwin-tar"
 include ":distribution:archives:darwin-aarch64-tar"
 include ":distribution:archives:oss-darwin-aarch64-tar"
 include ":distribution:archives:linux-aarch64-tar"
+include ":distribution:archives:linux-ppc64le-tar"
 include ":distribution:archives:oss-linux-aarch64-tar"
diff --git a/build-tools-internal/version.properties b/build-tools-internal/version.properties
index 2365fc1d2a5..2dd722248f8 100644
--- a/build-tools-internal/version.properties
+++ b/build-tools-internal/version.properties
@@ -1,8 +1,8 @@
 elasticsearch     = 7.17.14
 lucene            = 8.11.1
 
-bundled_jdk_vendor = openjdk
-bundled_jdk = 21+35@fd2272bbf8e04c3dbaee13770090416c
+bundled_jdk_vendor = adoptium
+bundled_jdk = 17.0.5+8
 
 # optional dependencies
 spatial4j         = 0.7
diff --git a/build-tools/src/main/java/org/elasticsearch/gradle/Architecture.java b/build-tools/src/main/java/org/elasticsearch/gradle/Architecture.java
index b506569c60c..fc2b7f68ce6 100644
--- a/build-tools/src/main/java/org/elasticsearch/gradle/Architecture.java
+++ b/build-tools/src/main/java/org/elasticsearch/gradle/Architecture.java
@@ -11,6 +11,7 @@ package org.elasticsearch.gradle;
 public enum Architecture {
 
     X64("x86_64", "linux/amd64"),
+    PPC64LE("ppc64le", "linux/ppc64le"),
     AARCH64("aarch64", "linux/arm64");
 
     public final String classifier;
@@ -27,6 +28,8 @@ public enum Architecture {
             case "amd64":
             case "x86_64":
                 return X64;
+            case "ppc64le":
+                return PPC64LE;
             case "aarch64":
                 return AARCH64;
             default:
diff --git a/build-tools/src/main/java/org/elasticsearch/gradle/Jdk.java b/build-tools/src/main/java/org/elasticsearch/gradle/Jdk.java
index def38f9514a..1b438e4324a 100644
--- a/build-tools/src/main/java/org/elasticsearch/gradle/Jdk.java
+++ b/build-tools/src/main/java/org/elasticsearch/gradle/Jdk.java
@@ -23,7 +23,7 @@ import java.util.regex.Pattern;
 
 public class Jdk implements Buildable, Iterable<File> {
 
-    private static final List<String> ALLOWED_ARCHITECTURES = List.of("aarch64", "x64");
+    private static final List<String> ALLOWED_ARCHITECTURES = List.of("aarch64", "x64", "ppc64le");
     private static final List<String> ALLOWED_VENDORS = List.of("adoptium", "openjdk", "zulu");
     private static final List<String> ALLOWED_PLATFORMS = List.of("darwin", "linux", "windows", "mac");
     private static final Pattern VERSION_PATTERN = Pattern.compile(
diff --git a/build-tools/src/test/java/org/elasticsearch/gradle/JdkDownloadPluginTests.java b/build-tools/src/test/java/org/elasticsearch/gradle/JdkDownloadPluginTests.java
index 5145945317b..20c68d7cc15 100644
--- a/build-tools/src/test/java/org/elasticsearch/gradle/JdkDownloadPluginTests.java
+++ b/build-tools/src/test/java/org/elasticsearch/gradle/JdkDownloadPluginTests.java
@@ -87,7 +87,7 @@ public class JdkDownloadPluginTests {
             "11.0.2+33",
             "linux",
             "unknown",
-            "unknown architecture [unknown] for jdk [testjdk], must be one of [aarch64, x64]"
+            "unknown architecture [unknown] for jdk [testjdk], must be one of [aarch64, x64, ppc64le]"
         );
     }
 
diff --git a/distribution/archives/build.gradle b/distribution/archives/build.gradle
index 9eb5033bb41..2ac1cf1c04a 100644
--- a/distribution/archives/build.gradle
+++ b/distribution/archives/build.gradle
@@ -97,6 +97,13 @@ distribution_archives {
     }
   }
 
+  darwinPpc64leTar {
+    archiveClassifier = 'darwin-ppc64le'
+    content {
+      archiveFiles(modulesFiles('darwin-ppc64le'), 'tar', 'darwin', 'ppc64le', false, true)
+    }
+  }
+
   noJdkDarwinTar {
     archiveClassifier = 'no-jdk-darwin-x86_64'
     content {
@@ -111,6 +118,13 @@ distribution_archives {
     }
   }
 
+  noJdkDarwinPpc64leTar {
+    archiveClassifier = 'no-jdk-darwin-ppc64le'
+    content {
+      archiveFiles(modulesFiles('darwin-ppc64le'), 'tar', 'darwin', 'ppc64le', false, false)
+    }
+  }
+
   linuxAarch64Tar {
     archiveClassifier = 'linux-aarch64'
     content {
@@ -118,6 +132,13 @@ distribution_archives {
     }
   }
 
+  linuxPpc64leTar {
+    archiveClassifier = 'linux-ppc64le'
+    content {
+      archiveFiles(modulesFiles('linux-ppc64le'), 'tar', 'linux', 'ppc64le', false, true)
+    }
+  }
+
   linuxTar {
     archiveClassifier = 'linux-x86_64'
     content {
diff --git a/distribution/build.gradle b/distribution/build.gradle
index 6424872503c..1cb5c321334 100644
--- a/distribution/build.gradle
+++ b/distribution/build.gradle
@@ -269,7 +269,7 @@ configure(subprojects.findAll { ['archives', 'packages'].contains(it.name) }) {
   // Setup all required JDKs
   project.jdks {
     ['darwin', 'windows', 'linux'].each { platform ->
-      (platform == 'linux' || platform == 'darwin' ? ['x64', 'aarch64'] : ['x64']).each { architecture ->
+      (platform == 'linux' || platform == 'darwin' ? ['x64', 'aarch64', 'ppc64le'] : ['x64']).each { architecture ->
         "bundled_${platform}_${architecture}" {
           it.platform = platform
           it.version = VersionProperties.bundledJdkVersion
@@ -350,7 +350,7 @@ configure(subprojects.findAll { ['archives', 'packages'].contains(it.name) }) {
             it.mode = 0644
           }
         }
-        List excludePlatforms = ['linux-x86_64', 'linux-aarch64', 'windows-x86_64', 'darwin-x86_64', 'darwin-aarch64']
+        List excludePlatforms = ['linux-x86_64', 'linux-aarch64', 'windows-x86_64', 'darwin-x86_64', 'darwin-aarch64', 'linux-ppc64le']
         if (platform != null) {
           excludePlatforms.remove(excludePlatforms.indexOf(platform))
         } else {
diff --git a/distribution/docker/build.gradle b/distribution/docker/build.gradle
index 3ed0b8da567..f25ac8c54af 100644
--- a/distribution/docker/build.gradle
+++ b/distribution/docker/build.gradle
@@ -44,15 +44,17 @@ configurations {
   dockerSource
   log4jConfig
   tini
+  ppc64leDockerSource
 }
 
-String tiniArch = Architecture.current() == Architecture.AARCH64 ? 'arm64' : 'amd64'
+String tiniArch = Architecture.current() == Architecture.AARCH64 ? 'arm64' : (Architecture.current() == Architecture.PPC64LE ? 'ppc64le' : 'amd64')
 
 dependencies {
   aarch64DockerSource project(path: ":distribution:archives:linux-aarch64-tar", configuration: 'default')
   dockerSource project(path: ":distribution:archives:linux-tar", configuration: 'default')
   log4jConfig project(path: ":distribution", configuration: 'log4jConfig')
   tini "krallin:tini:0.19.0:${tiniArch}"
+  ppc64leDockerSource project(path: ":distribution:archives:linux-ppc64le-tar", configuration: 'default')
 }
 
 ext.expansions = { Architecture architecture, DockerBase base ->
@@ -96,7 +98,7 @@ private static String toCamel(String input) {
 
 private static String taskName(String prefix, Architecture architecture, DockerBase base, String suffix) {
   return prefix +
-    (architecture == Architecture.AARCH64 ? 'Aarch64' : '') +
+    (architecture == Architecture.AARCH64 ? 'Aarch64' : (architecture == Architecture.PPC64LE ? 'Ppc64le' : '')) +
     (base == DockerBase.DEFAULT ? "" : toCamel(base.name())) +
     suffix
 }
@@ -158,7 +160,7 @@ tasks.register("copyNodeKeyMaterial", Sync) {
 
 elasticsearch_distributions {
   Architecture.values().each { eachArchitecture ->
-    "docker_${eachArchitecture == Architecture.AARCH64 ? '_aarch64' : ''}" {
+    "docker_${eachArchitecture == Architecture.AARCH64 ? '_aarch64' : (architecture == Architecture.PPC64LE ? 'ppc64le-' : '') }" {
       architecture = eachArchitecture
       type = InternalElasticsearchDistributionTypes.DOCKER
       version = VersionProperties.getElasticsearch()
@@ -214,7 +216,7 @@ tasks.named("composeUp").configure {
 
 void addBuildDockerContextTask(Architecture architecture, DockerBase base) {
   String configDirectory = base == DockerBase.IRON_BANK ? 'scripts' : 'config'
-  String arch = architecture == Architecture.AARCH64 ? '-aarch64' : ''
+  String arch = architecture == Architecture.AARCH64 ? '-aarch64' : (architecture == Architecture.PPC64LE ? '-ppc64le' : '')
 
   final TaskProvider<Tar> buildDockerContextTask =
     tasks.register(taskName('build', architecture, base, 'DockerContext'), Tar) {
@@ -245,7 +247,7 @@ void addTransformDockerContextTask(Architecture architecture, DockerBase base) {
     TaskProvider<Tar> buildContextTask = tasks.named(taskName("build", architecture, base, "DockerContext"))
     dependsOn(buildContextTask)
 
-    String arch = architecture == Architecture.AARCH64 ? '-aarch64' : ''
+    String arch = architecture == Architecture.AARCH64 ? '-aarch64' : (architecture == Architecture.PPC64LE ? '-ppc64le' : '')
     String archiveName = "elasticsearch${base.suffix}-${VersionProperties.elasticsearch}-docker-build-context${arch}"
     String distributionName = "elasticsearch-${VersionProperties.elasticsearch}-linux-${architecture.classifier}.tar.gz"
 
@@ -364,7 +366,7 @@ subprojects { Project subProject ->
   if (subProject.name.endsWith('-export')) {
     apply plugin: 'distribution'
 
-    final Architecture architecture = subProject.name.contains('aarch64-') ? Architecture.AARCH64 : Architecture.X64
+    final Architecture architecture = subProject.name.contains('aarch64-') ? Architecture.AARCH64 : (subProject.name.contains('ppc64le-') ? Architecture.PPC64LE : Architecture.X64)
     DockerBase base = DockerBase.DEFAULT
     if (subProject.name.contains('ubi-')) {
       base = DockerBase.UBI
@@ -372,7 +374,7 @@ subprojects { Project subProject ->
       base = DockerBase.IRON_BANK
     }
 
-    final String arch = architecture == Architecture.AARCH64 ? '-aarch64' : ''
+    final String arch = architecture == Architecture.AARCH64 ? '-aarch64' : (architecture == Architecture.PPC64LE ? '-ppc64le' : '')
     final String extension = base == DockerBase.UBI ? 'ubi.tar' :
       (base == DockerBase.IRON_BANK ? 'ironbank.tar' :
           'docker.tar')
diff --git a/distribution/docker/src/docker/Dockerfile b/distribution/docker/src/docker/Dockerfile
index ea4237c0abd..6806b759577 100644
--- a/distribution/docker/src/docker/Dockerfile
+++ b/distribution/docker/src/docker/Dockerfile
@@ -61,6 +61,7 @@ RUN set -eux ; \\
     case "\$(arch)" in \\
         aarch64) tini_bin='tini-arm64' ;; \\
         x86_64)  tini_bin='tini-amd64' ;; \\
+        ppc64le) tini_bin='tini-ppc64le' ;; \\
         *) echo >&2 ; echo >&2 "Unsupported architecture \$(arch)" ; echo >&2 ; exit 1 ;; \\
     esac ; \\
     curl --retry 10 -S -L -O https://github.com/krallin/tini/releases/download/v0.19.0/\${tini_bin} ; \\
diff --git a/distribution/docker/src/docker/config/elasticsearch.yml b/distribution/docker/src/docker/config/elasticsearch.yml
index 50b154702b9..b0364864e8e 100644
--- a/distribution/docker/src/docker/config/elasticsearch.yml
+++ b/distribution/docker/src/docker/config/elasticsearch.yml
@@ -1,2 +1,6 @@
 cluster.name: "docker-cluster"
 network.host: 0.0.0.0
+xpack.ml.enabled: false
+discovery.seed_hosts: []
+bootstrap.system_call_filter: false
+discovery.type: single-node
diff --git a/distribution/packages/build.gradle b/distribution/packages/build.gradle
index 6028aff51e3..d3c2c2b8b36 100644
--- a/distribution/packages/build.gradle
+++ b/distribution/packages/build.gradle
@@ -100,6 +100,8 @@ Closure commonPackageConfig(String type, boolean oss, boolean jdk, String archit
     if (type == 'deb') {
       if (architecture == 'x64') {
         arch('amd64')
+      } else if (architecture == 'ppc64le') {
+        arch('ppc64le')
       } else {
         assert architecture == 'aarch64' : architecture
         arch('arm64')
@@ -108,6 +110,8 @@ Closure commonPackageConfig(String type, boolean oss, boolean jdk, String archit
       assert type == 'rpm' : type
       if (architecture == 'x64') {
         arch('X86_64')
+      } else if (architecture == 'ppc64le') {
+        arch('ppc64le')
       } else {
         assert architecture == 'aarch64' : architecture
         arch('aarch64')
@@ -115,7 +119,7 @@ Closure commonPackageConfig(String type, boolean oss, boolean jdk, String archit
     }
     // Follow elasticsearch's file naming convention
     String jdkString = jdk ? "" : "no-jdk-"
-    String prefix = "${architecture == 'aarch64' ? 'aarch64-' : ''}${oss ? 'oss-' : ''}${jdk ? '' : 'no-jdk-'}${type}"
+    String prefix = "${architecture == 'aarch64' ? 'aarch64-' : (architecture == 'ppc64le' ? 'ppc64le-' : '')}${oss ? 'oss-' : ''}${jdk ? '' : 'no-jdk-'}${type}"
     destinationDirectory = file("${prefix}/build/distributions")
     archiveFileName.value(project.provider({ "${packageName}-${project.version}-${jdkString}${archString}.${type}" } ))
     String packagingFiles = "build/packaging/${oss ? 'oss-' : ''}${jdk ? '' : 'no-jdk-'}${type}"
@@ -364,6 +368,14 @@ tasks.register('buildOssNoJdkDeb', Deb) {
   configure(commonDebConfig(true, false, 'x64'))
 }
 
+tasks.register('buildPpc64leDeb', Deb) {
+  configure(commonDebConfig(false, true, 'ppc64le'))
+}
+
+tasks.register('buildPpc64leOssDeb', Deb) {
+  configure(commonDebConfig(true, true, 'ppc64le'))
+}
+
 Closure commonRpmConfig(boolean oss, boolean jdk, String architecture) {
   return {
     configure(commonPackageConfig('rpm', oss, jdk, architecture))
@@ -417,6 +429,14 @@ tasks.register('buildOssNoJdkRpm', Rpm) {
   configure(commonRpmConfig(true, false, 'x64'))
 }
 
+tasks.register('buildPpc64leRpm', Rpm) {
+  configure(commonRpmConfig(false, true, 'ppc64le'))
+}
+
+tasks.register('buildPpc64leOssRpm', Rpm) {
+  configure(commonRpmConfig(true, true, 'ppc64le'))
+}
+
 Closure dpkgExists = { it -> new File('/bin/dpkg-deb').exists() || new File('/usr/bin/dpkg-deb').exists() || new File('/usr/local/bin/dpkg-deb').exists() }
 Closure rpmExists = { it -> new File('/bin/rpm').exists() || new File('/usr/bin/rpm').exists() || new File('/usr/local/bin/rpm').exists() }
 
diff --git a/gradle/verification-metadata.xml b/gradle/verification-metadata.xml
index 745a1d585c6..be2e8a8cdb3 100644
--- a/gradle/verification-metadata.xml
+++ b/gradle/verification-metadata.xml
@@ -1867,12 +1867,9 @@
             <sha256 value="cf39490fe042dba1b61d6e9a395095279a69e70086c8c8d5466d9926d80976d8" origin="Generated by Gradle"/>
          </artifact>
       </component>
-      <component group="openjdk_20" name="linux" version="20.0.2">
-         <artifact name="linux-20.0.2-aarch64.tar.gz">
-            <sha256 value="3238c93267c663dbca00f5d5b0e3fbba40e1eea2b4281612f40542d208b6dd9a" origin="Generated by Gradle"/>
-         </artifact>
-         <artifact name="linux-20.0.2-x64.tar.gz">
-            <sha256 value="beaf61959c2953310595e1162b0c626aef33d58628771033ff2936609661956c" origin="Generated by Gradle"/>
+      <component group="adoptium_17" name="linux" version="17.0.5">
+         <artifact name="linux-17.0.5-ppc64le.tar.gz">
+            <sha256 value="a426a4e2cbc29f46fa686bea8b26613f7b7a9a772a77fed0d40dfe05295be883" origin="Generated by Gradle"/>
          </artifact>
       </component>
       <component group="openjdk_20" name="macos" version="20.0.2">
diff --git a/server/src/main/java/org/elasticsearch/bootstrap/SystemCallFilter.java b/server/src/main/java/org/elasticsearch/bootstrap/SystemCallFilter.java
index ceb1066d8d4..57704da1ae0 100644
--- a/server/src/main/java/org/elasticsearch/bootstrap/SystemCallFilter.java
+++ b/server/src/main/java/org/elasticsearch/bootstrap/SystemCallFilter.java
@@ -233,6 +233,7 @@ final class SystemCallFilter {
         Map<String, Arch> m = new HashMap<>();
         m.put("amd64", new Arch(0xC000003E, 0x3FFFFFFF, 57, 58, 59, 322, 317));
         m.put("aarch64", new Arch(0xC00000B7, 0xFFFFFFFF, 1079, 1071, 221, 281, 277));
+        m.put("ppc64le",  new Arch(0xC0000015, 0xFFFFFFFF, 2, 189, 11, 362, 358));
         ARCHITECTURES = Collections.unmodifiableMap(m);
     }
 
diff --git a/settings.gradle b/settings.gradle
index 68e90e16147..a3842a9fc2d 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -65,6 +65,14 @@ List projects = [
   'distribution:tools:plugin-cli',
   'distribution:tools:keystore-cli',
   'distribution:tools:geoip-cli',
+  'distribution:archives:darwin-ppc64le-tar',
+  'distribution:archives:no-jdk-darwin-ppc64le-tar',
+  'distribution:archives:linux-ppc64le-tar',
+  'distribution:docker:docker-ppc64le-export',
+  'distribution:docker:ironbank-docker-ppc64le-export',
+  'distribution:docker:ubi-docker-ppc64le-export',
+  'distribution:packages:ppc64le-deb',
+  'distribution:packages:ppc64le-rpm',
   'server',
   'server:cli',
   'test:framework',
diff --git a/x-pack/plugin/ml/build.gradle b/x-pack/plugin/ml/build.gradle
index c13d178c3b2..bf3f8f7210e 100644
--- a/x-pack/plugin/ml/build.gradle
+++ b/x-pack/plugin/ml/build.gradle
@@ -1,5 +1,3 @@
-import org.elasticsearch.gradle.VersionProperties
-
 apply plugin: 'elasticsearch.internal-es-plugin'
 apply plugin: 'elasticsearch.internal-cluster-test'
 apply plugin: 'elasticsearch.internal-test-artifact'
@@ -13,50 +11,31 @@ esplugin {
   extendedPlugins = ['x-pack-autoscaling', 'lang-painless']
 }
 
-def localRepo = providers.systemProperty('build.ml_cpp.repo').orNull
-
 if (useDra == false) {
   repositories {
     exclusiveContent {
-      filter {
-        includeGroup 'org.elasticsearch.ml'
-      }
       forRepository {
         ivy {
           name "ml-cpp"
+          url providers.systemProperty('build.ml_cpp.repo').orElse('https://prelert-artifacts.s3.amazonaws.com').get()
           metadataSources {
             // no repository metadata, look directly for the artifact
             artifact()
           }
-          if (localRepo) {
-            url localRepo
-            patternLayout {
-              artifact "maven/[orgPath]/[module]/[revision]/[module]-[revision](-[classifier]).[ext]"
-            }
-          } else {
-            url "https://artifacts-snapshot.elastic.co/"
-            patternLayout {
-              if (VersionProperties.isElasticsearchSnapshot()) {
-                artifact '/ml-cpp/[revision]/downloads/ml-cpp/[module]-[revision](-[classifier]).[ext]'
-              } else {
-                // When building locally we always use snapshot artifacts even if passing `-Dbuild.snapshot=false`.
-                // Release builds are always done with a local repo.
-                artifact '/ml-cpp/[revision]-SNAPSHOT/downloads/ml-cpp/[module]-[revision]-SNAPSHOT(-[classifier]).[ext]'
-              }
-            }
+          patternLayout {
+            artifact "maven/org/elasticsearch/ml/ml-cpp/[revision]/[module]-[revision](-[classifier]).[ext]"
           }
         }
       }
+      filter {
+        includeGroup 'org.elasticsearch.ml'
+      }
     }
   }
 }
+
 configurations {
   nativeBundle {
-    resolutionStrategy.dependencySubstitution {
-      if (findProject(':ml-cpp') != null) {
-        substitute module("org.elasticsearch.ml:ml-cpp") with project(":ml-cpp")
-      }
-    }
     resolutionStrategy.cacheChangingModulesFor 2, 'hours'
   }
 }
@@ -66,12 +45,10 @@ tasks.named("bundlePlugin").configure {
   from {
     project.zipTree(configurations.nativeBundle.singleFile)
   }
-
   // We don't ship the individual nativeBundle licenses - instead
   // they get combined into the top level NOTICES file we ship
   exclude 'platform/licenses/**'
 }
-
 dependencies {
   compileOnly project(':modules:lang-painless:spi')
   compileOnly project(path: xpackModule('core'))
@@ -95,12 +72,10 @@ dependencies {
   }
   testImplementation 'org.ini4j:ini4j:0.5.2'
 }
-
 artifacts {
   // normal es plugins do not publish the jar but we need to since users need it for extensions
   archives tasks.named("jar")
 }
-
 tasks.register("extractNativeLicenses", Copy) {
   dependsOn configurations.nativeBundle
   into "${buildDir}/extractedNativeLicenses"
@@ -119,5 +94,4 @@ project.afterEvaluate {
     }
   }
 }
-
 addQaCheckDependencies()
