diff --git a/buildSrc/build.gradle b/buildSrc/build.gradle
index d11375d044b..41e36478bde 100644
--- a/buildSrc/build.gradle
+++ b/buildSrc/build.gradle
@@ -183,9 +183,11 @@ if (project != rootProject) {
     distribution project(':distribution:archives:oss-darwin-tar')
     distribution project(':distribution:archives:oss-darwin-aarch64-tar')
     distribution project(':distribution:archives:linux-aarch64-tar')
+    distribution project(':distribution:archives:linux-ppc64le-tar')
     distribution project(':distribution:archives:linux-tar')
     distribution project(':distribution:archives:oss-linux-tar')
     distribution project(':distribution:archives:oss-linux-aarch64-tar')
+    distribution project(':distribution:archives:oss-linux-ppc64le-tar')
 
     integTestRuntimeOnly(project(":libs:elasticsearch-core"))
   }
diff --git a/buildSrc/src/main/java/org/elasticsearch/gradle/Architecture.java b/buildSrc/src/main/java/org/elasticsearch/gradle/Architecture.java
index ccc81954aab..5e7be0f5eda 100644
--- a/buildSrc/src/main/java/org/elasticsearch/gradle/Architecture.java
+++ b/buildSrc/src/main/java/org/elasticsearch/gradle/Architecture.java
@@ -11,6 +11,7 @@ package org.elasticsearch.gradle;
 public enum Architecture {
 
     X64("x86_64"),
+    PPC64LE("ppc64le"),
     AARCH64("aarch64");
 
     public final String classifier;
@@ -25,6 +26,8 @@ public enum Architecture {
             case "amd64":
             case "x86_64":
                 return X64;
+            case "ppc64le":
+                return PPC64LE;
             case "aarch64":
                 return AARCH64;
             default:
diff --git a/buildSrc/src/main/java/org/elasticsearch/gradle/Jdk.java b/buildSrc/src/main/java/org/elasticsearch/gradle/Jdk.java
index a07301c79a0..9c543894c09 100644
--- a/buildSrc/src/main/java/org/elasticsearch/gradle/Jdk.java
+++ b/buildSrc/src/main/java/org/elasticsearch/gradle/Jdk.java
@@ -24,7 +24,7 @@ import java.util.regex.Pattern;
 
 public class Jdk implements Buildable, Iterable<File> {
 
-    private static final List<String> ALLOWED_ARCHITECTURES = Collections.unmodifiableList(Arrays.asList("aarch64", "x64"));
+    private static final List<String> ALLOWED_ARCHITECTURES = Collections.unmodifiableList(Arrays.asList("aarch64", "x64", "ppc64le"));
     private static final List<String> ALLOWED_VENDORS = Collections.unmodifiableList(Arrays.asList("adoptopenjdk", "openjdk", "azul"));
     private static final List<String> ALLOWED_PLATFORMS = Collections.unmodifiableList(Arrays.asList("darwin", "linux", "windows", "mac"));
     private static final Pattern VERSION_PATTERN = Pattern.compile("(\\d+)(\\.\\d+\\.\\d+)?\\+(\\d+(?:\\.\\d+)?)(@([a-f0-9]{32}))?");
diff --git a/buildSrc/src/test/java/org/elasticsearch/gradle/JdkDownloadPluginTests.java b/buildSrc/src/test/java/org/elasticsearch/gradle/JdkDownloadPluginTests.java
index e835e816f4c..195cf4ea2aa 100644
--- a/buildSrc/src/test/java/org/elasticsearch/gradle/JdkDownloadPluginTests.java
+++ b/buildSrc/src/test/java/org/elasticsearch/gradle/JdkDownloadPluginTests.java
@@ -84,7 +84,7 @@ public class JdkDownloadPluginTests extends GradleUnitTestCase {
             "11.0.2+33",
             "linux",
             "unknown",
-            "unknown architecture [unknown] for jdk [testjdk], must be one of [aarch64, x64]"
+            "unknown architecture [unknown] for jdk [testjdk], must be one of [aarch64, x64, ppc64le]"
         );
     }
 
diff --git a/distribution/archives/build.gradle b/distribution/archives/build.gradle
index 772def3645b..c4b6e34c331 100644
--- a/distribution/archives/build.gradle
+++ b/distribution/archives/build.gradle
@@ -160,6 +160,13 @@ distribution_archives {
     }
   }
 
+  linuxPpc64leTar {
+    archiveClassifier = 'linux-ppc64le'
+    content {
+      archiveFiles(modulesFiles(false, 'linux-ppc64le'), 'tar', 'linux', 'ppc64le', false, true)
+    }
+  }
+
   linuxTar {
     archiveClassifier = 'linux-x86_64'
     content {
@@ -174,6 +181,13 @@ distribution_archives {
     }
   }
 
+  ossLinuxPpc64leTar {
+    archiveClassifier = 'linux-ppc64le'
+    content {
+      archiveFiles(modulesFiles(true, 'linux-ppc64le'), 'tar', 'linux', 'ppc64le', true, true)
+    }
+  }
+
   ossLinuxTar {
     archiveClassifier = 'linux-x86_64'
     content {
diff --git a/distribution/build.gradle b/distribution/build.gradle
index f37f9cbfbc5..d775b8d45f5 100644
--- a/distribution/build.gradle
+++ b/distribution/build.gradle
@@ -293,7 +293,7 @@ configure(subprojects.findAll { ['archives', 'packages'].contains(it.name) }) {
   // Setup all required JDKs
   project.jdks {
     ['darwin', 'windows', 'linux'].each { platform ->
-      (platform == 'linux' || platform == 'darwin' ? ['x64', 'aarch64'] : ['x64']).each { architecture ->
+      (platform == 'linux' || platform == 'darwin' ? ['x64', 'aarch64', 'ppc64le'] : ['x64']).each { architecture ->
         "bundled_${platform}_${architecture}" {
           it.platform = platform
           it.version = VersionProperties.getBundledJdk(platform)
@@ -372,7 +372,7 @@ configure(subprojects.findAll { ['archives', 'packages'].contains(it.name) }) {
         } else {
           buildModules = buildDefaultModulesTaskProvider
         }
-        List excludePlatforms = ['linux-x86_64', 'linux-aarch64', 'windows-x86_64', 'darwin-x86_64', 'darwin-aarch64']
+        List excludePlatforms = ['linux-x86_64', 'linux-aarch64', 'windows-x86_64', 'darwin-x86_64', 'darwin-aarch64', 'linux-ppc64le']
         if (platform != null) {
           excludePlatforms.remove(excludePlatforms.indexOf(platform))
         } else {
diff --git a/distribution/docker/build.gradle b/distribution/docker/build.gradle
index 7bb394458c9..0a9cd925cbe 100644
--- a/distribution/docker/build.gradle
+++ b/distribution/docker/build.gradle
@@ -23,6 +23,8 @@ configurations {
   aarch64OssDockerSource
   ossDockerSource
   transformLog4jJar
+  ppc64leDockerSource
+  ppc64leOssDockerSource
 }
 
 dependencies {
@@ -31,6 +33,8 @@ dependencies {
   aarch64OssDockerSource project(path: ":distribution:archives:oss-linux-aarch64-tar", configuration:"default")
   ossDockerSource project(path: ":distribution:archives:oss-linux-tar", configuration:"default")
   transformLog4jJar project(path: ":distribution:docker:transform-log4j-config", configuration: "default")
+  ppc64leDockerSource project(path: ":distribution:archives:linux-ppc64le-tar", configuration:"default")
+  ppc64leOssDockerSource project(path: ":distribution:archives:oss-linux-ppc64le-tar", configuration:"default")
 }
 
 ext.expansions = { Architecture architecture, boolean oss, DockerBase base, boolean local ->
@@ -40,6 +44,8 @@ ext.expansions = { Architecture architecture, boolean oss, DockerBase base, bool
       classifier = "linux-aarch64"
     } else if (architecture == Architecture.X64) {
       classifier = "linux-x86_64"
+    } else if (architecture == Architecture.PPC64LE) {
+      classifier = "linux-ppc64le"
     } else {
       throw new IllegalArgumentException("Unsupported architecture [" + architecture + "]")
     }
@@ -107,7 +113,7 @@ class SquashNewlinesFilter extends FilterReader {
 
 private static String buildPath(Architecture architecture, boolean oss, DockerBase base) {
   return 'build/' +
-    (architecture == Architecture.AARCH64 ? 'aarch64-' : '') +
+    (architecture == Architecture.AARCH64 ? 'aarch64-' : (architecture == Architecture.PPC64LE ? 'ppc64le-' : '')) +
     (oss ? 'oss-' : '') +
     (base == DockerBase.UBI ? 'ubi-' : '') +
     (base == DockerBase.UBI ? 'ubi-' : (base == DockerBase.IRON_BANK ? 'ironbank-' : '')) +
@@ -116,7 +122,7 @@ private static String buildPath(Architecture architecture, boolean oss, DockerBa
 
 private static String taskName(String prefix, Architecture architecture, boolean oss, DockerBase base, String suffix) {
   return prefix +
-    (architecture == Architecture.AARCH64 ? 'Aarch64' : '') +
+    (architecture == Architecture.AARCH64 ? 'aarch64-' : (architecture == Architecture.PPC64LE ? 'ppc64le-' : '')) +
     (oss ? 'Oss' : '') +
     (base == DockerBase.UBI ? 'Ubi' : (base == DockerBase.IRON_BANK ? 'IronBank' : '')) +
     suffix
@@ -197,6 +203,12 @@ void addCopyDockerContextTask(Architecture architecture, boolean oss, DockerBase
       } else {
         from configurations.aarch64DockerSource
       }
+    } else if (architecture == Architecture.PPC64LE) {
+      if (oss) {
+        from configurations.ppc64leOssDockerSource
+      } else {
+        from configurations.ppc64leDockerSource
+      }
     } else {
       if (oss) {
         from configurations.ossDockerSource
@@ -232,7 +244,7 @@ tasks.register("copyNodeKeyMaterial", Sync) {
 elasticsearch_distributions {
   Architecture.values().each { eachArchitecture ->
     Flavor.values().each { distroFlavor ->
-      "docker_$distroFlavor${ eachArchitecture == Architecture.AARCH64 ? '_aarch64' : '' }" {
+      "docker_$distroFlavor${ eachArchitecture == Architecture.AARCH64 ? '_aarch64' : (eachArchitecture == Architecture.PPC64LE ? '_ppc64le' : '') }" {
         architecture = eachArchitecture
         flavor = distroFlavor
         type = 'docker'
@@ -353,13 +365,13 @@ subprojects { Project subProject ->
   if (subProject.name.endsWith('-export')) {
     apply plugin: 'distribution'
 
-    final Architecture architecture = subProject.name.contains('aarch64-') ? Architecture.AARCH64 : Architecture.X64
+    final Architecture architecture = subProject.name.contains('aarch64-') ? Architecture.AARCH64 : (subProject.name.contains('ppc64le-') ? Architecture.PPC64LE : Architecture.X64)
     final boolean oss = subProject.name.contains('oss-')
     // We can ignore Iron Bank at the moment as we don't
     // build those images ourselves.
     final DockerBase base = subProject.name.contains('ubi-') ? DockerBase.UBI : DockerBase.CENTOS
 
-    final String arch = architecture == Architecture.AARCH64 ? '-aarch64' : ''
+    final String arch = architecture == Architecture.AARCH64 ? '-aarch64' : (architecture == Architecture.PPC64LE ? '-ppc64le' : '')
     final String suffix = oss ? '-oss' : base == DockerBase.UBI ? '-ubi8' : ''
     final String extension = base == DockerBase.UBI ? 'ubi.tar' : 'docker.tar'
     final String artifactName = "elasticsearch${arch}${suffix}_test"
diff --git a/distribution/docker/src/docker/Dockerfile b/distribution/docker/src/docker/Dockerfile
index f7d5c4ecb92..7a1090c1f3a 100644
--- a/distribution/docker/src/docker/Dockerfile
+++ b/distribution/docker/src/docker/Dockerfile
@@ -49,6 +49,7 @@ RUN set -eux ; \\
     tini_bin="" ; \\
     case "\$(arch)" in \\
         aarch64) tini_bin='tini-arm64' ;; \\
+        ppc64le) tini_bin='tini-ppc64le' ;; \\
         x86_64)  tini_bin='tini-amd64' ;; \\
         *) echo >&2 ; echo >&2 "Unsupported architecture \$(arch)" ; echo >&2 ; exit 1 ;; \\
     esac ; \\
diff --git a/distribution/docker/src/docker/config/elasticsearch.yml b/distribution/docker/src/docker/config/elasticsearch.yml
index 50b154702b9..b0364864e8e 100644
--- a/distribution/docker/src/docker/config/elasticsearch.yml
+++ b/distribution/docker/src/docker/config/elasticsearch.yml
@@ -1,2 +1,6 @@
 cluster.name: "docker-cluster"
 network.host: 0.0.0.0
+xpack.ml.enabled: false
+discovery.seed_hosts: []
+bootstrap.system_call_filter: false
+discovery.type: single-node
diff --git a/distribution/packages/build.gradle b/distribution/packages/build.gradle
index f34a363cde1..dc1e06b620b 100644
--- a/distribution/packages/build.gradle
+++ b/distribution/packages/build.gradle
@@ -99,6 +99,8 @@ Closure commonPackageConfig(String type, boolean oss, boolean jdk, String archit
     if (type == 'deb') {
       if (architecture == 'x64') {
         arch('amd64')
+      } else if (architecture == 'ppc64le') {
+        arch('ppc64le')
       } else {
         assert architecture == 'aarch64' : architecture
         arch('arm64')
@@ -107,6 +109,8 @@ Closure commonPackageConfig(String type, boolean oss, boolean jdk, String archit
       assert type == 'rpm' : type
       if (architecture == 'x64') {
         arch('X86_64')
+      } else if (architecture == 'ppc64le') {
+        arch('ppc64le')
       } else {
         assert architecture == 'aarch64' : architecture
         arch('aarch64')
@@ -114,7 +118,7 @@ Closure commonPackageConfig(String type, boolean oss, boolean jdk, String archit
     }
     // Follow elasticsearch's file naming convention
     String jdkString = jdk ? "" : "no-jdk-"
-    String prefix = "${architecture == 'aarch64' ? 'aarch64-' : ''}${oss ? 'oss-' : ''}${jdk ? '' : 'no-jdk-'}${type}"
+    String prefix = "${architecture == 'aarch64' ? 'aarch64-' : (architecture == 'ppc64le' ? 'ppc64le-' : '')}${oss ? 'oss-' : ''}${jdk ? '' : 'no-jdk-'}${type}"
     destinationDirectory = file("${prefix}/build/distributions")
 
     // SystemPackagingTask overrides default archive task convention mappings, but doesn't provide a setter so we have to override the convention mapping itself
@@ -346,6 +350,10 @@ tasks.register('buildAarch64Deb', Deb) {
   configure(commonDebConfig(false, true, 'aarch64'))
 }
 
+tasks.register('buildPpc64leDeb', Deb) {
+  configure(commonDebConfig(false, true, 'ppc64le'))
+}
+
 tasks.register('buildDeb', Deb) {
   configure(commonDebConfig(false, true, 'x64'))
 }
@@ -354,6 +362,10 @@ tasks.register('buildAarch64OssDeb', Deb) {
   configure(commonDebConfig(true, true, 'aarch64'))
 }
 
+tasks.register('buildPpc64leOssDeb', Deb) {
+  configure(commonDebConfig(true, true, 'ppc64le'))
+}
+
 tasks.register('buildOssDeb', Deb) {
   configure(commonDebConfig(true, true, 'x64'))
 }
@@ -399,6 +411,10 @@ tasks.register('buildAarch64Rpm', Rpm) {
   configure(commonRpmConfig(false, true, 'aarch64'))
 }
 
+tasks.register('buildPpc64leRpm', Rpm) {
+  configure(commonRpmConfig(false, true, 'ppc64le'))
+}
+
 tasks.register('buildRpm', Rpm) {
   configure(commonRpmConfig(false, true, 'x64'))
 }
@@ -407,6 +423,10 @@ tasks.register('buildAarch64OssRpm', Rpm) {
   configure(commonRpmConfig(true, true, 'aarch64'))
 }
 
+tasks.register('buildPpc64leOssRpm', Rpm) {
+  configure(commonRpmConfig(true, true, 'ppc64le'))
+}
+
 tasks.register('buildOssRpm', Rpm) {
   configure(commonRpmConfig(true, true, 'x64'))
 }
diff --git a/server/src/main/java/org/elasticsearch/bootstrap/SystemCallFilter.java b/server/src/main/java/org/elasticsearch/bootstrap/SystemCallFilter.java
index 4374fc2cad6..3a7029d648e 100644
--- a/server/src/main/java/org/elasticsearch/bootstrap/SystemCallFilter.java
+++ b/server/src/main/java/org/elasticsearch/bootstrap/SystemCallFilter.java
@@ -232,6 +232,7 @@ final class SystemCallFilter {
         Map<String,Arch> m = new HashMap<>();
         m.put("amd64", new Arch(0xC000003E, 0x3FFFFFFF, 57, 58, 59, 322, 317));
         m.put("aarch64",  new Arch(0xC00000B7, 0xFFFFFFFF, 1079, 1071, 221, 281, 277));
+        m.put("ppc64le",  new Arch(0xC0000015, 0xFFFFFFFF, 2, 189, 11, 362, 358));
         ARCHITECTURES = Collections.unmodifiableMap(m);
     }
 
diff --git a/settings.gradle b/settings.gradle
index 978dfb5d19b..65bc44475fc 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -31,23 +31,30 @@ List projects = [
   'distribution:archives:oss-no-jdk-darwin-aarch64-tar',
   'distribution:archives:no-jdk-darwin-aarch64-tar',
   'distribution:archives:oss-linux-aarch64-tar',
+  'distribution:archives:oss-linux-ppc64le-tar',
   'distribution:archives:oss-linux-tar',
   'distribution:archives:linux-aarch64-tar',
+  'distribution:archives:linux-ppc64le-tar',
   'distribution:archives:linux-tar',
   'distribution:archives:oss-no-jdk-linux-tar',
   'distribution:archives:no-jdk-linux-tar',
   'distribution:docker',
   'distribution:docker:docker-aarch64-build-context',
+  'distribution:docker:docker-ppc64le-build-context',
   'distribution:docker:docker-aarch64-export',
+  'distribution:docker:docker-ppc64le-export',
   'distribution:docker:docker-build-context',
   'distribution:docker:docker-export',
   'distribution:docker:ironbank-docker-build-context',
   'distribution:docker:oss-docker-aarch64-build-context',
+  'distribution:docker:oss-docker-ppc64le-build-context',
   'distribution:docker:oss-docker-aarch64-export',
+  'distribution:docker:oss-docker-ppc64le-export',
   'distribution:docker:oss-docker-build-context',
   'distribution:docker:oss-docker-export',
   'distribution:docker:transform-log4j-config',
   'distribution:docker:ubi-docker-aarch64-export',
+  'distribution:docker:ubi-docker-ppc64le-export',
   'distribution:docker:ubi-docker-build-context',
   'distribution:docker:ubi-docker-export',
   'distribution:packages:aarch64-oss-deb',
@@ -59,6 +66,7 @@ List projects = [
   'distribution:packages:aarch64-oss-rpm',
   'distribution:packages:oss-rpm',
   'distribution:packages:aarch64-rpm',
+  'distribution:packages:ppc64le-rpm',
   'distribution:packages:rpm',
   'distribution:packages:oss-no-jdk-rpm',
   'distribution:packages:no-jdk-rpm',
diff --git a/buildSrc/version.properties b/buildSrc/version.properties
index b433236c34f..0ae171dcd9c 100644
--- a/buildSrc/version.properties
+++ b/buildSrc/version.properties
@@ -14,7 +14,7 @@ snakeyaml         = 1.26
 icu4j             = 62.1
 supercsv          = 2.4.0
 # when updating log4j, please update also docs/java-api/index.asciidoc
-log4j             = 2.11.1
+log4j             = 2.12.2
 slf4j             = 1.6.2

 # when updating the JNA version, also update the version in buildSrc/build.gradle
diff --git a/x-pack/plugin/watcher/build.gradle b/x-pack/plugin/watcher/build.gradle
index cea848236e3..9f9555ffa0b 100644
--- a/x-pack/plugin/watcher/build.gradle
+++ b/x-pack/plugin/watcher/build.gradle
@@ -34,7 +34,7 @@ dependencies {
   testImplementation project(xpackModule('ilm'))

   // watcher deps
-  api 'com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:20191001.1'
+  api 'com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:20211018.1'
   runtimeOnly 'com.google.guava:guava:27.1-jre' // needed by watcher for the html sanitizer
   runtimeOnly 'com.google.guava:failureaccess:1.0.1'
   api 'com.sun.mail:jakarta.mail:1.6.4'
   