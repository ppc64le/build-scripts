From 300e89cd76746d11dd66c6b6f49c600b942ebb01 Mon Sep 17 00:00:00 2001
From: Srighakollapu-Sai-Srivatsa <Srighakollapu.Sai.Srivatsa@ibm.com>
Date: Mon, 5 May 2025 05:49:58 +0000
Subject: [PATCH] changes

---
 aten/src/ATen/native/cpu/BinaryOpsKernel.cpp | 18 ++++++++++++++++++
 cmake/Dependencies.cmake                     |  2 ++
 tools/setup_helpers/cmake.py                 |  5 +++++
 3 files changed, 25 insertions(+)

diff --git a/aten/src/ATen/native/cpu/BinaryOpsKernel.cpp b/aten/src/ATen/native/cpu/BinaryOpsKernel.cpp
index 42a4d0b564b..009f77809f8 100644
--- a/aten/src/ATen/native/cpu/BinaryOpsKernel.cpp
+++ b/aten/src/ATen/native/cpu/BinaryOpsKernel.cpp
@@ -428,6 +428,14 @@ void bitwise_xor_kernel(TensorIteratorBase& iter) {
 }

 void lshift_kernel(TensorIteratorBase& iter) {
+#if defined(__VSX__)  || defined(CPU_CAPABILITY_VSX)
+  AT_DISPATCH_INTEGRAL_TYPES(iter.dtype(), "lshift_cpu", [&]() {
+    cpu_kernel(iter,
+      [](scalar_t a, scalar_t b) -> scalar_t {
+        return static_cast<std::make_unsigned_t<scalar_t>>(a) << b;
+    });
+ });
+#else
   AT_DISPATCH_INTEGRAL_TYPES(iter.dtype(), "lshift_cpu", [&]() {
     cpu_kernel_vec(
         iter,
@@ -441,6 +449,7 @@ void lshift_kernel(TensorIteratorBase& iter) {
         },
         [](Vectorized<scalar_t> a, Vectorized<scalar_t> b) { return a << b; });
   });
+#endif
 }

 void logical_and_kernel(TensorIterator& iter) {
@@ -499,6 +508,14 @@ void logical_xor_kernel(TensorIterator& iter) {
 }

 void rshift_kernel(TensorIteratorBase& iter) {
+#if defined(__VSX__)  || defined(CPU_CAPABILITY_VSX)
+  AT_DISPATCH_INTEGRAL_TYPES(iter.dtype(), "rshift_cpu", [&]() {
+    cpu_kernel(iter,
+      [](scalar_t a, scalar_t b) -> scalar_t {
+        return a >> b;
+      });
+  });
+#else
   AT_DISPATCH_INTEGRAL_TYPES(iter.dtype(), "rshift_cpu", [&]() {
     cpu_kernel_vec(
         iter,
@@ -515,6 +532,7 @@ void rshift_kernel(TensorIteratorBase& iter) {
         },
         [](Vectorized<scalar_t> a, Vectorized<scalar_t> b) { return a >> b; });
   });
+#endif
 }

 void lt_kernel(TensorIteratorBase& iter) {
diff --git a/cmake/Dependencies.cmake b/cmake/Dependencies.cmake
index 1813f4418a2..7b9a555cee3 100644
--- a/cmake/Dependencies.cmake
+++ b/cmake/Dependencies.cmake
@@ -1144,6 +1144,8 @@ if(USE_DISTRIBUTED AND USE_TENSORPIPE)
       set(TP_ENABLE_CUDA_IPC ON CACHE BOOL "" FORCE)
     endif()
     set(TP_BUILD_LIBUV ON CACHE BOOL "" FORCE)
+    set(TP_ENABLE_SHM OFF CACHE BOOL "" FORCE)
+    set(TP_ENABLE_CMA OFF CACHE BOOL "" FORCE)
     add_compile_options(-DTORCH_USE_LIBUV)
     include_directories(BEFORE SYSTEM ${CMAKE_CURRENT_LIST_DIR}/../third_party/tensorpipe/third_party/libuv/include)
     set(TP_STATIC_OR_SHARED STATIC CACHE STRING "" FORCE)
diff --git a/tools/setup_helpers/cmake.py b/tools/setup_helpers/cmake.py
index 84e4dad32d3..5768fa92cd5 100644
--- a/tools/setup_helpers/cmake.py
+++ b/tools/setup_helpers/cmake.py
@@ -190,6 +190,11 @@ class CMake:
             # Key: environment variable name. Value: Corresponding variable name to be passed to CMake. If you are
             # adding a new build option to this block: Consider making these two names identical and adding this option
             # in the block below.
+            "Protobuf_INCLUDE_DIR" : "Protobuf_INCLUDE_DIR",
+            "Protobuf_LIBRARIES" : "Protobuf_LIBRARIES",
+            "Protobuf_LIBRARY": "Protobuf_LIBRARY",
+            "Protobuf_LITE_LIBRARY" : "Protobuf_LITE_LIBRARY",
+            "Protobuf_PROTOC_EXECUTABLE": "Protobuf_PROTOC_EXECUTABLE",
             "_GLIBCXX_USE_CXX11_ABI": "GLIBCXX_USE_CXX11_ABI",
             "CUDNN_LIB_DIR": "CUDNN_LIBRARY",
             "USE_CUDA_STATIC_LINK": "CAFFE2_STATIC_LINK_CUDA",
--
2.43.5

