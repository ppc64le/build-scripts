diff --git a/bitnami/postgresql/14/debian-11/Dockerfile b/bitnami/postgresql/14/debian-11/Dockerfile
index 2140bee1bbf..df2d85e7bea 100644
--- a/bitnami/postgresql/14/debian-11/Dockerfile
+++ b/bitnami/postgresql/14/debian-11/Dockerfile
@@ -1,48 +1,121 @@
-# Copyright VMware, Inc.
-# SPDX-License-Identifier: APACHE-2.0
+# refer : https://github.com/docker-library/postgres
+# license : MIT
+# https://github.com/docker-library/postgres/blob/master/LICENSE
+FROM debian:bullseye-slim
+RUN apt-get update -y && apt-get install  -y libnss-wrapper unixodbc xz-utils gnupg
 
-FROM docker.io/bitnami/minideb:bullseye
+RUN set -ex; \
+# pub   4096R/ACCC4CF8 2011-10-13 [expires: 2019-07-02]
+#       Key fingerprint = B97B 0AFC AA1A 47F0 44F2  44A0 7FCC 7D46 ACCC 4CF8
+# uid                  PostgreSQL Debian Repository
+        key='B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8'; \
+        export GNUPGHOME="$(mktemp -d)"; \
+        gpg --batch --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys "$key"; \
+        gpg --batch --export "$key" > /etc/apt/trusted.gpg.d/postgres.gpg; \
+        command -v gpgconf > /dev/null && gpgconf --kill all; \
+        rm -rf "$GNUPGHOME"; \
+        apt-key list
 
-ARG EXTRA_LOCALES
-ARG TARGETARCH
-ARG WITH_ALL_LOCALES="no"
+ENV PG_MAJOR 14
+ENV PATH $PATH:/usr/lib/postgresql/$PG_MAJOR/bin
 
-LABEL com.vmware.cp.artifact.flavor="sha256:1e1b4657a77f0d47e9220f0c37b9bf7802581b93214fff7d1bd2364c8bf22e8e" \
-      org.opencontainers.image.base.name="docker.io/bitnami/minideb:bullseye" \
-      org.opencontainers.image.created="2023-11-20T18:34:31Z" \
-      org.opencontainers.image.description="Application packaged by VMware, Inc" \
-      org.opencontainers.image.licenses="Apache-2.0" \
-      org.opencontainers.image.ref.name="14.10.0-debian-11-r9" \
-      org.opencontainers.image.title="postgresql" \
-      org.opencontainers.image.vendor="VMware, Inc." \
-      org.opencontainers.image.version="14.10.0"
+ENV PG_VERSION 14.10-1.pgdg110+1
+ENV PG_EXTENSIONS postgresql-$PG_MAJOR-pgaudit postgresql-$PG_MAJOR-orafce postgresql-$PG_MAJOR-auto-failover postgresql-$PG_MAJOR-pljava postgresql-$PG_MAJOR-postgis-3
 
-ENV HOME="/" \
-    OS_ARCH="${TARGETARCH:-amd64}" \
-    OS_FLAVOUR="debian-11" \
-    OS_NAME="linux"
+RUN set -ex; \
+        \
+# see note below about "*.pyc" files
+        export PYTHONDONTWRITEBYTECODE=1; \
+        \
+        dpkgArch="$(dpkg --print-architecture)"; \
+        case "$dpkgArch" in \
+                amd64 | arm64 | ppc64el) \
+# arches officialy built by upstream
+                        echo "deb http://apt.postgresql.org/pub/repos/apt/ bullseye-pgdg main $PG_MAJOR" > /etc/apt/sources.list.d/pgdg.list; \
+                        apt-get update; \
+                        ;; \
+                *) \
+# we're on an architecture upstream doesn't officially build for
+# let's build binaries from their published source packages
+                        echo "deb-src http://apt.postgresql.org/pub/repos/apt/ bullseye-pgdg main $PG_MAJOR" > /etc/apt/sources.list.d/pgdg.list; \
+                        \
+                        tempDir="$(mktemp -d)"; \
+                        cd "$tempDir"; \
+                        \
+                        savedAptMark="$(apt-mark showmanual)"; \
+                        \
+# build .deb files from upstream's source packages (which are verified by apt-get)
+                        apt-get update; \
+                        apt-get build-dep -y \
+                                postgresql-common pgdg-keyring \
+                                "postgresql-$PG_MAJOR=$PG_VERSION" $PG_EXTENSIONS \
+                        ; \
+                        DEB_BUILD_OPTIONS="nocheck parallel=$(nproc)" \
+                                apt-get source --compile \
+                                        postgresql-common pgdg-keyring \
+                                        "postgresql-$PG_MAJOR=$PG_VERSION" $PG_EXTENSIONS \
+                        ; \
+# we don't remove APT lists here because they get re-downloaded and removed later
+                        \
+# reset apt-mark's "manual" list so that "purge --auto-remove" will remove all build dependencies
+# (which is done after we install the built packages so we don't have to redownload any overlapping dependencies)
+                        apt-mark showmanual | xargs apt-mark auto > /dev/null; \
+                        apt-mark manual $savedAptMark; \
+                        \
+# create a temporary local APT repo to install from (so that dependency resolution can be handled by APT, as it should be)
+                        ls -lAFh; \
+                        dpkg-scanpackages . > Packages; \
+                        grep '^Package: ' Packages; \
+                        echo "deb [ trusted=yes ] file://$tempDir ./" > /etc/apt/sources.list.d/temp.list; \
+# work around the following APT issue by using "Acquire::GzipIndexes=false" (overriding "/etc/apt/apt.conf.d/docker-gzip-indexes")
+#   Could not open file /var/lib/apt/lists/partial/_tmp_tmp.ODWljpQfkE_._Packages - open (13: Permission denied)
+#   ...
+#   E: Failed to fetch store:/var/lib/apt/lists/partial/_tmp_tmp.ODWljpQfkE_._Packages  Could not open file /var/lib/apt/lists/partial/_tmp_tmp.ODWljpQfkE_._Packages - open (13: Permission denied)
+                        apt-get -o Acquire::GzipIndexes=false update; \
+                        ;; \
+        esac; \
+        \
+        apt-get install -y --no-install-recommends postgresql-common; \
+        sed -ri 's/#(create_main_cluster) .*$/\1 = false/' /etc/postgresql-common/createcluster.conf; \
+        apt-get install -y --no-install-recommends \
+                "postgresql-$PG_MAJOR=$PG_VERSION" $PG_EXTENSIONS \
+        ; \
+        \
+        rm -rf /var/lib/apt/lists/*; \
+        \
+        if [ -n "$tempDir" ]; then \
+# if we have leftovers from building, let's purge them (including extra, unnecessary build deps)
+                apt-get purge -y --auto-remove; \
+                rm -rf "$tempDir" /etc/apt/sources.list.d/temp.list; \
+        fi; \
+        \
+# some of the steps above generate a lot of "*.pyc" files (and setting "PYTHONDONTWRITEBYTECODE" beforehand doesn't propagate properly for some reason), so we clean them up manually (as long as they aren't owned by a package)
+        find /usr -name '*.pyc' -type f -exec bash -c 'for pyc; do dpkg -S "$pyc" &> /dev/null || rm -vf "$pyc"; done' -- '{}' +; \
+        \
+        postgres --version
+
+RUN mkdir -p /opt/bitnami/common/bin \
+    && mkdir -p /opt/bitnami/common/sbin \
+    && mkdir -p /opt/bitnami/common/lib \
+        && mkdir -p /opt/bitnami/postgresql/bin \
+    && mkdir -p /opt/bitnami/postgresql/sbin \
+    && mkdir -p /opt/bitnami/postgresql/lib \
+    && mkdir -p /opt/bitnami/postgresql/share \
+        && ln -sf $(find /usr/lib/*linux-gnu | grep libnss_wrapper.so)    /opt/bitnami/common/lib/ \
+    && ln -sf /usr/bin/pg_*                            /opt/bitnami/postgresql/bin/ \
+        && ln -sf /usr/lib/postgresql/$PG_MAJOR/bin/*      /opt/bitnami/postgresql/bin/ \
+        && ln -sf /usr/lib/postgresql/$PG_MAJOR/lib/*      /opt/bitnami/postgresql/lib/ \
+    && ln -sf /usr/sbin/pg_*                           /opt/bitnami/postgresql/sbin/ \
+    && ln -sf /usr/share/postgresql/$PG_MAJOR/*        /opt/bitnami/postgresql/share/ \
+        && deluser postgres \
+    && chmod 1777 /var/run/postgresql \
+    && sed -E -i "s/775/777/g" /usr/lib/tmpfiles.d/postgresql-common.conf \
+    && chown 1001:4096 -R /var/run/postgresql /var/lib/postgresql /var/log/postgresql
 
 COPY prebuildfs /
 SHELL ["/bin/bash", "-o", "pipefail", "-c"]
 # Install required system packages and dependencies
 RUN install_packages ca-certificates curl libbsd0 libbz2-1.0 libedit2 libffi7 libgcc-s1 libgmp10 libgnutls30 libhogweed6 libicu67 libidn2-0 libldap-2.4-2 liblz4-1 liblzma5 libmd0 libncurses6 libnettle8 libp11-kit0 libpcre3 libreadline8 libsasl2-2 libsqlite3-0 libssl1.1 libstdc++6 libtasn1-6 libtinfo6 libunistring2 libuuid1 libxml2 libxslt1.1 libzstd1 locales procps zlib1g
-RUN mkdir -p /tmp/bitnami/pkg/cache/ && cd /tmp/bitnami/pkg/cache/ && \
-    COMPONENTS=( \
-      "postgresql-14.10.0-8-linux-${OS_ARCH}-debian-11" \
-    ) && \
-    for COMPONENT in "${COMPONENTS[@]}"; do \
-      if [ ! -f "${COMPONENT}.tar.gz" ]; then \
-        curl -SsLf "https://downloads.bitnami.com/files/stacksmith/${COMPONENT}.tar.gz" -O ; \
-        curl -SsLf "https://downloads.bitnami.com/files/stacksmith/${COMPONENT}.tar.gz.sha256" -O ; \
-      fi && \
-      sha256sum -c "${COMPONENT}.tar.gz.sha256" && \
-      tar -zxf "${COMPONENT}.tar.gz" -C /opt/bitnami --strip-components=2 --no-same-owner --wildcards '*/files' && \
-      rm -rf "${COMPONENT}".tar.gz{,.sha256} ; \
-    done
-RUN apt-get autoremove --purge -y curl && \
-    apt-get update && apt-get upgrade -y && \
-    apt-get clean && rm -rf /var/lib/apt/lists /var/cache/apt/archives
-RUN chmod g+rwX /opt/bitnami
 RUN localedef -c -f UTF-8 -i en_US en_US.UTF-8
 RUN update-locale LANG=C.UTF-8 LC_MESSAGES=POSIX && \
     DEBIAN_FRONTEND=noninteractive dpkg-reconfigure locales
@@ -57,7 +130,7 @@ ENV APP_VERSION="14.10.0" \
     LANG="en_US.UTF-8" \
     LANGUAGE="en_US:en" \
     NSS_WRAPPER_LIB="/opt/bitnami/common/lib/libnss_wrapper.so" \
-    PATH="/opt/bitnami/postgresql/bin:$PATH"
+    PATH="/opt/bitnami/common/bin:/opt/bitnami/postgresql/bin:$PATH"
 
 VOLUME [ "/bitnami/postgresql", "/docker-entrypoint-initdb.d", "/docker-entrypoint-preinitdb.d" ]
 
@@ -66,3 +139,4 @@ EXPOSE 5432
 USER 1001
 ENTRYPOINT [ "/opt/bitnami/scripts/postgresql/entrypoint.sh" ]
 CMD [ "/opt/bitnami/scripts/postgresql/run.sh" ]
+
diff --git a/bitnami/postgresql/14/debian-11/rootfs/opt/bitnami/scripts/libpostgresql.sh b/bitnami/postgresql/14/debian-11/rootfs/opt/bitnami/scripts/libpostgresql.sh
index b66e8c5a581..2d200c6defb 100644
--- a/bitnami/postgresql/14/debian-11/rootfs/opt/bitnami/scripts/libpostgresql.sh
+++ b/bitnami/postgresql/14/debian-11/rootfs/opt/bitnami/scripts/libpostgresql.sh
@@ -385,8 +385,7 @@ postgresql_configure_replication_parameters() {
     postgresql_set_property "max_wal_senders" "16"
     if ((psql_major_version >= 13)); then
         postgresql_set_property "wal_keep_size" "128MB"
-    else
-        postgresql_set_property "wal_keep_segments" "12"
+        postgresql_set_property "wal_keep_segments" "14"
     fi
     postgresql_set_property "hot_standby" "on"
 }

