diff --git a/av/container/core.pyx b/av/container/core.pyx
index d21893c..493576f 100755
--- a/av/container/core.pyx
+++ b/av/container/core.pyx
@@ -20,7 +20,7 @@ from av.dictionary import Dictionary
 from av.logging import Capture as LogCapture
 
 
-ctypedef int64_t (*seek_func_t)(void *opaque, int64_t offset, int whence) nogil
+ctypedef int64_t (*seek_func_t)(void *opaque, int64_t offset, int whence) noexcept nogil
 
 
 cdef object _cinit_sentinel = object()
@@ -29,7 +29,7 @@ cdef object _cinit_sentinel = object()
 # We want to use the monotonic clock if it is available.
 cdef object clock = getattr(time, 'monotonic', time.time)
 
-cdef int interrupt_cb (void *p) nogil:
+cdef int interrupt_cb (void *p) noexcept nogil:
 
     cdef timeout_info info = dereference(<timeout_info*> p)
     if info.timeout < 0:  # timeout < 0 means no timeout
@@ -56,7 +56,7 @@ cdef int pyav_io_open(lib.AVFormatContext *s,
                       lib.AVIOContext **pb,
                       const char *url,
                       int flags,
-                      lib.AVDictionary **options) nogil:
+                      lib.AVDictionary **options) noexcept nogil:
     with gil:
         return pyav_io_open_gil(s, pb, url, flags, options)
 
@@ -65,7 +65,7 @@ cdef int pyav_io_open_gil(lib.AVFormatContext *s,
                           lib.AVIOContext **pb,
                           const char *url,
                           int flags,
-                          lib.AVDictionary **options):
+                          lib.AVDictionary **options) noexcept:
     cdef Container container
     cdef object file
     cdef PyIOFile pyio_file
@@ -104,13 +104,13 @@ cdef int pyav_io_open_gil(lib.AVFormatContext *s,
 
 
 cdef void pyav_io_close(lib.AVFormatContext *s,
-                        lib.AVIOContext *pb) nogil:
+                        lib.AVIOContext *pb) noexcept nogil:
     with gil:
         pyav_io_close_gil(s, pb)
 
 
 cdef void pyav_io_close_gil(lib.AVFormatContext *s,
-                            lib.AVIOContext *pb):
+                            lib.AVIOContext *pb) noexcept:
     cdef Container container
     try:
         container = <Container>dereference(s).opaque
diff --git a/av/container/pyio.pxd b/av/container/pyio.pxd
index b2a593b..0faeea4 100644
--- a/av/container/pyio.pxd
+++ b/av/container/pyio.pxd
@@ -2,11 +2,11 @@ from libc.stdint cimport int64_t, uint8_t
 cimport libav as lib
 
 
-cdef int pyio_read(void *opaque, uint8_t *buf, int buf_size) nogil
+cdef int pyio_read(void *opaque, uint8_t *buf, int buf_size) noexcept nogil
 
-cdef int pyio_write(void *opaque, uint8_t *buf, int buf_size) nogil
+cdef int pyio_write(void *opaque, uint8_t *buf, int buf_size) noexcept nogil
 
-cdef int64_t pyio_seek(void *opaque, int64_t offset, int whence) nogil
+cdef int64_t pyio_seek(void *opaque, int64_t offset, int whence) noexcept nogil
 
 cdef void pyio_close_gil(lib.AVIOContext *pb)
 
diff --git a/av/container/pyio.pyx b/av/container/pyio.pyx
index 17d977f..07224cd 100644
--- a/av/container/pyio.pyx
+++ b/av/container/pyio.pyx
@@ -4,7 +4,7 @@ cimport libav as lib
 from av.error cimport stash_exception
 
 
-ctypedef int64_t (*seek_func_t)(void *opaque, int64_t offset, int whence) nogil
+ctypedef int64_t (*seek_func_t)(void *opaque, int64_t offset, int whence) noexcept nogil
 
 
 cdef class PyIOFile(object):
@@ -76,11 +76,11 @@ cdef class PyIOFile(object):
                 lib.av_freep(&self.buffer)
 
 
-cdef int pyio_read(void *opaque, uint8_t *buf, int buf_size) nogil:
+cdef int pyio_read(void *opaque, uint8_t *buf, int buf_size) noexcept nogil:
     with gil:
         return pyio_read_gil(opaque, buf, buf_size)
 
-cdef int pyio_read_gil(void *opaque, uint8_t *buf, int buf_size):
+cdef int pyio_read_gil(void *opaque, uint8_t *buf, int buf_size) noexcept:
     cdef PyIOFile self
     cdef bytes res
     try:
@@ -95,11 +95,11 @@ cdef int pyio_read_gil(void *opaque, uint8_t *buf, int buf_size):
         return stash_exception()
 
 
-cdef int pyio_write(void *opaque, uint8_t *buf, int buf_size) nogil:
+cdef int pyio_write(void *opaque, uint8_t *buf, int buf_size) noexcept nogil:
     with gil:
         return pyio_write_gil(opaque, buf, buf_size)
 
-cdef int pyio_write_gil(void *opaque, uint8_t *buf, int buf_size):
+cdef int pyio_write_gil(void *opaque, uint8_t *buf, int buf_size) noexcept:
     cdef PyIOFile self
     cdef bytes bytes_to_write
     cdef int bytes_written
@@ -114,7 +114,7 @@ cdef int pyio_write_gil(void *opaque, uint8_t *buf, int buf_size):
         return stash_exception()
 
 
-cdef int64_t pyio_seek(void *opaque, int64_t offset, int whence) nogil:
+cdef int64_t pyio_seek(void *opaque, int64_t offset, int whence) noexcept nogil:
     # Seek takes the standard flags, but also a ad-hoc one which means that
     # the library wants to know how large the file is. We are generally
     # allowed to ignore this.
diff --git a/av/logging.pyx b/av/logging.pyx
index 1bdb7fa..2253560 100644
--- a/av/logging.pyx
+++ b/av/logging.pyx
@@ -208,7 +208,7 @@ cdef struct log_context:
     lib.AVClass *class_
     const char *name
 
-cdef const char *log_context_name(void *ptr) nogil:
+cdef const char *log_context_name(void *ptr) noexcept nogil:
     cdef log_context *obj = <log_context*>ptr
     return obj.name
 
@@ -229,7 +229,7 @@ cpdef log(int level, str name, str message):
     free(obj)
 
 
-cdef void log_callback(void *ptr, int level, const char *format, lib.va_list args) nogil:
+cdef void log_callback(void *ptr, int level, const char *format, lib.va_list args) noexcept nogil:
 
     cdef bint inited = lib.Py_IsInitialized()
     if not inited and not print_after_shutdown:
