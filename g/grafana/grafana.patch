diff --git a/packages/grafana-data/src/datetime/formats.test.ts b/packages/grafana-data/src/datetime/formats.test.ts
index f21e55e9bd..b60722ceda 100644
--- a/packages/grafana-data/src/datetime/formats.test.ts
+++ b/packages/grafana-data/src/datetime/formats.test.ts
@@ -14,7 +14,7 @@ describe('Date Formats', () => {
       ''
     );

-    expect(format).toBe('MM/DD/YYYY, hh:mm:ss A');
+    expect(format).toBe('MM/DD/YYYY, hh:mm:ss A');
   });
 });

@@ -52,8 +52,8 @@ describe('systemDateFormats', () => {

   it('contains correct browser-localized date formats', () => {
     systemDateFormats.useBrowserLocale();
-    expect(systemDateFormats.fullDate).toBe('MM/DD/YYYY, hh:mm:ss A');
-    expect(systemDateFormats.fullDateMS).toBe('MM/DD/YYYY, hh:mm:ss.SSS A');
+    expect(systemDateFormats.fullDate).toBe('MM/DD/YYYY, hh:mm:ss A');
+    expect(systemDateFormats.fullDateMS).toBe('MM/DD/YYYY, hh:mm:ss.SSS A');
     expect(systemDateFormats.interval.millisecond).toBe('HH:mm:ss.SSS');
     expect(systemDateFormats.interval.second).toBe('HH:mm:ss');
     expect(systemDateFormats.interval.minute).toBe('HH:mm');
diff --git a/public/app/plugins/datasource/prometheus/components/PromLink.test.tsx b/public/app/plugins/datasource/prometheus/components/PromLink.test.tsx
index c0e99277e2..bb115283ad 100644
--- a/public/app/plugins/datasource/prometheus/components/PromLink.test.tsx
+++ b/public/app/plugins/datasource/prometheus/components/PromLink.test.tsx
@@ -17,7 +17,7 @@ jest.mock('@grafana/data', () => ({

 const now = dateTime().valueOf();
 const intervalInSeconds = 60 * 5;
-const endInput = encodeURIComponent(dateTime(now).add(6, 'hours').format('Y-MM-DD HH:mm'));
+const endInput = encodeURIComponent(dateTime(now).add(5, 'hours').format('Y-MM-DD HH:mm'));

 const getPanelData = (panelDataOverrides?: Partial<PanelData>) => {
   const panelData = {
diff --git a/public/test/helpers/selectOptionInTest.ts b/public/test/helpers/selectOptionInTest.ts
index c1ff432dac..e52a1de8a0 100644
--- a/public/test/helpers/selectOptionInTest.ts
+++ b/public/test/helpers/selectOptionInTest.ts
@@ -7,7 +7,7 @@ import { byRole } from 'testing-library-selector';
 export const selectOptionInTest = async (
   input: HTMLElement,
   optionOrOptions: string | RegExp | Array<string | RegExp>
-) => await waitFor(() => select(input, optionOrOptions, { container: document.body }));
+) => await waitFor(() => select(input, optionOrOptions, { container: document.body }), { timeout: 10000 });

 // Finds the parent of the Select so you can assert if it has a value
 export const getSelectParent = (input: HTMLElement) =>
