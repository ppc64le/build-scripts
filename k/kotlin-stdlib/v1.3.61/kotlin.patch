diff --git a/benchmarks/build.gradle.kts b/benchmarks/build.gradle.kts
index 3dec72b854f..d7e3721be84 100644
--- a/benchmarks/build.gradle.kts
+++ b/benchmarks/build.gradle.kts
@@ -1,41 +1,14 @@
 import kotlinx.benchmark.gradle.benchmark

-val benchmarks_version = "0.2.0-dev-4"
-buildscript {
-    val benchmarks_version = "0.2.0-dev-4"
+val benchmarks_version = "0.3.0"

-    repositories {
-        val cacheRedirectorEnabled = findProperty("cacheRedirectorEnabled")?.toString()?.toBoolean() == true
-        if (cacheRedirectorEnabled) {
-            maven("https://cache-redirector.jetbrains.com/dl.bintray.com/kotlin/kotlinx")
-            maven("https://cache-redirector.jetbrains.com/dl.bintray.com/kotlin/kotlin-dev")
-        } else {
-            maven("https://dl.bintray.com/kotlin/kotlinx")
-            maven("https://dl.bintray.com/kotlin/kotlin-dev")
-        }
-    }
-    dependencies {
-        classpath("org.jetbrains.kotlinx:kotlinx.benchmark.gradle:$benchmarks_version")
-    }
-}
-
-apply(plugin = "kotlinx.benchmark")

 plugins {
     java
     kotlin("jvm")
+    id("org.jetbrains.kotlinx.benchmark") version "0.3.0"
 }

-repositories {
-    val cacheRedirectorEnabled = findProperty("cacheRedirectorEnabled")?.toString()?.toBoolean() == true
-    if (cacheRedirectorEnabled) {
-        maven("https://cache-redirector.jetbrains.com/dl.bintray.com/kotlin/kotlinx")
-        maven("https://cache-redirector.jetbrains.com/dl.bintray.com/kotlin/kotlin-dev")
-    } else {
-        maven("https://dl.bintray.com/kotlin/kotlinx")
-        maven("https://dl.bintray.com/kotlin/kotlin-dev")
-    }
-}

 dependencies {
     compile(kotlinStdlib())
@@ -43,9 +16,7 @@ dependencies {
     compile(project(":compiler:cli"))
     compile(intellijCoreDep()) { includeJars("intellij-core") }
     compile(jpsStandalone()) { includeJars("jps-model") }
-    Platform[192].orHigher {
-        compile(intellijPluginDep("java"))
-    }
+    compile(intellijPluginDep("java"))
     compile(intellijDep()) { includeIntellijCoreJarDependencies(project) }
     compile("org.jetbrains.kotlinx:kotlinx.benchmark.runtime-jvm:$benchmarks_version")
 }
diff --git a/build.gradle.kts b/build.gradle.kts
index 6e2e4c345bd..4b0e9e380e3 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -8,7 +8,7 @@ buildscript {
     extra["defaultSnapshotVersion"] = "1.3-SNAPSHOT"
     val cacheRedirectorEnabled = findProperty("cacheRedirectorEnabled")?.toString()?.toBoolean() == true

-    kotlinBootstrapFrom(BootstrapOption.BintrayBootstrap("1.3.60-dev-770", cacheRedirectorEnabled))
+    kotlinBootstrapFrom(BootstrapOption.BintrayBootstrap("1.3.60", cacheRedirectorEnabled))

     repositories {
         bootstrapKotlinRepo?.let(::maven)
diff --git a/konan/utils/src/org/jetbrains/kotlin/konan/target/KonanTarget.kt b/konan/utils/src/org/jetbrains/kotlin/konan/target/KonanTarget.kt
index 2ab9d0e0567..0bd81ef76f3 100644
--- a/konan/utils/src/org/jetbrains/kotlin/konan/target/KonanTarget.kt
+++ b/konan/utils/src/org/jetbrains/kotlin/konan/target/KonanTarget.kt
@@ -31,6 +31,7 @@ enum class Family(val exeSuffix:String, val dynamicPrefix: String, val dynamicSu

 enum class Architecture(val bitness: Int) {
     X64(64),
+    PPC64LE(64),
     X86(32),
     ARM64(64),
     ARM32(32),
@@ -62,6 +63,7 @@ sealed class KonanTarget(override val name: String, val family: Family, val arch
     object LINUX_MIPS32 :   KonanTarget( "linux_mips32",    Family.LINUX,   Architecture.MIPS32)
     object LINUX_MIPSEL32 : KonanTarget( "linux_mipsel32",  Family.LINUX,   Architecture.MIPSEL32)
     object WASM32 :         KonanTarget( "wasm32",          Family.WASM,    Architecture.WASM32)
+    object LINUX_PPC64LE :  KonanTarget("linux_ppc64le",    Family.LINUX,   Architecture.PPC64LE)

     // Tunable targets
     class ZEPHYR(val subName: String, val genericName: String = "zephyr") : KonanTarget("${genericName}_$subName", Family.ZEPHYR, Architecture.ARM32)
@@ -157,7 +159,8 @@ open class HostManager(protected val distribution: Distribution = Distribution()
         LINUX_X64, LINUX_ARM32_HFP, LINUX_ARM64, LINUX_MIPS32, LINUX_MIPSEL32,
         MINGW_X64, MINGW_X86,
         MACOS_X64,
-        WASM32)
+        WASM32,
+        LINUX_PPC64LE)

     private val zephyrSubtargets = distribution.availableSubTarget("zephyr").map { ZEPHYR(it) }

@@ -203,7 +206,8 @@ open class HostManager(protected val distribution: Distribution = Distribution()
             ANDROID_X64,
             ANDROID_ARM32,
             ANDROID_ARM64,
-            WASM32
+            WASM32,
+            LINUX_PPC64LE
         ),
         MINGW_X64 to setOf(
             MINGW_X64,
@@ -236,13 +240,19 @@ open class HostManager(protected val distribution: Distribution = Distribution()
             ANDROID_ARM32,
             ANDROID_ARM64,
             WASM32
-        )
+        ),
+        LINUX_PPC64LE to setOf(
+             LINUX_PPC64LE,
+             LINUX_X64
+         )
     )

     val enabledExperimentalByHost: Map<KonanTarget, Set<KonanTarget>> = mapOf(
         LINUX_X64 to setOf(MINGW_X86, MINGW_X64) + zephyrSubtargets,
         MACOS_X64 to setOf(MINGW_X86, MINGW_X64) + zephyrSubtargets,
-        MINGW_X64 to setOf<KonanTarget>() + zephyrSubtargets
+        MINGW_X64 to setOf<KonanTarget>() + zephyrSubtargets,
+        MACOS_ARM64 to emptySet(),
+        LINUX_PPC64LE to setOf(LINUX_PPC64LE, LINUX_X64) + zephyrSubtargets
     )

     val enabledByHost: Map<KonanTarget, Set<KonanTarget>> by lazy {
@@ -299,6 +309,7 @@ open class HostManager(protected val distribution: Distribution = Distribution()
                 "x86_64" -> "x86_64"
                 "amd64"  -> "x86_64"
                 "arm64"  -> "arm64"
+                "ppc64le" -> "ppc64le"
                 else -> throw TargetSupportException("Unknown hardware platform: ${javaArch}")
             }
         }
@@ -335,7 +346,8 @@ open class HostManager(protected val distribution: Distribution = Distribution()
             "ipad"        to "ios_arm64",
             "ios"         to "ios_arm64",
             "iphone_sim"  to "ios_x64",
-            "mingw"       to "mingw_x64"
+            "mingw"       to "mingw_x64",
+            "linux"       to "LINUX_PPC64LE"
         )

         private val targetAliases: Map<String, List<String>> by lazy {
