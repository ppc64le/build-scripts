diff --git a/build.gradle.kts b/build.gradle.kts
index 329961bf48e..6cf1bcba9a1 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -9,7 +9,7 @@ buildscript {
     extra["defaultSnapshotVersion"] = "1.3-SNAPSHOT"

     // when updating please also update JPS artifacts configuration: https://jetbrains.quip.com/zzGUAYSJ6gv3/JPS-Build-update-bootstrap
-    kotlinBootstrapFrom(BootstrapOption.TeamCity("1.3.50-eap-71", projectExtId = "Kotlin_1350_Compiler", onlySuccessBootstrap = false))
+    kotlinBootstrapFrom(BootstrapOption.TeamCity("1.3.50", projectExtId = "Kotlin_1350_Compiler", onlySuccessBootstrap = false))

     repositories {
         bootstrapKotlinRepo?.let(::maven)
diff --git a/compiler/psi/build.gradle.kts b/compiler/psi/build.gradle.kts
index c944dc97cfb..fe6db07cd01 100644
--- a/compiler/psi/build.gradle.kts
+++ b/compiler/psi/build.gradle.kts
@@ -39,4 +39,8 @@ sourceSets {
 ant.importBuild("buildLexer.xml")
 ant.properties["builddir"] = buildDir.absolutePath
-ant.properties["flex.classpath"] = jflexPath.asPath
+tasks.findByName("lexer")!!.apply {
+    doFirst {
+        ant.properties["flex.classpath"] = jflexPath.asPath
+    }
+}

diff --git a/konan/utils/src/org/jetbrains/kotlin/konan/target/KonanTarget.kt b/konan/utils/src/org/jetbrains/kotlin/konan/target/KonanTarget.kt
index cd048739c56..013d070376f 100644
--- a/konan/utils/src/org/jetbrains/kotlin/konan/target/KonanTarget.kt
+++ b/konan/utils/src/org/jetbrains/kotlin/konan/target/KonanTarget.kt
@@ -23,6 +23,7 @@ enum class Family(val exeSuffix:String, val dynamicPrefix: String, val dynamicSu

 enum class Architecture(val bitness: Int) {
     X64(64),
+    PPC64LE(64),
     X86(32),
     ARM64(64),
     ARM32(32),
@@ -46,6 +47,8 @@ sealed class KonanTarget(override val name: String, val family: Family, val arch
     object LINUX_MIPS32 :   KonanTarget( "linux_mips32",    Family.LINUX,   Architecture.MIPS32)
     object LINUX_MIPSEL32 : KonanTarget( "linux_mipsel32",  Family.LINUX,   Architecture.MIPSEL32)
     object WASM32 :         KonanTarget( "wasm32",          Family.WASM,    Architecture.WASM32)
+    object LINUX_PPC64LE :  KonanTarget("linux_ppc64le",    Family.LINUX,   Architecture.PPC64LE)
+

     // Tunable targets
     class ZEPHYR(val subName: String, val genericName: String = "zephyr") : KonanTarget("${genericName}_$subName", Family.ZEPHYR, Architecture.ARM32)
@@ -127,7 +130,8 @@ open class HostManager(protected val distribution: Distribution = Distribution()
         LINUX_X64, LINUX_ARM32_HFP, LINUX_ARM64, LINUX_MIPS32, LINUX_MIPSEL32,
         MINGW_X64, MINGW_X86,
         MACOS_X64,
-        WASM32)
+        WASM32,
+        LINUX_PPC64LE)

     private val zephyrSubtargets = distribution.availableSubTarget("zephyr").map { ZEPHYR(it) }

@@ -171,7 +175,8 @@ open class HostManager(protected val distribution: Distribution = Distribution()
             LINUX_MIPSEL32,
             ANDROID_ARM32,
             ANDROID_ARM64,
-            WASM32
+            WASM32,
+            LINUX_PPC64LE
         ),
         MINGW_X64 to setOf(
             MINGW_X64,
@@ -195,13 +200,19 @@ open class HostManager(protected val distribution: Distribution = Distribution()
             ANDROID_ARM32,
             ANDROID_ARM64,
             WASM32
-        )
-    )
+        ),
+       LINUX_PPC64LE to setOf(
+             LINUX_PPC64LE,
+             LINUX_X64
+   )
+)

     val enabledExperimentalByHost: Map<KonanTarget, Set<KonanTarget>> = mapOf(
         LINUX_X64 to setOf(MINGW_X86, MINGW_X64) + zephyrSubtargets,
         MACOS_X64 to setOf(MINGW_X86, MINGW_X64) + zephyrSubtargets,
-        MINGW_X64 to setOf<KonanTarget>() + zephyrSubtargets
+        MINGW_X64 to setOf<KonanTarget>() + zephyrSubtargets,
+        MACOS_ARM64 to emptySet(),
+        LINUX_PPC64LE to setOf(LINUX_PPC64LE, LINUX_X64) + zephyrSubtargets
     )

     val enabledByHost: Map<KonanTarget, Set<KonanTarget>> by lazy {
@@ -258,6 +269,7 @@ open class HostManager(protected val distribution: Distribution = Distribution()
                 "x86_64" -> "x86_64"
                 "amd64"  -> "x86_64"
                 "arm64"  -> "arm64"
+                "ppc64le" -> "ppc64le"
                 else -> throw TargetSupportException("Unknown hardware platform: ${javaArch}")
             }
         }
@@ -294,7 +306,8 @@ open class HostManager(protected val distribution: Distribution = Distribution()
             "ipad"        to "ios_arm64",
             "ios"         to "ios_arm64",
             "iphone_sim"  to "ios_x64",
-            "mingw"       to "mingw_x64"
+            "mingw"       to "mingw_x64",
+            "linux"       to "LINUX_PPC64LE"
         )

         private val targetAliases: Map<String, List<String>> by lazy {
@@ -326,4 +339,4 @@ private fun evaluatePresetName(targetName: String): String {
     return nameParts.asSequence().drop(1).joinToString("", nameParts.firstOrNull().orEmpty(), transform = String::capitalize)
 }

-class TargetSupportException (message: String = "", cause: Throwable? = null) : Exception(message, cause)
\ No newline at end of file
+class TargetSupportException (message: String = "", cause: Throwable? = null) : Exception(message, cause)
diff --git a/libraries/configureGradleTools.gradle b/libraries/configureGradleTools.gradle
index 3d82903e9ab..50c7b07794b 100644
--- a/libraries/configureGradleTools.gradle
+++ b/libraries/configureGradleTools.gradle
@@ -1,13 +1,4 @@
-import de.undercouch.gradle.tasks.download.Download

-buildscript {
-    repositories {
-        jcenter()
-    }
-    dependencies {
-        classpath 'de.undercouch:gradle-download-task:4.0.0'
-    }
-}

 configure([project(':kotlin-gradle-plugin'), project(':kotlin-allopen'), project(':kotlin-noarg'), project(':kotlin-serialization')]) { project ->
     apply plugin: 'com.gradle.plugin-publish'
@@ -20,19 +11,6 @@ configure([project(':kotlin-gradle-plugin'), project(':kotlin-allopen'), project
         }

         if (project.hasProperty("${project.name}-jar")) {
-            apply plugin: 'de.undercouch.download'
-
-            def artifactName = "${project.name}-${project.version}.jar"
-            def prebuiltJarFile = file("$buildDir/prebuiltJar/$artifactName")
-
-            task downloadPrebuiltJar(type: Download) {
-                def artifactUrlSuffix =
-                        project.group.split("\\.").join("/") + "/" + project.name + "/" + project.version + "/" + artifactName
-                src "https://repo.maven.apache.org/maven2/$artifactUrlSuffix"
-                dest prebuiltJarFile
-                overwrite true
-            }
-
             println("Using pre-built artifact for ${project.name}")
             configurations.archives.artifacts.clear()

@@ -44,7 +22,6 @@ configure([project(':kotlin-gradle-plugin'), project(':kotlin-allopen'), project
             }
         }

-        publishPlugins.dependsOn(downloadPrebuiltJar)
         publishPlugins.doFirst {
             assert !kotlinVersion.contains('SNAPSHOT')
         }
