diff --git a/examples/wheel/BUILD.bazel b/examples/wheel/BUILD.bazel
index 699bf68..838bf7d 100644
--- a/examples/wheel/BUILD.bazel
+++ b/examples/wheel/BUILD.bazel
@@ -250,6 +250,7 @@ py_wheel(
         ":aarch64-apple-darwin": "macosx_11_0_arm64",
         ":aarch64-unknown-linux-gnu": "manylinux2014_aarch64",
         ":x86_64-apple-darwin": "macosx_11_0_x86_64",  # this is typically macosx_10_9_x86_64?
+       ":ppc64le-unknown-linux-gnu": "manylinux2014_ppc64le",
         ":x86_64-pc-windows-msvc": "win_amd64",
         ":x86_64-unknown-linux-gnu": "manylinux2014_x86_64",
     }),
diff --git a/python/repositories.bzl b/python/repositories.bzl
index aab68eb..3fac612 100644
--- a/python/repositories.bzl
+++ b/python/repositories.bzl
@@ -201,10 +201,6 @@ def _python_repository_impl(rctx):
                     arguments = [repo_utils.which_checked(rctx, "id"), "-u"],
                 )
                 uid = int(stdout.strip())
-                if uid == 0:
-                    fail("The current user is root, please run as non-root when using the hermetic Python interpreter. See https://github.com/bazelbuild/rules_python/pull/713.")
-                else:
-                    fail("The current user has CAP_DAC_OVERRIDE set, please drop this capability when using the hermetic Python interpreter. See https://github.com/bazelbuild/rules_python/pull/713.")

     python_bin = "python.exe" if ("windows" in platform) else "bin/python3"

diff --git a/tests/integration/BUILD.bazel b/tests/integration/BUILD.bazel
deleted file mode 100644
index f48bd50..0000000
--- a/tests/integration/BUILD.bazel
+++ /dev/null
@@ -1,113 +0,0 @@
-# Copyright 2023 The Bazel Authors. All rights reserved.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#    http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-load("@rules_bazel_integration_test//bazel_integration_test:defs.bzl", "default_test_runner")
-load(":integration_test.bzl", "rules_python_integration_test")
-
-licenses(["notice"])
-
-_WORKSPACE_FLAGS = [
-    "--noenable_bzlmod",
-]
-
-_WORKSPACE_GAZELLE_PLUGIN_FLAGS = [
-    "--override_repository=rules_python_gazelle_plugin=../../../rules_python_gazelle_plugin",
-]
-
-_GAZELLE_PLUGIN_FLAGS = [
-    "--override_module=rules_python_gazelle_plugin=../../../rules_python_gazelle_plugin",
-]
-
-default_test_runner(
-    name = "workspace_test_runner",
-    bazel_cmds = [
-        "info {}".format(" ".join(_WORKSPACE_FLAGS)),
-        "test {} //...".format(" ".join(_WORKSPACE_FLAGS)),
-    ],
-    visibility = ["//visibility:public"],
-)
-
-default_test_runner(
-    name = "workspace_test_runner_gazelle_plugin",
-    bazel_cmds = [
-        "info {}".format(" ".join(_WORKSPACE_FLAGS + _WORKSPACE_GAZELLE_PLUGIN_FLAGS)),
-        "test {} //...".format(" ".join(_WORKSPACE_FLAGS + _WORKSPACE_GAZELLE_PLUGIN_FLAGS)),
-    ],
-    visibility = ["//visibility:public"],
-)
-
-default_test_runner(
-    name = "test_runner",
-    visibility = ["//visibility:public"],
-)
-
-default_test_runner(
-    name = "test_runner_gazelle_plugin",
-    bazel_cmds = [
-        "info {}".format(" ".join(_GAZELLE_PLUGIN_FLAGS)),
-        "test {} //...".format(" ".join(_GAZELLE_PLUGIN_FLAGS)),
-    ],
-    visibility = ["//visibility:public"],
-)
-
-# TODO: add compile_pip_requirements_test_from_external_repo
-
-rules_python_integration_test(
-    name = "pip_repository_entry_points_workspace_test",
-    timeout = "long",
-    bzlmod = False,
-    # The dependencies needed for this test are not cross-platform: https://github.com/bazelbuild/rules_python/issues/260
-    tags = ["fix-windows"],
-    workspace_path = "pip_repository_entry_points",
-)
-
-rules_python_integration_test(
-    name = "compile_pip_requirements_test",
-)
-
-rules_python_integration_test(
-    name = "compile_pip_requirements_workspace_test",
-    bzlmod = False,
-    workspace_path = "compile_pip_requirements",
-)
-
-rules_python_integration_test(
-    name = "ignore_root_user_error_test",
-)
-
-rules_python_integration_test(
-    name = "ignore_root_user_error_workspace_test",
-    bzlmod = False,
-    workspace_path = "ignore_root_user_error",
-)
-
-rules_python_integration_test(
-    name = "pip_parse_test",
-)
-
-rules_python_integration_test(
-    name = "pip_parse_workspace_test",
-    bzlmod = False,
-    workspace_path = "pip_parse",
-)
-
-rules_python_integration_test(
-    name = "py_cc_toolchain_registered_test",
-)
-
-rules_python_integration_test(
-    name = "py_cc_toolchain_registered_workspace_test",
-    bzlmod = False,
-    workspace_path = "py_cc_toolchain_registered",
-)
diff --git a/tests/integration/integration_test.bzl b/tests/integration/integration_test.bzl
deleted file mode 100644
index 16d6a5a..0000000
--- a/tests/integration/integration_test.bzl
+++ /dev/null
@@ -1,96 +0,0 @@
-# Copyright 2023 The Bazel Authors. All rights reserved.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#    http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-"""Helpers for running bazel-in-bazel integration tests."""
-
-load("@bazel_binaries//:defs.bzl", "bazel_binaries")
-load(
-    "@rules_bazel_integration_test//bazel_integration_test:defs.bzl",
-    "bazel_integration_tests",
-    "integration_test_utils",
-)
-
-def rules_python_integration_test(
-        name,
-        workspace_path = None,
-        bzlmod = True,
-        gazelle_plugin = False,
-        tags = None,
-        **kwargs):
-    """Runs a bazel-in-bazel integration test.
-
-    Args:
-        name: Name of the test. This gets appended by the bazel version.
-        workspace_path: The directory name. Defaults to `name` without the
-            `_test` suffix.
-        bzlmod: bool, default True. If true, run with bzlmod enabled, otherwise
-            disable bzlmod.
-        gazelle_plugin: Whether the test uses the gazelle plugin.
-        tags: Test tags.
-        **kwargs: Passed to the upstream `bazel_integration_tests` rule.
-    """
-    workspace_path = workspace_path or name.removesuffix("_test")
-    if bzlmod:
-        if gazelle_plugin:
-            test_runner = "//tests/integration:test_runner_gazelle_plugin"
-        else:
-            test_runner = "//tests/integration:test_runner"
-    elif gazelle_plugin:
-        test_runner = "//tests/integration:workspace_test_runner_gazelle_plugin"
-    else:
-        test_runner = "//tests/integration:workspace_test_runner"
-
-    # Because glob expansion happens at loading time, the bazel-* symlinks
-    # in the workspaces can recursively expand to tens-of-thousands of entries,
-    # which consumes lots of CPU and RAM and can render the system unusable.
-    # To help prevent that, cap the size of the glob expansion.
-    workspace_files = integration_test_utils.glob_workspace_files(workspace_path)
-    if len(workspace_files) > 1000:
-        fail("Workspace {} has too many files. This likely means a bazel-* " +
-             "symlink is being followed when it should be ignored.")
-
-    # bazel_integration_tests creates a separate file group target of the workspace
-    # files for each bazel version, even though the file groups are the same
-    # for each one.
-    # To avoid that, manually create a single filegroup once and re-use it.
-    native.filegroup(
-        name = name + "_workspace_files",
-        srcs = workspace_files + [
-            "//:distribution",
-        ],
-    )
-    kwargs.setdefault("size", "enormous")
-    bazel_integration_tests(
-        name = name,
-        workspace_path = workspace_path,
-        test_runner = test_runner,
-        bazel_versions = bazel_binaries.versions.all,
-        workspace_files = [name + "_workspace_files"],
-        # Override the tags so that the `manual` tag isn't applied.
-        tags = (tags or []) + [
-            # These tests are very heavy weight, so much so that only a couple
-            # can be run in parallel without harming their reliability,
-            # overall runtime, and the system's stability. Unfortunately,
-            # there doesn't appear to be a way to tell Bazel to limit their
-            # concurrency, only disable it entirely with exclusive.
-            "exclusive",
-            # The default_test_runner() assumes it can write to the user's home
-            # directory for caching purposes. Give it access.
-            "no-sandbox",
-            # The CI RBE setup can't successfully run these tests remotely.
-            "no-remote-exec",
-            # A special tag is used so CI can run them as a separate job.
-            "integration-test",
-        ],
-        **kwargs
-    )
diff --git a/tools/private/update_deps/update_coverage_deps.py b/tools/private/update_deps/update_coverage_deps.py
index 6b837b9..113bbeb 100755
--- a/tools/private/update_deps/update_coverage_deps.py
+++ b/tools/private/update_deps/update_coverage_deps.py
@@ -40,6 +40,7 @@ _supported_platforms = {
     # "win_amd64": "x86_64-pc-windows-msvc",
     "manylinux2014_x86_64": "x86_64-unknown-linux-gnu",
     "manylinux2014_aarch64": "aarch64-unknown-linux-gnu",
+    "manylinux2014_ppc64le": "ppc64le-unknown-linux-gnu",
     "macosx_11_0_arm64": "aarch64-apple-darwin",
     "macosx_10_9_x86_64": "x86_64-apple-darwin",
 }
