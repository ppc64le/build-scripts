diff --git a/cargo/cargo_build_script_runner/bin.rs b/cargo/cargo_build_script_runner/bin.rs
index 8730c809..54b8aa71 100644
--- a/cargo/cargo_build_script_runner/bin.rs
+++ b/cargo/cargo_build_script_runner/bin.rs
@@ -31,6 +31,7 @@ fn run_buildrs() -> Result<(), String> {
     // relative to themselves, to fail.
     let exec_root = env::current_dir().expect("Failed to get current directory");
     let manifest_dir_env = env::var("CARGO_MANIFEST_DIR").expect("CARGO_MANIFEST_DIR was not set");
+    let link_search_prefix = env::var("CARGO_LINKSEARCH_PREFIX").expect("CARGO_LINKSEARCH_PREFIX was not set");
     let rustc_env = env::var("RUSTC").expect("RUSTC was not set");
     let manifest_dir = exec_root.join(manifest_dir_env);
     let rustc = exec_root.join(&rustc_env);
@@ -187,7 +188,7 @@ fn run_buildrs() -> Result<(), String> {
         compile_flags,
         link_flags,
         link_search_paths,
-    } = BuildScriptOutput::outputs_to_flags(&buildrs_outputs, &exec_root.to_string_lossy());
+    } = BuildScriptOutput::outputs_to_flags(&buildrs_outputs, &exec_root.to_string_lossy(), &link_search_prefix);

     write(&compile_flags_file, compile_flags.as_bytes())
         .unwrap_or_else(|_| panic!("Unable to write file {:?}", compile_flags_file));
diff --git a/cargo/cargo_build_script_runner/lib.rs b/cargo/cargo_build_script_runner/lib.rs
index 8a1b7655..3828276b 100644
--- a/cargo/cargo_build_script_runner/lib.rs
+++ b/cargo/cargo_build_script_runner/lib.rs
@@ -176,7 +176,7 @@ impl BuildScriptOutput {
     }

     /// Convert a vector of [BuildScriptOutput] into a flagfile.
-    pub fn outputs_to_flags(outputs: &[BuildScriptOutput], exec_root: &str) -> CompileAndLinkFlags {
+    pub fn outputs_to_flags(outputs: &[BuildScriptOutput], exec_root: &str, link_search_prefix: &str) -> CompileAndLinkFlags {
         let mut compile_flags = Vec::new();
         let mut link_flags = Vec::new();
         let mut link_search_paths = Vec::new();
@@ -187,7 +187,7 @@ impl BuildScriptOutput {
                 BuildScriptOutput::Flags(e) => compile_flags.push(e.to_owned()),
                 BuildScriptOutput::LinkArg(e) => compile_flags.push(format!("-Clink-arg={e}")),
                 BuildScriptOutput::LinkLib(e) => link_flags.push(format!("-l{e}")),
-                BuildScriptOutput::LinkSearch(e) => link_search_paths.push(format!("-L{e}")),
+                BuildScriptOutput::LinkSearch(e) => link_search_paths.push(format!("-L{}/{e}", link_search_prefix)),
                 _ => {}
             }
         }
@@ -286,7 +286,7 @@ cargo:rustc-env=no_trailing_newline=true",
             "FOO=BAR\nBAR=FOO\nSOME_PATH=${pwd}/beep\nno_trailing_newline=true".to_owned()
         );
         assert_eq!(
-            BuildScriptOutput::outputs_to_flags(&result, "/some/absolute/path"),
+            BuildScriptOutput::outputs_to_flags(&result, "/some/absolute/path", "some/relative/path"),
             CompileAndLinkFlags {
                 // -Lblah was output as a rustc-flags, so even though it probably _should_ be a link
                 // flag, we don't treat it like one.
@@ -294,7 +294,7 @@ cargo:rustc-env=no_trailing_newline=true",
                     "-Lblah\n--cfg=feature=awesome\n-Clink-arg=-weak_framework\n-Clink-arg=Metal"
                         .to_owned(),
                 link_flags: "-lsdfsdf".to_owned(),
-                link_search_paths: "-L${pwd}/bleh".to_owned(),
+                link_search_paths: "-Lsome/relative/path/${pwd}/bleh".to_owned(),
             }
         );
     }
diff --git a/cargo/private/cargo_build_script.bzl b/cargo/private/cargo_build_script.bzl
index 675819d7..9d847292 100644
--- a/cargo/private/cargo_build_script.bzl
+++ b/cargo/private/cargo_build_script.bzl
@@ -119,6 +119,7 @@ def _cargo_build_script_impl(ctx):
     flags_out = ctx.actions.declare_file(ctx.label.name + ".flags")
     link_flags = ctx.actions.declare_file(ctx.label.name + ".linkflags")
     link_search_paths = ctx.actions.declare_file(ctx.label.name + ".linksearchpaths")  # rustc-link-search, propagated from transitive dependencies
+    link_search_prefix = "%s" % (ctx.label.workspace_root)
     manifest_dir = "%s.runfiles/%s/%s" % (script.path, ctx.label.workspace_name or ctx.workspace_name, ctx.label.package)
     compilation_mode_opt_level = get_compilation_mode_opts(ctx, toolchain).opt_level

@@ -140,6 +141,7 @@ def _cargo_build_script_impl(ctx):
     env.update({
         "CARGO_CRATE_NAME": name_to_crate_name(pkg_name),
         "CARGO_MANIFEST_DIR": manifest_dir,
+        "CARGO_LINKSEARCH_PREFIX": link_search_prefix,
         "CARGO_PKG_NAME": pkg_name,
         "HOST": toolchain.exec_triple.str,
         "NUM_JOBS": "1",
diff --git a/crate_universe/3rdparty/crates/BUILD.linux-raw-sys-0.3.8.bazel b/crate_universe/3rdparty/crates/BUILD.linux-raw-sys-0.3.8.bazel
index 4dff3b8c..ca935536 100644
--- a/crate_universe/3rdparty/crates/BUILD.linux-raw-sys-0.3.8.bazel
+++ b/crate_universe/3rdparty/crates/BUILD.linux-raw-sys-0.3.8.bazel
@@ -54,6 +54,9 @@ rust_library(
         "@rules_rust//rust/platform:x86_64-unknown-nixos-gnu": [
             "errno",  # x86_64-unknown-nixos-gnu
         ],
+        "@rules_rust//rust/platform:powerpc64le-unknown-linux-gnu": [
+            "errno",
+        ],
         "//conditions:default": [],
     }),
     crate_root = "src/lib.rs",
diff --git a/crate_universe/private/vendor_utils.bzl b/crate_universe/private/vendor_utils.bzl
index 71476c99..8b4e2082 100644
--- a/crate_universe/private/vendor_utils.bzl
+++ b/crate_universe/private/vendor_utils.bzl
@@ -10,6 +10,7 @@ _BUILDIFIER_SHA256S = {
     "buildifier-darwin-arm64": "4da23315f0dccabf878c8227fddbccf35545b23b3cb6225bfcf3107689cc4364",
     "buildifier-linux-amd64": "3ed7358c7c6a1ca216dc566e9054fd0b97a1482cb0b7e61092be887d42615c5d",
     "buildifier-linux-arm64": "c657c628fca72b7e0446f1a542231722a10ba4321597bd6f6249a5da6060b6ff",
+    "buildifier-linux-ppc64le": "3ed7358c7c6a1ca216dc566e9054fd0b97a1482cb0b7e61092be887d42615c5d",
     "buildifier-windows-amd64.exe": "45e13b2951e4c611d346dacdaf0aafaa484045a3e7300fbc5dd01a896a688177",
 }

@@ -54,6 +55,12 @@ def crates_vendor_deps_targets():
         visibility = ["//visibility:public"],
     )

+    native.config_setting(
+        name = "linux_ppc64le",
+        constraint_values = ["@platforms//os:linux", "@platforms//cpu:ppc"],
+        visibility = ["//visibility:public"],
+    )
+
     native.config_setting(
         name = "macos_amd64",
         constraint_values = ["@platforms//os:macos", "@platforms//cpu:x86_64"],
@@ -77,6 +84,7 @@ def crates_vendor_deps_targets():
         actual = select({
             ":linux_amd64": "@cargo_bazel.buildifier-linux-amd64//file",
             ":linux_arm64": "@cargo_bazel.buildifier-linux-arm64//file",
+            ":linux_ppc64le": "@cargo_bazel.buildifier-linux-amd64//file",
             ":macos_amd64": "@cargo_bazel.buildifier-darwin-amd64//file",
             ":macos_arm64": "@cargo_bazel.buildifier-darwin-arm64//file",
             ":windows": "@cargo_bazel.buildifier-windows-amd64.exe//file",
diff --git a/proto/prost/private/3rdparty/crates/BUILD.linux-raw-sys-0.3.8.bazel b/proto/prost/private/3rdparty/crates/BUILD.linux-raw-sys-0.3.8.bazel
index 59082ada..28f53129 100644
--- a/proto/prost/private/3rdparty/crates/BUILD.linux-raw-sys-0.3.8.bazel
+++ b/proto/prost/private/3rdparty/crates/BUILD.linux-raw-sys-0.3.8.bazel
@@ -54,6 +54,9 @@ rust_library(
         "@rules_rust//rust/platform:x86_64-unknown-nixos-gnu": [
             "errno",  # x86_64-unknown-nixos-gnu
         ],
+       "@rules_rust//rust/platform:powerpc64le-unknown-linux-gnu": [
+            "errno",  # powerpc64le-unknown-linux-gnu
+        ],
         "//conditions:default": [],
     }),
     crate_root = "src/lib.rs",
@@ -103,7 +106,8 @@ rust_library(
         "@rules_rust//rust/platform:x86_64-unknown-linux-gnu": [],
         "@rules_rust//rust/platform:x86_64-unknown-nixos-gnu": [],
         "@rules_rust//rust/platform:x86_64-unknown-none": [],
-        "//conditions:default": ["@platforms//:incompatible"],
+        "@rules_rust//rust/platform:powerpc64le-unknown-linux-gnu": [],
+       "//conditions:default": ["@platforms//:incompatible"],
     }),
     version = "0.3.8",
 )
diff --git a/rust/platform/platform.bzl b/rust/platform/platform.bzl
index edaa5869..ad0aaf44 100644
--- a/rust/platform/platform.bzl
+++ b/rust/platform/platform.bzl
@@ -15,6 +15,7 @@ _SUPPORTED_CPU_ARCH = [
     "armv7",
     "i686",
     "powerpc",
+    "powerpc64le",
     "s390x",
     "x86_64",
     "riscv32",
diff --git a/rust/platform/triple.bzl b/rust/platform/triple.bzl
index 1d07ce2e..65fd61d8 100644
--- a/rust/platform/triple.bzl
+++ b/rust/platform/triple.bzl
@@ -114,14 +114,14 @@ def get_host_triple(repository_ctx, abi = None):
     # Detect the host's cpu architecture

     supported_architectures = {
-        "linux": ["aarch64", "x86_64"],
+        "linux": ["aarch64", "x86_64", "powerpc64le"],
         "macos": ["aarch64", "x86_64"],
         "windows": ["aarch64", "x86_64"],
     }

     arch = repository_ctx.os.arch
-    if arch == "amd64":
-        arch = "x86_64"
+    if arch == "ppc64le":
+        arch = "powerpc64le"

     if "linux" in repository_ctx.os.name:
         _validate_cpu_architecture(arch, supported_architectures["linux"])
diff --git a/rust/platform/triple_mappings.bzl b/rust/platform/triple_mappings.bzl
index f8c59561..629a63a5 100644
--- a/rust/platform/triple_mappings.bzl
+++ b/rust/platform/triple_mappings.bzl
@@ -35,6 +35,7 @@ SUPPORTED_T2_PLATFORM_TRIPLES = [
     "i686-linux-android",
     "i686-unknown-freebsd",
     "powerpc-unknown-linux-gnu",
+    "powerpc64le-unknown-linux-gnu",
     "riscv32imc-unknown-none-elf",
     "riscv64gc-unknown-none-elf",
     "s390x-unknown-linux-gnu",
@@ -70,7 +71,7 @@ _CPU_ARCH_TO_BUILTIN_PLAT_SUFFIX = {
     "mipsel": None,
     "powerpc": "ppc",
     "powerpc64": None,
-    "powerpc64le": None,
+    "powerpc64le": "ppc",
     "riscv32": "riscv32",
     "riscv32imc": "riscv32",
     "riscv64": "riscv64",
diff --git a/rust/private/repository_utils.bzl b/rust/private/repository_utils.bzl
index 198385be..2ee79511 100644
--- a/rust/private/repository_utils.bzl
+++ b/rust/private/repository_utils.bzl
@@ -785,13 +785,16 @@ def load_arbitrary_tool(
     for subdirectory in tool_subdirectories:
         # As long as the sha256 value is consistent accross calls here the
         # cost of downloading an artifact is negated as by Bazel's caching.
-        result = ctx.download_and_extract(
-            urls,
-            sha256 = sha256,
-            auth = _make_auth_dict(ctx, urls),
-            stripPrefix = "{}/{}".format(tool_path, subdirectory),
-        )
-
+        tool_path = tool_path.replace("ppc64le", "powerpc64le")
+        subdirectory = subdirectory.replace("ppc64le", "powerpc64le")
+        for url in urls:
+            url = url.replace("ppc64le", "powerpc64le")
+            result = ctx.download_and_extract(
+                url,
+                sha256 = sha256,
+                auth = _make_auth_dict(ctx, urls),
+                stripPrefix = "{}/{}".format(tool_path, subdirectory),
+            )
         # In the event no sha256 was provided, set it to the value of the first
         # downloaded item so subsequent downloads use a cached artifact.
         if not sha256:
diff --git a/rust/repositories.bzl b/rust/repositories.bzl
index 8b16a586..8a6c516f 100644
--- a/rust/repositories.bzl
+++ b/rust/repositories.bzl
@@ -43,6 +43,7 @@ DEFAULT_TOOLCHAIN_TRIPLES = {
     "x86_64-pc-windows-msvc": "rust_windows_x86_64",
     "x86_64-unknown-freebsd": "rust_freebsd_x86_64",
     "x86_64-unknown-linux-gnu": "rust_linux_x86_64",
+    "powerpc64le-unknown-linux-gnu": "rust_linux_powerpc64le",
 }

 def rules_rust_dependencies():
diff --git a/tools/rust_analyzer/3rdparty/crates/BUILD.linux-raw-sys-0.3.8.bazel b/tools/rust_analyzer/3rdparty/crates/BUILD.linux-raw-sys-0.3.8.bazel
index 7bf652a2..ac8125d1 100644
--- a/tools/rust_analyzer/3rdparty/crates/BUILD.linux-raw-sys-0.3.8.bazel
+++ b/tools/rust_analyzer/3rdparty/crates/BUILD.linux-raw-sys-0.3.8.bazel
@@ -54,6 +54,9 @@ rust_library(
         "@rules_rust//rust/platform:x86_64-unknown-nixos-gnu": [
             "errno",  # x86_64-unknown-nixos-gnu
         ],
+       "@rules_rust//rust/platform:powerpc64le-unknown-linux-gnu": [
+            "errno",  # powerpc64le-unknown-linux-gnu
+        ],
         "//conditions:default": [],
     }),
     crate_root = "src/lib.rs",
@@ -81,7 +84,8 @@ rust_library(
         "@rules_rust//rust/platform:i686-unknown-freebsd": [],
         "@rules_rust//rust/platform:i686-unknown-linux-gnu": [],
         "@rules_rust//rust/platform:powerpc-unknown-linux-gnu": [],
-        "@rules_rust//rust/platform:s390x-unknown-linux-gnu": [],
+        "@rules_rust//rust/platform:powerpc64le-unknown-linux-gnu": [],
+       "@rules_rust//rust/platform:s390x-unknown-linux-gnu": [],
         "@rules_rust//rust/platform:x86_64-apple-darwin": [],
         "@rules_rust//rust/platform:x86_64-pc-windows-msvc": [],
         "@rules_rust//rust/platform:x86_64-unknown-freebsd": [],
diff --git a/test/unit/native_deps/native_deps_test.bzl b/test/unit/native_deps/native_deps_test.bzl
index b38748da..e8e393e1 100644
--- a/test/unit/native_deps/native_deps_test.bzl
+++ b/test/unit/native_deps/native_deps_test.bzl
@@ -161,6 +161,14 @@ def _bin_has_native_dep_and_alwayslink_test_impl(ctx):
                 "bazel-out/x64_windows-{}/bin/{}test/unit/native_deps/alwayslink.lo.lib".format(compilation_mode, workspace_prefix),
                 "-Wl,--no-whole-archive",
             ]
+    elif toolchain.target_arch == "powerpc64le":
+        want = [
+            "-lstatic=native_dep",
+            "-lnative_dep",
+            "-Wl,--whole-archive",
+            "bazel-out/ppc-{}/bin/{}test/unit/native_deps/libalwayslink.lo".format(compilation_mode, workspace_prefix),
+            "-Wl,--no-whole-archive",
+        ]
     else:
         want = [
             "-lstatic=native_dep",
@@ -207,6 +215,14 @@ def _cdylib_has_native_dep_and_alwayslink_test_impl(ctx):
                 "bazel-out/x64_windows-{}/bin/{}test/unit/native_deps/alwayslink.lo.lib".format(compilation_mode, workspace_prefix),
                 "-Wl,--no-whole-archive",
             ]
+    elif toolchain.target_arch == "powerpc64le":
+        want = [
+            "-lstatic=native_dep",
+            "-lnative_dep",
+            "-Wl,--whole-archive",
+            "bazel-out/ppc-{}/bin/{}test/unit/native_deps/libalwayslink.lo".format(compilation_mode, workspace_prefix),
+            "-Wl,--no-whole-archive",
+        ]
     else:
         want = [
             "-lstatic=native_dep{}".format(pic_suffix),

