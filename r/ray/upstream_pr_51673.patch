diff --git a/.bazelrc b/.bazelrc
index 5e47279322..5d5499d5f4 100644
--- a/.bazelrc
+++ b/.bazelrc
@@ -14,7 +14,7 @@ build:strict --incompatible_strict_action_env
 build --action_env=RAY_BUILD_ENV
 
 ###############################################################################
-# On       Windows, provide: BAZEL_SH, and BAZEL_LLVM (if using clang-cl)
+# On       Windows, provide: BAZEL_SH, and BAZEL_LLVM
 # On all platforms, provide: PYTHON3_BIN_PATH=python
 ###############################################################################
 build:windows --action_env=PATH
@@ -23,12 +23,12 @@ build --compilation_mode=opt
 # Using C++ 17 on all platforms.
 build:linux --host_cxxopt="-std=c++17"
 build:macos --host_cxxopt="-std=c++17"
-build:clang-cl --host_cxxopt="-std=c++17"
+build:clang-cl --host_cxxopt="-std:c++17"
 build:msvc-cl --host_cxxopt="/std:c++17"
 build:windows --host_cxxopt="/std:c++17"
 build:linux --cxxopt="-std=c++17"
 build:macos --cxxopt="-std=c++17"
-build:clang-cl --cxxopt="-std=c++17"
+build:clang-cl --cxxopt="-std:c++17"
 build:msvc-cl --cxxopt="/std:c++17"
 build:windows --cxxopt="/std:c++17"
 # This workaround is needed to prevent Bazel from compiling the same file twice (once PIC and once not).
@@ -55,10 +55,10 @@ build:windows --enable_runfiles
 # TODO(mehrdadn): Revert the "-\\.(asm|S)$" exclusion when this Bazel bug
 #                 for compiling assembly files is fixed on Windows:
 #                 https://github.com/bazelbuild/bazel/issues/8924
-# Warnings should be errors
-build:linux    --per_file_copt="-\\.(asm|S)$@-Werror"
-build:macos    --per_file_copt="-\\.(asm|S)$@-Werror"
-build:clang-cl --per_file_copt="-\\.(asm|S)$@-Werror"
+# Warnings should be errors, except for deprecated protobuf CreateMessage use
+build:linux    --per_file_copt="-\\.(asm|S)$@-Werror,-Wno-deprecated-declarations"
+build:macos    --per_file_copt="-\\.(asm|S)$@-Werror,-Wno-deprecated-declarations"
+build:clang-cl --per_file_copt="-\\.(asm|S)$@-Werror,-Wno-deprecated-declarations"
 build:msvc-cl     --per_file_copt="-\\.(asm|S)$@-WX"
 # Ignore warnings for protobuf generated files and external projects.
 build --per_file_copt="\\.pb\\.cc$@-w"
@@ -232,3 +232,5 @@ try-import %workspace%/.user.bazelrc
 build:macos --sandbox_block_path=/usr/local/
 # This option controls whether javac checks for missing direct dependencies.
 build --experimental_strict_java_deps=off
+build:clang-cl --per_file_copt="-external/com_github_redis_hiredis/ssl.c$@-Wno-parenthesis,-Wno-int-conversion"
+build --local_cpu_resources=HOST_CPUS*0.75
diff --git a/.buildkite/core.rayci.yml b/.buildkite/core.rayci.yml
index e5e1afca4e..069d9cf0d7 100644
--- a/.buildkite/core.rayci.yml
+++ b/.buildkite/core.rayci.yml
@@ -216,7 +216,7 @@ steps:
     tags:
       - python
       - skip-on-premerge
-    instance_type: medium
+    instance_type: large
     commands:
       - bazel run //ci/ray_ci:test_in_docker -- //python/ray/tests/... core
         --install-mask all-ray-libraries
diff --git a/WORKSPACE b/WORKSPACE
index e56c6a109b..a4686274b8 100644
--- a/WORKSPACE
+++ b/WORKSPACE
@@ -64,6 +64,7 @@ python_register_toolchains(
     name = "python3_9",
     python_version = "3.9",
     register_toolchains = False,
+    ignore_root_user_error = True,
 )
 
 load("@python3_9//:defs.bzl", python39 = "interpreter")
diff --git a/bazel/ray_deps_setup.bzl b/bazel/ray_deps_setup.bzl
index 5ece022cdb..76321f64a1 100644
--- a/bazel/ray_deps_setup.bzl
+++ b/bazel/ray_deps_setup.bzl
@@ -86,20 +86,16 @@ def auto_http_archive(
 def ray_deps_setup():
     # Explicitly bring in protobuf dependency to work around
     # https://github.com/ray-project/ray/issues/14117
-    # This is copied from grpc's bazel/grpc_deps.bzl
-    #
-    # Pinned grpc version: v23.4
     http_archive(
         name = "com_google_protobuf",
-        sha256 = "76a33e2136f23971ce46c72fd697cd94dc9f73d56ab23b753c3e16854c90ddfd",
-        strip_prefix = "protobuf-2c5fa078d8e86e5f4bd34e6f4c9ea9e8d7d4d44a",
+        sha256 = "b2340aa47faf7ef10a0328190319d3f3bee1b24f426d4ce8f4253b6f27ce16db",
+        strip_prefix = "protobuf-28.2",
         urls = [
-            "https://github.com/protocolbuffers/protobuf/archive/2c5fa078d8e86e5f4bd34e6f4c9ea9e8d7d4d44a.tar.gz",
+            "https://github.com/protocolbuffers/protobuf/archive/refs/tags/v28.2.tar.gz",
         ],
         patches = [
-            "@com_github_grpc_grpc//third_party:protobuf.patch",
+            "@io_ray//thirdparty/patches:protobuf-windows-const-nan.patch",
         ],
-        patch_args = ["-p1"],
     )
 
     # NOTE(lingxuan.zlx): 3rd party dependencies could be accessed, so it suggests
@@ -250,11 +246,15 @@ def ray_deps_setup():
     # TODO(owner): Upgrade abseil to latest version after protobuf updated, which requires to upgrade `rules_cc` first.
     auto_http_archive(
         name = "com_google_absl",
-        sha256 = "987ce98f02eefbaf930d6e38ab16aa05737234d7afbab2d5c4ea7adbe50c28ed",
-        strip_prefix = "abseil-cpp-20230802.1",
+        sha256 = "f50e5ac311a81382da7fa75b97310e4b9006474f9560ac46f54a9967f07d4ae3",
+        strip_prefix = "abseil-cpp-20240722.0",
         urls = [
-            "https://github.com/abseil/abseil-cpp/archive/refs/tags/20230802.1.tar.gz",
+            "https://github.com/abseil/abseil-cpp/archive/refs/tags/20240722.0.tar.gz",
+        ],
+        patches = [
+            "@io_ray//thirdparty/patches:abseil-gcc-undefined-sanitizer-compilation-fix.patch",
         ],
+        patch_args = ["-p1"],
     )
 
     # OpenCensus depends on jupp0r/prometheus-cpp
@@ -274,10 +274,11 @@ def ray_deps_setup():
     auto_http_archive(
         name = "com_github_grpc_grpc",
         # NOTE: If you update this, also update @boringssl's hash.
-        url = "https://github.com/grpc/grpc/archive/refs/tags/v1.57.1.tar.gz",
-        sha256 = "0762f809b9de845e6a7c809cabccad6aa4143479fd43b396611fe5a086c0aeeb",
+        url = "https://github.com/grpc/grpc/archive/refs/tags/v1.67.1.tar.gz",
+        sha256 = "d74f8e99a433982a12d7899f6773e285c9824e1d9a173ea1d1fb26c9bd089299",
         patches = [
             "@io_ray//thirdparty/patches:grpc-cython-copts.patch",
+            "@io_ray//thirdparty/patches:grpc-avoid-goaway-messages.patch",
             "@io_ray//thirdparty/patches:grpc-zlib-fdopen.patch",
             "@io_ray//thirdparty/patches:grpc-configurable-thread-count.patch",
         ],
@@ -319,13 +320,13 @@ def ray_deps_setup():
     http_archive(
         # This rule is used by @com_github_grpc_grpc, and using a GitHub mirror
         # provides a deterministic archive hash for caching. Explanation here:
-        # https://github.com/grpc/grpc/blob/1ff1feaa83e071d87c07827b0a317ffac673794f/bazel/grpc_deps.bzl#L189
         # Ensure this rule matches the rule used by grpc's bazel/grpc_deps.bzl
+        # https://github.com/grpc/grpc/blob/v1.67.1/bazel/grpc_deps.bzl#L33
         name = "boringssl",
-        sha256 = "0675a4f86ce5e959703425d6f9063eaadf6b61b7f3399e77a154c0e85bad46b1",
-        strip_prefix = "boringssl-342e805bc1f5dfdd650e3f031686d6c939b095d9",
+        sha256 = "c70d519e4ee709b7a74410a5e3a937428b8198d793a3d771be3dd2086ae167c8",
+        strip_prefix = "boringssl-b8b3e6e11166719a8ebfa43c0cde9ad7d57a84f6",
         urls = [
-            "https://github.com/google/boringssl/archive/342e805bc1f5dfdd650e3f031686d6c939b095d9.tar.gz",
+            "https://github.com/google/boringssl/archive/b8b3e6e11166719a8ebfa43c0cde9ad7d57a84f6.tar.gz",
         ],
     )
 
@@ -341,6 +342,7 @@ def ray_deps_setup():
         urls = ["https://github.com/protocolbuffers/protobuf/archive/v3.19.4.tar.gz"],
         sha256 = "3bd7828aa5af4b13b99c191e8b1e884ebfa9ad371b0ce264605d347f135d2568",
     )
+
     auto_http_archive(
         name = "rules_proto_grpc",
         url = "https://github.com/rules-proto-grpc/rules_proto_grpc/archive/a74fef39c5fe636580083545f76d1eab74f6450d.tar.gz",
diff --git a/python/ray/tests/test_basic.py b/python/ray/tests/test_basic.py
index 6300b1e7aa..03b4572b1e 100644
--- a/python/ray/tests/test_basic.py
+++ b/python/ray/tests/test_basic.py
@@ -266,7 +266,7 @@ def test_worker_thread_count(monkeypatch, shutdown_only):
         ray.get(actor.get_thread_count.remote())
     # Lowering these numbers in this assert should be celebrated,
     # increasing these numbers should be scrutinized
-    assert ray.get(actor.get_thread_count.remote()) in {24, 25}
+    assert ray.get(actor.get_thread_count.remote()) in {24, 25, 26}
 
 
 # https://github.com/ray-project/ray/issues/7287
diff --git a/src/ray/core_worker/tests/task_event_buffer_export_event_test.cc b/src/ray/core_worker/tests/task_event_buffer_export_event_test.cc
index 9e6345bd95..99f6f0cafb 100644
--- a/src/ray/core_worker/tests/task_event_buffer_export_event_test.cc
+++ b/src/ray/core_worker/tests/task_event_buffer_export_event_test.cc
@@ -153,7 +153,7 @@ TEST_F(TaskEventTestWriteExport, TestWriteTaskExportEvents) {
   auto task_ids = GenTaskIDs(num_events);
   google::protobuf::util::JsonPrintOptions options;
   options.preserve_proto_field_names = true;
-  options.always_print_primitive_fields = true;
+  options.always_print_fields_with_no_presence = true;
 
   std::vector<SourceTypeVariant> source_types = {
       rpc::ExportEvent_SourceType::ExportEvent_SourceType_EXPORT_TASK};
diff --git a/src/ray/raylet_client/raylet_client.cc b/src/ray/raylet_client/raylet_client.cc
index bfb8b0665d..0c7918bf69 100644
--- a/src/ray/raylet_client/raylet_client.cc
+++ b/src/ray/raylet_client/raylet_client.cc
@@ -43,8 +43,7 @@ void RayletClient::RequestWorkerLease(
     const int64_t backlog_size,
     const bool is_selected_based_on_locality) {
   google::protobuf::Arena arena;
-  auto request =
-      google::protobuf::Arena::CreateMessage<rpc::RequestWorkerLeaseRequest>(&arena);
+  auto request = google::protobuf::Arena::Create<rpc::RequestWorkerLeaseRequest>(&arena);
   // The unsafe allocating here is actually safe because the life-cycle of
   // task_spec is longer than request.
   // Request will be sent before the end of this call, and after that, it won't be
diff --git a/src/ray/rpc/server_call.h b/src/ray/rpc/server_call.h
index a2e7cd2cee..f3dea61850 100644
--- a/src/ray/rpc/server_call.h
+++ b/src/ray/rpc/server_call.h
@@ -193,7 +193,7 @@ class ServerCallImpl : public ServerCall {
         cluster_id_(cluster_id),
         start_time_(0),
         record_metrics_(record_metrics) {
-    reply_ = google::protobuf::Arena::CreateMessage<Reply>(&arena_);
+    reply_ = google::protobuf::Arena::Create<Reply>(&arena_);
     // TODO(Yi Cheng) call_name_ sometimes get corrunpted due to memory issues.
     RAY_CHECK(!call_name_.empty()) << "Call name is empty";
     if (record_metrics_) {
diff --git a/src/ray/util/event.cc b/src/ray/util/event.cc
index e704c86847..08a79db77f 100644
--- a/src/ray/util/event.cc
+++ b/src/ray/util/event.cc
@@ -138,7 +138,7 @@ std::string LogEventReporter::ExportEventToString(const rpc::ExportEvent &export
   google::protobuf::util::JsonPrintOptions options;
   options.preserve_proto_field_names = true;
   // Required so enum with value 0 is not omitted
-  options.always_print_primitive_fields = true;
+  options.always_print_fields_with_no_presence = true;
   if (export_event.has_task_event_data()) {
     RAY_CHECK(google::protobuf::util::MessageToJsonString(
                   export_event.task_event_data(), &event_data_as_string, options)
diff --git a/thirdparty/patches/grpc-configurable-thread-count.patch b/thirdparty/patches/grpc-configurable-thread-count.patch
index 26387f51a5..f1ae73ec4a 100644
--- a/thirdparty/patches/grpc-configurable-thread-count.patch
+++ b/thirdparty/patches/grpc-configurable-thread-count.patch
@@ -1,7 +1,6 @@
-diff --git src/core/lib/gpr/linux/cpu.cc b/src/core/lib/gpr/linux/cpu.cc
-index 670ca6551c..043021dc4a 100644
---- src/core/lib/gpr/linux/cpu.cc
-+++ src/core/lib/gpr/linux/cpu.cc
+diff --git src/core/util/linux/cpu.cc src/core/util/linux/cpu.cc
+--- src/core/util/linux/cpu.cc
++++ src/core/util/linux/cpu.cc
 @@ -24,6 +24,7 @@
  
  #ifdef GPR_CPU_LINUX
@@ -10,7 +9,7 @@ index 670ca6551c..043021dc4a 100644
  #include <errno.h>
  #include <sched.h>
  #include <string.h>
-@@ -49,7 +50,17 @@ static void init_num_cpus() {
+@@ -50,7 +51,17 @@ static void init_num_cpus() {
  #endif
    // This must be signed. sysconf returns -1 when the number cannot be
    // determined
@@ -27,5 +26,5 @@ index 670ca6551c..043021dc4a 100644
 +      ncpus = static_cast<int>(sysconf(_SC_NPROCESSORS_CONF));
 +  }
    if (ncpus < 1) {
-     gpr_log(GPR_ERROR, "Cannot determine number of CPUs: assuming 1");
+     LOG(ERROR) << "Cannot determine number of CPUs: assuming 1";
      ncpus = 1;
diff --git a/thirdparty/patches/grpc-zlib-fdopen.patch b/thirdparty/patches/grpc-zlib-fdopen.patch
index 83dfba2b95..e69de29bb2 100644
--- a/thirdparty/patches/grpc-zlib-fdopen.patch
+++ b/thirdparty/patches/grpc-zlib-fdopen.patch
@@ -1,13 +0,0 @@
-diff -u bazel/grpc_deps.bzl
---- bazel/grpc_deps.bzl
-+++ bazel/grpc_deps.bzl
-@@ -238,6 +238,9 @@
-                 "https://storage.googleapis.com/grpc-bazel-mirror/github.com/madler/zlib/archive/04f42ceca40f73e2978b50e93806c2a18c1281fc.tar.gz",
-                 "https://github.com/madler/zlib/archive/04f42ceca40f73e2978b50e93806c2a18c1281fc.tar.gz",
-             ],
-+            patches = [
-+                "@io_ray//thirdparty/patches:zlib-fdopen.patch",
-+            ]
-         )
- 
-     if "com_google_protobuf" not in native.existing_rules():
diff --git a/thirdparty/patches/abseil-gcc-undefined-sanitizer-compilation-fix.patch b/thirdparty/patches/abseil-gcc-undefined-sanitizer-compilation-fix.patch
new file mode 100644
index 0000000000..3088fdf44b
--- /dev/null
+++ b/thirdparty/patches/abseil-gcc-undefined-sanitizer-compilation-fix.patch
@@ -0,0 +1,305 @@
+From 8f23ddaab4c32bdd4e9cf91db25896f0cc58ca12 Mon Sep 17 00:00:00 2001
+From: Petr Matrix at Akamai Technologies
+Date: Sun, 30 Mar 2025 22:30:04 +0300
+Subject: [PATCH] abseil undefined sanitizer compilation fix
+See https://github.com/abseil/abseil-cpp/issues/1634. The project
+considers this a bug in gcc, maybe this patch can be dropped after
+updating gcc
+---
+ absl/container/flat_hash_map.h                      |  7 ++++---
+ absl/container/flat_hash_set.h                      |  5 +++--
+ absl/container/internal/hash_policy_traits.h        |  4 ++--
+ absl/container/internal/hash_policy_traits_test.cc  | 13 +++++++------
+ .../internal/raw_hash_set_allocator_test.cc         |  5 +++--
+ absl/container/internal/raw_hash_set_benchmark.cc   |  9 +++++----
+ .../internal/raw_hash_set_probe_benchmark.cc        |  3 ++-
+ absl/container/internal/raw_hash_set_test.cc        | 13 +++++++------
+ absl/container/node_hash_map.h                      |  7 ++++---
+ absl/container/node_hash_set.h                      |  5 +++--
+ 10 files changed, 40 insertions(+), 31 deletions(-)
+
+diff --git a/absl/container/flat_hash_map.h b/absl/container/flat_hash_map.h
+index ebd9ed6..3751ead 100644
+--- a/absl/container/flat_hash_map.h
++++ b/absl/container/flat_hash_map.h
+@@ -34,6 +34,7 @@
+
+ #include <cstddef>
+ #include <memory>
++#include <optional>
+ #include <type_traits>
+ #include <utility>
+
+@@ -642,10 +643,10 @@ struct FlatHashMapPolicy {
+   }
+
+   template <class Hash>
+-  static constexpr HashSlotFn get_hash_slot_fn() {
++  static constexpr std::optional<HashSlotFn> get_hash_slot_fn() {
+     return memory_internal::IsLayoutCompatible<K, V>::value
+-               ? &TypeErasedApplyToSlotFn<Hash, K>
+-               : nullptr;
++               ? std::optional<HashSlotFn>(&TypeErasedApplyToSlotFn<Hash, K>)
++               : std::nullopt;
+   }
+
+   static size_t space_used(const slot_type*) { return 0; }
+diff --git a/absl/container/flat_hash_set.h b/absl/container/flat_hash_set.h
+index a3e36e0..905f01a 100644
+--- a/absl/container/flat_hash_set.h
++++ b/absl/container/flat_hash_set.h
+@@ -34,6 +34,7 @@
+
+ #include <cstddef>
+ #include <memory>
++#include <optional>
+ #include <type_traits>
+ #include <utility>
+
+@@ -540,8 +541,8 @@ struct FlatHashSetPolicy {
+   static size_t space_used(const T*) { return 0; }
+
+   template <class Hash>
+-  static constexpr HashSlotFn get_hash_slot_fn() {
+-    return &TypeErasedApplyToSlotFn<Hash, T>;
++  static constexpr std::optional<HashSlotFn> get_hash_slot_fn() {
++    return std::optional<HashSlotFn>(&TypeErasedApplyToSlotFn<Hash, T>);
+   }
+ };
+ }  // namespace container_internal
+diff --git a/absl/container/internal/hash_policy_traits.h b/absl/container/internal/hash_policy_traits.h
+index ad835d6..ee3f1ee 100644
+--- a/absl/container/internal/hash_policy_traits.h
++++ b/absl/container/internal/hash_policy_traits.h
+@@ -160,9 +160,9 @@ struct hash_policy_traits : common_policy_traits<Policy> {
+ // silent error: the address of * will never be NULL [-Werror=address]
+ #pragma GCC diagnostic ignored "-Waddress"
+ #endif
+-    return Policy::template get_hash_slot_fn<Hash>() == nullptr
++    return !Policy::template get_hash_slot_fn<Hash>().has_value()
+                ? &hash_slot_fn_non_type_erased<Hash>
+-               : Policy::template get_hash_slot_fn<Hash>();
++               : Policy::template get_hash_slot_fn<Hash>().value();
+ #if defined(__GNUC__) && !defined(__clang__)
+ #pragma GCC diagnostic pop
+ #endif
+diff --git a/absl/container/internal/hash_policy_traits_test.cc b/absl/container/internal/hash_policy_traits_test.cc
+index 2d2c7c2..6655263 100644
+--- a/absl/container/internal/hash_policy_traits_test.cc
++++ b/absl/container/internal/hash_policy_traits_test.cc
+@@ -18,6 +18,7 @@
+ #include <functional>
+ #include <memory>
+ #include <new>
++#include <optional>
+
+ #include "gmock/gmock.h"
+ #include "gtest/gtest.h"
+@@ -46,8 +47,8 @@ struct PolicyWithoutOptionalOps {
+   static std::function<Slot&(Slot*)> value;
+
+   template <class Hash>
+-  static constexpr HashSlotFn get_hash_slot_fn() {
+-    return nullptr;
++  static constexpr std::optional<HashSlotFn> get_hash_slot_fn() {
++    return std::nullopt;
+   }
+ };
+
+@@ -100,8 +101,8 @@ struct PolicyNoHashFn {
+   }
+
+   template <class Hash>
+-  static constexpr HashSlotFn get_hash_slot_fn() {
+-    return nullptr;
++  static constexpr std::optional<HashSlotFn> get_hash_slot_fn() {
++    return std::nullopt;
+   }
+ };
+
+@@ -109,8 +110,8 @@ size_t* PolicyNoHashFn::apply_called_count;
+
+ struct PolicyCustomHashFn : PolicyNoHashFn {
+   template <class Hash>
+-  static constexpr HashSlotFn get_hash_slot_fn() {
+-    return &TypeErasedApplyToSlotFn<Hash, int>;
++  static constexpr std::optional<HashSlotFn> get_hash_slot_fn() {
++    return std::optional<HashSlotFn>(&TypeErasedApplyToSlotFn<Hash, int>);
+   }
+ };
+
+diff --git a/absl/container/internal/raw_hash_set_allocator_test.cc b/absl/container/internal/raw_hash_set_allocator_test.cc
+index 7e7a506..5990789 100644
+--- a/absl/container/internal/raw_hash_set_allocator_test.cc
++++ b/absl/container/internal/raw_hash_set_allocator_test.cc
+@@ -17,6 +17,7 @@
+ #include <functional>
+ #include <limits>
+ #include <memory>
++#include <optional>
+ #include <ostream>
+ #include <set>
+ #include <type_traits>
+@@ -181,8 +182,8 @@ struct Policy {
+   static slot_type& element(slot_type* slot) { return *slot; }
+
+   template <class Hash>
+-  static constexpr HashSlotFn get_hash_slot_fn() {
+-    return nullptr;
++  static constexpr std::optional<HashSlotFn> get_hash_slot_fn() {
++    return std::nullopt;
+   }
+ };
+
+diff --git a/absl/container/internal/raw_hash_set_benchmark.cc b/absl/container/internal/raw_hash_set_benchmark.cc
+index 424b72c..db052da 100644
+--- a/absl/container/internal/raw_hash_set_benchmark.cc
++++ b/absl/container/internal/raw_hash_set_benchmark.cc
+@@ -19,6 +19,7 @@
+ #include <cstdint>
+ #include <limits>
+ #include <numeric>
++#include <optional>
+ #include <random>
+ #include <string>
+ #include <tuple>
+@@ -65,8 +66,8 @@ struct IntPolicy {
+   }
+
+   template <class Hash>
+-  static constexpr HashSlotFn get_hash_slot_fn() {
+-    return nullptr;
++  static constexpr std::optional<HashSlotFn> get_hash_slot_fn() {
++    return std::nullopt;
+   }
+ };
+
+@@ -128,8 +129,8 @@ class StringPolicy {
+   }
+
+   template <class Hash>
+-  static constexpr HashSlotFn get_hash_slot_fn() {
+-    return nullptr;
++  static constexpr std::optional<HashSlotFn> get_hash_slot_fn() {
++    return std::nullopt;
+   }
+ };
+
+diff --git a/absl/container/internal/raw_hash_set_probe_benchmark.cc b/absl/container/internal/raw_hash_set_probe_benchmark.cc
+index 8f36305..bfd1976 100644
+--- a/absl/container/internal/raw_hash_set_probe_benchmark.cc
++++ b/absl/container/internal/raw_hash_set_probe_benchmark.cc
+@@ -16,6 +16,7 @@
+ // distributions, all using the default hash function for swisstable.
+
+ #include <memory>
++#include <optional>
+ #include <regex>  // NOLINT
+ #include <vector>
+
+@@ -73,7 +74,7 @@ struct Policy {
+
+   template <class Hash>
+   static constexpr auto get_hash_slot_fn() {
+-    return nullptr;
++    return set::nullopt;
+   }
+ };
+
+diff --git a/absl/container/internal/raw_hash_set_test.cc b/absl/container/internal/raw_hash_set_test.cc
+index f1257d4..45d1692 100644
+--- a/absl/container/internal/raw_hash_set_test.cc
++++ b/absl/container/internal/raw_hash_set_test.cc
+@@ -28,6 +28,7 @@
+ #include <map>
+ #include <memory>
+ #include <numeric>
++#include <optional>
+ #include <ostream>
+ #include <random>
+ #include <string>
+@@ -523,8 +524,8 @@ struct ValuePolicy {
+   }
+
+   template <class Hash>
+-  static constexpr HashSlotFn get_hash_slot_fn() {
+-    return nullptr;
++  static constexpr std::optional<HashSlotFn> get_hash_slot_fn() {
++    return std::nullopt;
+   }
+
+   static constexpr bool soo_enabled() { return kSoo; }
+@@ -631,8 +632,8 @@ class StringPolicy {
+   }
+
+   template <class Hash>
+-  static constexpr HashSlotFn get_hash_slot_fn() {
+-    return nullptr;
++  static constexpr std::optional<HashSlotFn> get_hash_slot_fn() {
++    return std::nullopt;
+   }
+ };
+
+@@ -1114,8 +1115,8 @@ struct DecomposePolicy {
+   }
+
+   template <class Hash>
+-  static constexpr HashSlotFn get_hash_slot_fn() {
+-    return nullptr;
++  static constexpr std::optional<HashSlotFn> get_hash_slot_fn() {
++    return std::nullopt;
+   }
+ };
+
+diff --git a/absl/container/node_hash_map.h b/absl/container/node_hash_map.h
+index 5615e49..34b6a93 100644
+--- a/absl/container/node_hash_map.h
++++ b/absl/container/node_hash_map.h
+@@ -40,6 +40,7 @@
+
+ #include <cstddef>
+ #include <memory>
++#include <optional>
+ #include <type_traits>
+ #include <utility>
+
+@@ -640,10 +641,10 @@ class NodeHashMapPolicy
+   static const Value& value(const value_type* elem) { return elem->second; }
+
+   template <class Hash>
+-  static constexpr HashSlotFn get_hash_slot_fn() {
++  static constexpr std::optional<HashSlotFn> get_hash_slot_fn() {
+     return memory_internal::IsLayoutCompatible<Key, Value>::value
+-               ? &TypeErasedDerefAndApplyToSlotFn<Hash, Key>
+-               : nullptr;
++               ? std::optional<HashSlotFn>(&TypeErasedDerefAndApplyToSlotFn<Hash, Key>)
++               : std::nullopt;
+   }
+ };
+ }  // namespace container_internal
+diff --git a/absl/container/node_hash_set.h b/absl/container/node_hash_set.h
+index 53435ae..40cd71c 100644
+--- a/absl/container/node_hash_set.h
++++ b/absl/container/node_hash_set.h
+@@ -39,6 +39,7 @@
+
+ #include <cstddef>
+ #include <memory>
++#include <optional>
+ #include <type_traits>
+
+ #include "absl/algorithm/container.h"
+@@ -534,8 +535,8 @@ struct NodeHashSetPolicy
+   static size_t element_space_used(const T*) { return sizeof(T); }
+
+   template <class Hash>
+-  static constexpr HashSlotFn get_hash_slot_fn() {
+-    return &TypeErasedDerefAndApplyToSlotFn<Hash, T>;
++  static constexpr std::optional<HashSlotFn> get_hash_slot_fn() {
++    return std::optional<HashSlotFn>(&TypeErasedDerefAndApplyToSlotFn<Hash, T>);
+   }
+ };
+ }  // namespace container_internal
+--
+2.43.0
+
diff --git a/thirdparty/patches/grpc-avoid-goaway-messages.patch b/thirdparty/patches/grpc-avoid-goaway-messages.patch
new file mode 100644
index 0000000000..0cd558aa0a
--- /dev/null
+++ b/thirdparty/patches/grpc-avoid-goaway-messages.patch
@@ -0,0 +1,19 @@
+diff --git a/src/core/ext/transport/chttp2/transport/chttp2_transport.cc b/src/core/ext/transport/chttp2/transport/chttp2_transport.cc
+index d3c5d994c1..1edc7ae29d 100644
+--- src/core/ext/transport/chttp2/transport/chttp2_transport.cc
++++ src/core/ext/transport/chttp2/transport/chttp2_transport.cc
+@@ -1176,13 +1176,6 @@ void grpc_chttp2_add_incoming_goaway(grpc_chttp2_transport* t,
+   GRPC_TRACE_LOG(http, INFO)
+       << "transport " << t << " got goaway with last stream id "
+       << last_stream_id;
+-  // We want to log this irrespective of whether http tracing is enabled if we
+-  // received a GOAWAY with a non NO_ERROR code.
+-  if (goaway_error != GRPC_HTTP2_NO_ERROR) {
+-    LOG(INFO) << t->peer_string.as_string_view() << ": Got goaway ["
+-              << goaway_error
+-              << "] err=" << grpc_core::StatusToString(t->goaway_error);
+-  }
+   if (t->is_client) {
+     cancel_unstarted_streams(t, t->goaway_error, false);
+     // Cancel all unseen streams
+

diff --git a/thirdparty/patches/protobuf-windows-const-nan.patch b/thirdparty/patches/protobuf-windows-const-nan.patch
new file mode 100644
index 0000000000..99b548f49f
--- /dev/null
+++ b/thirdparty/patches/protobuf-windows-const-nan.patch
@@ -0,0 +1,46 @@
+diff -u upb/message/internal/message.c /tmp/message.c
+--- upb/message/internal/message.c
++++ upb/message/internal/message.c
+@@ -19,6 +19,26 @@
+
+ const float kUpb_FltInfinity = INFINITY;
+ const double kUpb_Infinity = INFINITY;
+-const double kUpb_NaN = NAN;
++
++// The latest win32 SDKs have an invalid definition of NAN.
++// https://developercommunity.visualstudio.com/t/NAN-is-no-longer-compile-time-constant-i/10688907
++//
++// Unfortunately, the `0.0 / 0.0` workaround doesn't work in Clang under C23, so
++// try __builtin_nan first, if that exists.
++#ifdef _WIN32
++#ifdef __has_builtin
++#if __has_builtin(__builtin_nan)
++#define UPB_NAN __builtin_nan("0")
++#endif
++#endif
++#ifndef UPB_NAN
++#define UPB_NAN 0.0 / 0.0
++#endif
++#else
++// For !_WIN32, assume math.h works.
++#define UPB_NAN NAN
++#endif
++const double kUpb_NaN = UPB_NAN;
++
+
+ bool UPB_PRIVATE(_upb_Message_Realloc)(struct upb_Message* msg, size_t need,
+
+diff --git .bazelrc .bazelrc
+--- .bazelrc
++++ .bazelrc
+@@ -1,4 +1,9 @@
+-build --cxxopt=-std=c++17 --host_cxxopt=-std=c++17
++build --enable_platform_specific_config
++build:linux --cxxopt=-std=c++17 --host_cxxopt=-std=c++17
++build:macos --cxxopt=-std=c++17 --host_cxxopt=-std=c++17
++build:windows --compiler=clang-cl
++build:windows --cxxopt=-Wno-invalid-offsetof
++build:windows --cxxopt=-std:c++17 --host_cxxopt=-std:c++17
+
+ build:dbg --compilation_mode=dbg
+
