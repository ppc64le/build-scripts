diff --git a/src/lj_arch.h b/src/lj_arch.h
index 4e50e8b7..cbdedc58 100644
--- a/src/lj_arch.h
+++ b/src/lj_arch.h
@@ -691,6 +691,10 @@ extern void *LJ_WIN_LOADLIBA(const char *path);
 #endif
 #endif
 
+#if LUAJIT_TARGET == LUAJIT_ARCH_PPC && LJ_ARCH_ENDIAN == LUAJIT_LE
+#define LJ_NO_UNWIND            0
+#define LJ_UNWIND_EXT           0
+#else
 #if defined(LUAJIT_NO_UNWIND) || __GNU_COMPACT_EH__ || defined(__symbian__) || LJ_TARGET_IOS || LJ_TARGET_PS3 || LJ_TARGET_PS4 || LJ_TARGET_PS5
 #define LJ_NO_UNWIND		1
 #endif
@@ -706,6 +710,7 @@ extern void *LJ_WIN_LOADLIBA(const char *path);
 #else
 #define LJ_UNWIND_JIT		0
 #endif
+#endif //#if LUAJIT_TARGET == LUAJIT_ARCH_PPC && LJ_ARCH_ENDIAN == LUAJIT_LE
 
 /* Compatibility with Lua 5.1 vs. 5.2. */
 #ifdef LUAJIT_ENABLE_LUA52COMPAT
diff --git a/src/lj_ccall.c b/src/lj_ccall.c
index b21eea58..380bf887 100644
--- a/src/lj_ccall.c
+++ b/src/lj_ccall.c
@@ -1379,6 +1379,7 @@ int lj_ccall_func(lua_State *L, GCcdata *cd)
   if (ctype_isfunc(ct->info)) {
     CCallState cc;
     int gcsteps, ret;
+    memset(&cc, 0, sizeof(CCallState));
     cc.func = (void (*)(void))cdata_getptr(cdataptr(cd), sz);
     gcsteps = ccall_set_args(L, cts, ct, &cc);
     ct = (CType *)((intptr_t)ct-(intptr_t)cts->tab);
diff --git a/src/lj_ccall.h b/src/lj_ccall.h
index 144bf077..38d35dc5 100644
--- a/src/lj_ccall.h
+++ b/src/lj_ccall.h
@@ -181,6 +181,7 @@ typedef union FPRArg {
   (CCALL_NARG_GPR > CCALL_NRET_GPR ? CCALL_NARG_GPR : CCALL_NRET_GPR)
 #define CCALL_NUM_FPR \
   (CCALL_NARG_FPR > CCALL_NRET_FPR ? CCALL_NARG_FPR : CCALL_NRET_FPR)
+#define CCALL_MAXSTACK          32
 
 /* Check against constants in lj_ctype.h. */
 LJ_STATIC_ASSERT(CCALL_NUM_GPR <= CCALL_MAX_GPR);
diff --git a/src/lj_err.c b/src/lj_err.c
index 49cf9857..b3504898 100644
--- a/src/lj_err.c
+++ b/src/lj_err.c
@@ -123,7 +123,11 @@ static void *err_unwind(lua_State *L, void *stopcf, int errcode)
 	return cf;
       }
     }
+#if LJ_FR2
     if (frame <= tvref(L->stack)+LJ_FR2)
+#else
+    if (frame < tvref(L->stack))
+#endif
       break;
     switch (frame_typep(frame)) {
     case FRAME_LUA:  /* Lua frame. */
diff --git a/src/lj_parse.c b/src/lj_parse.c
index a30921af..6b030b8d 100644
--- a/src/lj_parse.c
+++ b/src/lj_parse.c
@@ -1753,6 +1753,7 @@ static void expr_table(LexState *ls, ExpDesc *e)
     if (expr_isk(&key) && key.k != VKNIL &&
 	(key.k == VKSTR || expr_isk_nojump(&val))) {
       TValue k, *v;
+      memset(&k, 0, sizeof(TValue));
       if (!t) {  /* Create template table on demand. */
 	BCReg kidx;
 	t = lj_tab_new(fs->L, needarr ? narr : 0, hsize2hbits(nhash));
diff --git a/src/vm_ppc.dasc b/src/vm_ppc.dasc
index 39b905e1..56a856d0 100644
--- a/src/vm_ppc.dasc
+++ b/src/vm_ppc.dasc
@@ -977,8 +977,11 @@ static void build_subroutines(BuildCtx *ctx)
   |.if FFI
   |  cmplwi TMP0, 1
   |.endif
-  |     lwz PC, -16(RB)			// Restore PC from [cont|PC].
-  |   subi TMP2, RD, 8
+  |// PC value corrected to avoid segfault
+  |   lwz PC, FRAME_CONTPC(RB)        // Restore PC from [cont|PC].
+  |	addi BASEP4, BASE, 4 
+  |	addi TMP2, RD, WORD_HI-8
+  |	lwz TMP1, LFUNC:TMP1->pc
   |   stwx TISNIL, RA, TMP2		// Ensure one valid arg.
   |.if P64
   |   ld TMP3, 0(DISPATCH)
@@ -986,7 +989,9 @@ static void build_subroutines(BuildCtx *ctx)
   |.if FFI
   |  ble >1
   |.endif
-  |    lwz TMP1, LFUNC:TMP1->pc
+  |.if P64
+  |  add TMP0, TMP0, TMP3
+  |.endif
   |    lwz KBASE, PC2PROTO(k)(TMP1)
   |  // BASE = base, RA = resultptr, RB = meta base
   |  mtctr TMP0
@@ -1715,14 +1720,23 @@ static void build_subroutines(BuildCtx *ctx)
   |
   |//-- Base library: iterators -------------------------------------------
   |
-  |.ffunc_1 next
-  |   stwx TISNIL, BASE, NARGS8:RC	// Set missing 2nd arg to nil.
-  |  checktab CARG3
+  |.ffunc next
+  |  cmplwi NARGS8:RC, 8
+  |    lwz TAB:CARG1, WORD_LO(BASE)
+  |  blt ->fff_fallback
+  |.if ENDIAN_LE
+  |   add TMP1, BASE, NARGS8:RC
+  |   stw TISNIL, WORD_HI(TMP1)         // Set missing 2nd arg to nil.
+  |.else
+  |   stwx TISNIL, BASE, NARGS8:RC      // Set missing 2nd arg to nil.
+  |.endif
   |   lwz PC, FRAME_PC(BASE)
-  |  bne ->fff_fallback
+  |   stp BASE, L->base                 // Add frame since C call can throw.
+  |   stp BASE, L->top                  // Dummy frame length is ok.
   |  la CARG2, 8(BASE)
   |  la CARG3, -8(BASE)
-  |  bl extern lj_tab_next		// (GCtab *t, cTValue *key, TValue *o)
+  |   stw PC, SAVE_PC
+  |  bl extern lj_tab_next      // (GCtab *t, cTValue *key,TValue *o)
   |  // Returns 1=found, 0=end, -1=error.
   |  cmpwi CRET1, 0
   |   la RA, -8(BASE)
@@ -3539,7 +3553,7 @@ static void build_subroutines(BuildCtx *ctx)
   |  .endif
   |   cmpwi cr1, CARG3, 0
   |  mr TMP2, sp
-  |   addic. CARG2, CARG2, -4
+  |   addic. CARG2, CARG2, -PSIZE
   |  .if GPR64
   |  stdux sp, sp, TMP1
   |  .else
@@ -5680,10 +5694,10 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |  crand 4*cr0+eq, 4*cr0+eq, 4*cr7+eq
     |    add TMP3, PC, TMP0
     |  bne cr0, >5
-    |  lus TMP1, (LJ_KEYINDEX >> 16)
-    |  ori TMP1, TMP1, (LJ_KEYINDEX & 0xffff)
-    |  stw ZERO, -4(RA)			// Initialize control var.
-    |  stw TMP1, -8(RA)
+    |  lus TMP1, 0xfffe
+    |  ori TMP1, TMP1, 0x7fff
+    |  stw ZERO, WORD_LO-8(RA)          // Initialize control var.
+    |  stw TMP1, WORD_HI-8(RA)
     |    addis PC, TMP3, -(BCBIAS_J*4 >> 16)
     |1:
     |  ins_next
